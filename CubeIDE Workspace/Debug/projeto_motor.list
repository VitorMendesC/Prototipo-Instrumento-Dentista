
projeto_motor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097ec  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  08009900  08009900  00019900  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dc8  08009dc8  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  08009dc8  08009dc8  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009dc8  08009dc8  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dc8  08009dc8  00019dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009dd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000318  200001d8  08009fa8  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004f0  08009fa8  000204f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020201  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ba3e  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022c4  00000000  00000000  0002bc82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  0002df48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009dc  00000000  00000000  0002ec20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019341  00000000  00000000  0002f5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eea7  00000000  00000000  0004893d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008fa48  00000000  00000000  000577e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004a90  00000000  00000000  000e722c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ebcbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	080098e4 	.word	0x080098e4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	080098e4 	.word	0x080098e4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__gesf2>:
 8000d84:	f04f 3cff 	mov.w	ip, #4294967295
 8000d88:	e006      	b.n	8000d98 <__cmpsf2+0x4>
 8000d8a:	bf00      	nop

08000d8c <__lesf2>:
 8000d8c:	f04f 0c01 	mov.w	ip, #1
 8000d90:	e002      	b.n	8000d98 <__cmpsf2+0x4>
 8000d92:	bf00      	nop

08000d94 <__cmpsf2>:
 8000d94:	f04f 0c01 	mov.w	ip, #1
 8000d98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000d9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000da0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000da4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000da8:	bf18      	it	ne
 8000daa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000dae:	d011      	beq.n	8000dd4 <__cmpsf2+0x40>
 8000db0:	b001      	add	sp, #4
 8000db2:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000db6:	bf18      	it	ne
 8000db8:	ea90 0f01 	teqne	r0, r1
 8000dbc:	bf58      	it	pl
 8000dbe:	ebb2 0003 	subspl.w	r0, r2, r3
 8000dc2:	bf88      	it	hi
 8000dc4:	17c8      	asrhi	r0, r1, #31
 8000dc6:	bf38      	it	cc
 8000dc8:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000dcc:	bf18      	it	ne
 8000dce:	f040 0001 	orrne.w	r0, r0, #1
 8000dd2:	4770      	bx	lr
 8000dd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000dd8:	d102      	bne.n	8000de0 <__cmpsf2+0x4c>
 8000dda:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000dde:	d105      	bne.n	8000dec <__cmpsf2+0x58>
 8000de0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000de4:	d1e4      	bne.n	8000db0 <__cmpsf2+0x1c>
 8000de6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000dea:	d0e1      	beq.n	8000db0 <__cmpsf2+0x1c>
 8000dec:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop

08000df4 <__aeabi_cfrcmple>:
 8000df4:	4684      	mov	ip, r0
 8000df6:	4608      	mov	r0, r1
 8000df8:	4661      	mov	r1, ip
 8000dfa:	e7ff      	b.n	8000dfc <__aeabi_cfcmpeq>

08000dfc <__aeabi_cfcmpeq>:
 8000dfc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000dfe:	f7ff ffc9 	bl	8000d94 <__cmpsf2>
 8000e02:	2800      	cmp	r0, #0
 8000e04:	bf48      	it	mi
 8000e06:	f110 0f00 	cmnmi.w	r0, #0
 8000e0a:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000e0c <__aeabi_fcmpeq>:
 8000e0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e10:	f7ff fff4 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e14:	bf0c      	ite	eq
 8000e16:	2001      	moveq	r0, #1
 8000e18:	2000      	movne	r0, #0
 8000e1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e1e:	bf00      	nop

08000e20 <__aeabi_fcmplt>:
 8000e20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e24:	f7ff ffea 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e28:	bf34      	ite	cc
 8000e2a:	2001      	movcc	r0, #1
 8000e2c:	2000      	movcs	r0, #0
 8000e2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e32:	bf00      	nop

08000e34 <__aeabi_fcmple>:
 8000e34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e38:	f7ff ffe0 	bl	8000dfc <__aeabi_cfcmpeq>
 8000e3c:	bf94      	ite	ls
 8000e3e:	2001      	movls	r0, #1
 8000e40:	2000      	movhi	r0, #0
 8000e42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e46:	bf00      	nop

08000e48 <__aeabi_fcmpge>:
 8000e48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e4c:	f7ff ffd2 	bl	8000df4 <__aeabi_cfrcmple>
 8000e50:	bf94      	ite	ls
 8000e52:	2001      	movls	r0, #1
 8000e54:	2000      	movhi	r0, #0
 8000e56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e5a:	bf00      	nop

08000e5c <__aeabi_fcmpgt>:
 8000e5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000e60:	f7ff ffc8 	bl	8000df4 <__aeabi_cfrcmple>
 8000e64:	bf34      	ite	cc
 8000e66:	2001      	movcc	r0, #1
 8000e68:	2000      	movcs	r0, #0
 8000e6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000e6e:	bf00      	nop

08000e70 <__aeabi_d2lz>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	4605      	mov	r5, r0
 8000e74:	460c      	mov	r4, r1
 8000e76:	2200      	movs	r2, #0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4628      	mov	r0, r5
 8000e7c:	4621      	mov	r1, r4
 8000e7e:	f7ff fd9d 	bl	80009bc <__aeabi_dcmplt>
 8000e82:	b928      	cbnz	r0, 8000e90 <__aeabi_d2lz+0x20>
 8000e84:	4628      	mov	r0, r5
 8000e86:	4621      	mov	r1, r4
 8000e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e8c:	f000 b80a 	b.w	8000ea4 <__aeabi_d2ulz>
 8000e90:	4628      	mov	r0, r5
 8000e92:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000e96:	f000 f805 	bl	8000ea4 <__aeabi_d2ulz>
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ea0:	bd38      	pop	{r3, r4, r5, pc}
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_d2ulz>:
 8000ea4:	b5d0      	push	{r4, r6, r7, lr}
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <__aeabi_d2ulz+0x34>)
 8000eaa:	4606      	mov	r6, r0
 8000eac:	460f      	mov	r7, r1
 8000eae:	f7ff fb13 	bl	80004d8 <__aeabi_dmul>
 8000eb2:	f7ff fde9 	bl	8000a88 <__aeabi_d2uiz>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	f7ff fa94 	bl	80003e4 <__aeabi_ui2d>
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	4b07      	ldr	r3, [pc, #28]	; (8000edc <__aeabi_d2ulz+0x38>)
 8000ec0:	f7ff fb0a 	bl	80004d8 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4630      	mov	r0, r6
 8000eca:	4639      	mov	r1, r7
 8000ecc:	f7ff f94c 	bl	8000168 <__aeabi_dsub>
 8000ed0:	f7ff fdda 	bl	8000a88 <__aeabi_d2uiz>
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed8:	3df00000 	.word	0x3df00000
 8000edc:	41f00000 	.word	0x41f00000

08000ee0 <delay_us>:
static uint16_t D4_PIN, D5_PIN, D6_PIN, D7_PIN;

//-------------------------------------------------------------------------------
// delay_us
//-------------------------------------------------------------------------------
void delay_us(uint16_t t) {
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80fb      	strh	r3, [r7, #6]
	for(int i=0;i<t;i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	60fb      	str	r3, [r7, #12]
 8000eee:	e00c      	b.n	8000f0a <delay_us+0x2a>
		for(int j=0;j<10;j++)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	e003      	b.n	8000efe <delay_us+0x1e>
		__NOP();
 8000ef6:	bf00      	nop
		for(int j=0;j<10;j++)
 8000ef8:	68bb      	ldr	r3, [r7, #8]
 8000efa:	3301      	adds	r3, #1
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
 8000f00:	2b09      	cmp	r3, #9
 8000f02:	ddf8      	ble.n	8000ef6 <delay_us+0x16>
	for(int i=0;i<t;i++)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	3301      	adds	r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	88fb      	ldrh	r3, [r7, #6]
 8000f0c:	68fa      	ldr	r2, [r7, #12]
 8000f0e:	429a      	cmp	r2, r3
 8000f10:	dbee      	blt.n	8000ef0 <delay_us+0x10>

}
 8000f12:	bf00      	nop
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
	...

08000f20 <lcd_enablePulse>:
//-------------------------------------------------------------------------------
// lcd_enablePulse
//-------------------------------------------------------------------------------
static void lcd_enablePulse(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(PORT_CTR, PIN_E, 1);
 8000f24:	4b0b      	ldr	r3, [pc, #44]	; (8000f54 <lcd_enablePulse+0x34>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a0b      	ldr	r2, [pc, #44]	; (8000f58 <lcd_enablePulse+0x38>)
 8000f2a:	8811      	ldrh	r1, [r2, #0]
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f002 fab8 	bl	80034a4 <HAL_GPIO_WritePin>
  delay_us(20);
 8000f34:	2014      	movs	r0, #20
 8000f36:	f7ff ffd3 	bl	8000ee0 <delay_us>
  HAL_GPIO_WritePin(PORT_CTR, PIN_E, 0);
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <lcd_enablePulse+0x34>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <lcd_enablePulse+0x38>)
 8000f40:	8811      	ldrh	r1, [r2, #0]
 8000f42:	2200      	movs	r2, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 faad 	bl	80034a4 <HAL_GPIO_WritePin>
  delay_us(60);
 8000f4a:	203c      	movs	r0, #60	; 0x3c
 8000f4c:	f7ff ffc8 	bl	8000ee0 <delay_us>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200001f4 	.word	0x200001f4
 8000f58:	200001fa 	.word	0x200001fa

08000f5c <lcd_write>:
//-------------------------------------------------------------------------------
// lcd_write
//-------------------------------------------------------------------------------
static void lcd_write(uint8_t data)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	  //send MSB data
    uint8_t nibble = (data >> 4) & 0xF;
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	091b      	lsrs	r3, r3, #4
 8000f6a:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(PORT_DATA, D4_PIN, nibble & 0x1);
 8000f6c:	4b31      	ldr	r3, [pc, #196]	; (8001034 <lcd_write+0xd8>)
 8000f6e:	6818      	ldr	r0, [r3, #0]
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <lcd_write+0xdc>)
 8000f72:	8819      	ldrh	r1, [r3, #0]
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	f002 fa91 	bl	80034a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_DATA, D5_PIN, nibble & 0x2);
 8000f82:	4b2c      	ldr	r3, [pc, #176]	; (8001034 <lcd_write+0xd8>)
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	4b2d      	ldr	r3, [pc, #180]	; (800103c <lcd_write+0xe0>)
 8000f88:	8819      	ldrh	r1, [r3, #0]
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
 8000f8c:	f003 0302 	and.w	r3, r3, #2
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	f002 fa86 	bl	80034a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_DATA, D6_PIN, nibble & 0x4);
 8000f98:	4b26      	ldr	r3, [pc, #152]	; (8001034 <lcd_write+0xd8>)
 8000f9a:	6818      	ldr	r0, [r3, #0]
 8000f9c:	4b28      	ldr	r3, [pc, #160]	; (8001040 <lcd_write+0xe4>)
 8000f9e:	8819      	ldrh	r1, [r3, #0]
 8000fa0:	7bfb      	ldrb	r3, [r7, #15]
 8000fa2:	f003 0304 	and.w	r3, r3, #4
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f002 fa7b 	bl	80034a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_DATA, D7_PIN, nibble & 0x8);
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <lcd_write+0xd8>)
 8000fb0:	6818      	ldr	r0, [r3, #0]
 8000fb2:	4b24      	ldr	r3, [pc, #144]	; (8001044 <lcd_write+0xe8>)
 8000fb4:	8819      	ldrh	r1, [r3, #0]
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	f003 0308 	and.w	r3, r3, #8
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	f002 fa70 	bl	80034a4 <HAL_GPIO_WritePin>
    lcd_enablePulse();
 8000fc4:	f7ff ffac 	bl	8000f20 <lcd_enablePulse>
    //send LSB data
    nibble = data & 0xF;
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	73fb      	strb	r3, [r7, #15]
    HAL_GPIO_WritePin(PORT_DATA, D4_PIN, nibble & 0x1);
 8000fd0:	4b18      	ldr	r3, [pc, #96]	; (8001034 <lcd_write+0xd8>)
 8000fd2:	6818      	ldr	r0, [r3, #0]
 8000fd4:	4b18      	ldr	r3, [pc, #96]	; (8001038 <lcd_write+0xdc>)
 8000fd6:	8819      	ldrh	r1, [r3, #0]
 8000fd8:	7bfb      	ldrb	r3, [r7, #15]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	b2db      	uxtb	r3, r3
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f002 fa5f 	bl	80034a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_DATA, D5_PIN, nibble & 0x2);
 8000fe6:	4b13      	ldr	r3, [pc, #76]	; (8001034 <lcd_write+0xd8>)
 8000fe8:	6818      	ldr	r0, [r3, #0]
 8000fea:	4b14      	ldr	r3, [pc, #80]	; (800103c <lcd_write+0xe0>)
 8000fec:	8819      	ldrh	r1, [r3, #0]
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	f002 fa54 	bl	80034a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_DATA, D6_PIN, nibble & 0x4);
 8000ffc:	4b0d      	ldr	r3, [pc, #52]	; (8001034 <lcd_write+0xd8>)
 8000ffe:	6818      	ldr	r0, [r3, #0]
 8001000:	4b0f      	ldr	r3, [pc, #60]	; (8001040 <lcd_write+0xe4>)
 8001002:	8819      	ldrh	r1, [r3, #0]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	f003 0304 	and.w	r3, r3, #4
 800100a:	b2db      	uxtb	r3, r3
 800100c:	461a      	mov	r2, r3
 800100e:	f002 fa49 	bl	80034a4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(PORT_DATA, D7_PIN, nibble & 0x8);
 8001012:	4b08      	ldr	r3, [pc, #32]	; (8001034 <lcd_write+0xd8>)
 8001014:	6818      	ldr	r0, [r3, #0]
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <lcd_write+0xe8>)
 8001018:	8819      	ldrh	r1, [r3, #0]
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	f003 0308 	and.w	r3, r3, #8
 8001020:	b2db      	uxtb	r3, r3
 8001022:	461a      	mov	r2, r3
 8001024:	f002 fa3e 	bl	80034a4 <HAL_GPIO_WritePin>
    lcd_enablePulse();
 8001028:	f7ff ff7a 	bl	8000f20 <lcd_enablePulse>
}
 800102c:	bf00      	nop
 800102e:	3710      	adds	r7, #16
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	200001fc 	.word	0x200001fc
 8001038:	20000200 	.word	0x20000200
 800103c:	20000202 	.word	0x20000202
 8001040:	20000204 	.word	0x20000204
 8001044:	20000206 	.word	0x20000206

08001048 <lcd_writeCmd>:
//-------------------------------------------------------------------------------
// lcd_writeCmd
//-------------------------------------------------------------------------------
static void lcd_writeCmd(uint8_t cmd)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_CTR, PIN_RS, 0);
 8001052:	4b08      	ldr	r3, [pc, #32]	; (8001074 <lcd_writeCmd+0x2c>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <lcd_writeCmd+0x30>)
 8001058:	8811      	ldrh	r1, [r2, #0]
 800105a:	2200      	movs	r2, #0
 800105c:	4618      	mov	r0, r3
 800105e:	f002 fa21 	bl	80034a4 <HAL_GPIO_WritePin>
  lcd_write(cmd);
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	4618      	mov	r0, r3
 8001066:	f7ff ff79 	bl	8000f5c <lcd_write>
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200001f4 	.word	0x200001f4
 8001078:	200001f8 	.word	0x200001f8

0800107c <lcd_writeData>:
//-------------------------------------------------------------------------------
// lcd_writeData
//-------------------------------------------------------------------------------
static void lcd_writeData(uint8_t data)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_CTR, PIN_RS, 1);
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <lcd_writeData+0x2c>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <lcd_writeData+0x30>)
 800108c:	8811      	ldrh	r1, [r2, #0]
 800108e:	2201      	movs	r2, #1
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fa07 	bl	80034a4 <HAL_GPIO_WritePin>
  lcd_write(data);
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff5f 	bl	8000f5c <lcd_write>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	200001f4 	.word	0x200001f4
 80010ac:	200001f8 	.word	0x200001f8

080010b0 <lcd_write4>:
//-------------------------------------------------------------------------------
// lcd_write4
//-------------------------------------------------------------------------------
static void lcd_write4(uint8_t cmd)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b082      	sub	sp, #8
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	71fb      	strb	r3, [r7, #7]
  cmd &= 0x0F;
 80010ba:	79fb      	ldrb	r3, [r7, #7]
 80010bc:	f003 030f 	and.w	r3, r3, #15
 80010c0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(PORT_CTR, PIN_RS, 0);
 80010c2:	4b1d      	ldr	r3, [pc, #116]	; (8001138 <lcd_write4+0x88>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a1d      	ldr	r2, [pc, #116]	; (800113c <lcd_write4+0x8c>)
 80010c8:	8811      	ldrh	r1, [r2, #0]
 80010ca:	2200      	movs	r2, #0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f002 f9e9 	bl	80034a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_DATA, D4_PIN, cmd & 0x1);
 80010d2:	4b1b      	ldr	r3, [pc, #108]	; (8001140 <lcd_write4+0x90>)
 80010d4:	6818      	ldr	r0, [r3, #0]
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <lcd_write4+0x94>)
 80010d8:	8819      	ldrh	r1, [r3, #0]
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	f002 f9de 	bl	80034a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_DATA, D5_PIN, cmd & 0x2);
 80010e8:	4b15      	ldr	r3, [pc, #84]	; (8001140 <lcd_write4+0x90>)
 80010ea:	6818      	ldr	r0, [r3, #0]
 80010ec:	4b16      	ldr	r3, [pc, #88]	; (8001148 <lcd_write4+0x98>)
 80010ee:	8819      	ldrh	r1, [r3, #0]
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	461a      	mov	r2, r3
 80010fa:	f002 f9d3 	bl	80034a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_DATA, D6_PIN, cmd & 0x4);
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <lcd_write4+0x90>)
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	4b12      	ldr	r3, [pc, #72]	; (800114c <lcd_write4+0x9c>)
 8001104:	8819      	ldrh	r1, [r3, #0]
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 0304 	and.w	r3, r3, #4
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f002 f9c8 	bl	80034a4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PORT_DATA, D7_PIN, cmd & 0x8);
 8001114:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <lcd_write4+0x90>)
 8001116:	6818      	ldr	r0, [r3, #0]
 8001118:	4b0d      	ldr	r3, [pc, #52]	; (8001150 <lcd_write4+0xa0>)
 800111a:	8819      	ldrh	r1, [r3, #0]
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	b2db      	uxtb	r3, r3
 8001124:	461a      	mov	r2, r3
 8001126:	f002 f9bd 	bl	80034a4 <HAL_GPIO_WritePin>
  lcd_enablePulse();
 800112a:	f7ff fef9 	bl	8000f20 <lcd_enablePulse>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200001f4 	.word	0x200001f4
 800113c:	200001f8 	.word	0x200001f8
 8001140:	200001fc 	.word	0x200001fc
 8001144:	20000200 	.word	0x20000200
 8001148:	20000202 	.word	0x20000202
 800114c:	20000204 	.word	0x20000204
 8001150:	20000206 	.word	0x20000206

08001154 <lcd_Init>:
//-------------------------------------------------------------------------------
// lcd_Init
//-------------------------------------------------------------------------------
void lcd_Init(GPIO_TypeDef* port_ctr, uint16_t rs_pin, uint16_t rw_pin, uint16_t e_pin,
              GPIO_TypeDef* port_data, uint16_t d4_pin, uint16_t d5_pin, uint16_t d6_pin, uint16_t d7_pin)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	4608      	mov	r0, r1
 800115e:	4611      	mov	r1, r2
 8001160:	461a      	mov	r2, r3
 8001162:	4603      	mov	r3, r0
 8001164:	817b      	strh	r3, [r7, #10]
 8001166:	460b      	mov	r3, r1
 8001168:	813b      	strh	r3, [r7, #8]
 800116a:	4613      	mov	r3, r2
 800116c:	80fb      	strh	r3, [r7, #6]
  PORT_CTR = port_ctr;
 800116e:	4a21      	ldr	r2, [pc, #132]	; (80011f4 <lcd_Init+0xa0>)
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	6013      	str	r3, [r2, #0]
  PIN_RS = rs_pin;
 8001174:	4a20      	ldr	r2, [pc, #128]	; (80011f8 <lcd_Init+0xa4>)
 8001176:	897b      	ldrh	r3, [r7, #10]
 8001178:	8013      	strh	r3, [r2, #0]
  PIN_E = e_pin;
 800117a:	4a20      	ldr	r2, [pc, #128]	; (80011fc <lcd_Init+0xa8>)
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	8013      	strh	r3, [r2, #0]
  PORT_DATA = port_data;
 8001180:	4a1f      	ldr	r2, [pc, #124]	; (8001200 <lcd_Init+0xac>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	6013      	str	r3, [r2, #0]
  D4_PIN = d4_pin;
 8001186:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <lcd_Init+0xb0>)
 8001188:	8bbb      	ldrh	r3, [r7, #28]
 800118a:	8013      	strh	r3, [r2, #0]
  D5_PIN = d5_pin;
 800118c:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <lcd_Init+0xb4>)
 800118e:	8c3b      	ldrh	r3, [r7, #32]
 8001190:	8013      	strh	r3, [r2, #0]
  D6_PIN = d6_pin;
 8001192:	4a1e      	ldr	r2, [pc, #120]	; (800120c <lcd_Init+0xb8>)
 8001194:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001196:	8013      	strh	r3, [r2, #0]
  D7_PIN = d7_pin;
 8001198:	4a1d      	ldr	r2, [pc, #116]	; (8001210 <lcd_Init+0xbc>)
 800119a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800119c:	8013      	strh	r3, [r2, #0]

  HAL_Delay(15);
 800119e:	200f      	movs	r0, #15
 80011a0:	f001 f864 	bl	800226c <HAL_Delay>
  lcd_write4(0x3);
 80011a4:	2003      	movs	r0, #3
 80011a6:	f7ff ff83 	bl	80010b0 <lcd_write4>
  HAL_Delay(5);
 80011aa:	2005      	movs	r0, #5
 80011ac:	f001 f85e 	bl	800226c <HAL_Delay>
  lcd_write4(0x3);
 80011b0:	2003      	movs	r0, #3
 80011b2:	f7ff ff7d 	bl	80010b0 <lcd_write4>
  HAL_Delay(1);
 80011b6:	2001      	movs	r0, #1
 80011b8:	f001 f858 	bl	800226c <HAL_Delay>
  lcd_write4(0x3);
 80011bc:	2003      	movs	r0, #3
 80011be:	f7ff ff77 	bl	80010b0 <lcd_write4>
  HAL_Delay(1);
 80011c2:	2001      	movs	r0, #1
 80011c4:	f001 f852 	bl	800226c <HAL_Delay>
  lcd_write4(0x2);
 80011c8:	2002      	movs	r0, #2
 80011ca:	f7ff ff71 	bl	80010b0 <lcd_write4>
  HAL_Delay(1);
 80011ce:	2001      	movs	r0, #1
 80011d0:	f001 f84c 	bl	800226c <HAL_Delay>
  lcd_writeCmd(0x28);
 80011d4:	2028      	movs	r0, #40	; 0x28
 80011d6:	f7ff ff37 	bl	8001048 <lcd_writeCmd>
  lcd_writeCmd(0x0C);
 80011da:	200c      	movs	r0, #12
 80011dc:	f7ff ff34 	bl	8001048 <lcd_writeCmd>
  lcd_writeCmd(0x01);
 80011e0:	2001      	movs	r0, #1
 80011e2:	f7ff ff31 	bl	8001048 <lcd_writeCmd>
  HAL_Delay(30);
 80011e6:	201e      	movs	r0, #30
 80011e8:	f001 f840 	bl	800226c <HAL_Delay>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	200001f4 	.word	0x200001f4
 80011f8:	200001f8 	.word	0x200001f8
 80011fc:	200001fa 	.word	0x200001fa
 8001200:	200001fc 	.word	0x200001fc
 8001204:	20000200 	.word	0x20000200
 8001208:	20000202 	.word	0x20000202
 800120c:	20000204 	.word	0x20000204
 8001210:	20000206 	.word	0x20000206

08001214 <lcd_writeCommand>:
//-------------------------------------------------------------------------------
// lcd_writeCommand
//-------------------------------------------------------------------------------
void lcd_writeCommand(uint8_t cmd)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
	lcd_writeCmd(cmd);
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff11 	bl	8001048 <lcd_writeCmd>
	HAL_Delay(3);
 8001226:	2003      	movs	r0, #3
 8001228:	f001 f820 	bl	800226c <HAL_Delay>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lcd_gotoxy>:
//-------------------------------------------------------------------------------
// lcd_gotoxy
//-------------------------------------------------------------------------------
void lcd_gotoxy(uint8_t col, uint8_t row)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	460a      	mov	r2, r1
 800123e:	71fb      	strb	r3, [r7, #7]
 8001240:	4613      	mov	r3, r2
 8001242:	71bb      	strb	r3, [r7, #6]
  if(row==0)
 8001244:	79bb      	ldrb	r3, [r7, #6]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d106      	bne.n	8001258 <lcd_gotoxy+0x24>
    lcd_writeCmd(0x80+col);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	3b80      	subs	r3, #128	; 0x80
 800124e:	b2db      	uxtb	r3, r3
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff fef9 	bl	8001048 <lcd_writeCmd>
  else
    lcd_writeCmd(0xC0+col);
}
 8001256:	e005      	b.n	8001264 <lcd_gotoxy+0x30>
    lcd_writeCmd(0xC0+col);
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	3b40      	subs	r3, #64	; 0x40
 800125c:	b2db      	uxtb	r3, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f7ff fef2 	bl	8001048 <lcd_writeCmd>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <lcd_clear>:
//-------------------------------------------------------------------------------
// lcd_clear
// avoid: this routine makes the lcd flicker!
//-------------------------------------------------------------------------------
void lcd_clear()
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
	lcd_writeCommand(0x01);
 8001270:	2001      	movs	r0, #1
 8001272:	f7ff ffcf 	bl	8001214 <lcd_writeCommand>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}

0800127a <lcd_printf>:
//-------------------------------------------------------------------------------
// lcd_printf
//-------------------------------------------------------------------------------
void lcd_printf(const char* str, ...)
{
 800127a:	b40f      	push	{r0, r1, r2, r3}
 800127c:	b590      	push	{r4, r7, lr}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
  char stringArray[20];
  va_list args;
  va_start(args, str);
 8001282:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001286:	607b      	str	r3, [r7, #4]
  vsprintf(stringArray, str, args);
 8001288:	f107 0308 	add.w	r3, r7, #8
 800128c:	687a      	ldr	r2, [r7, #4]
 800128e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001290:	4618      	mov	r0, r3
 8001292:	f004 fefb 	bl	800608c <vsiprintf>
  va_end(args);
  for(uint8_t i = 0; i < strlen(stringArray); i++)
 8001296:	2300      	movs	r3, #0
 8001298:	77fb      	strb	r3, [r7, #31]
 800129a:	e00a      	b.n	80012b2 <lcd_printf+0x38>
    lcd_writeData((uint8_t)stringArray[i]);
 800129c:	7ffb      	ldrb	r3, [r7, #31]
 800129e:	3320      	adds	r3, #32
 80012a0:	443b      	add	r3, r7
 80012a2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff fee8 	bl	800107c <lcd_writeData>
  for(uint8_t i = 0; i < strlen(stringArray); i++)
 80012ac:	7ffb      	ldrb	r3, [r7, #31]
 80012ae:	3301      	adds	r3, #1
 80012b0:	77fb      	strb	r3, [r7, #31]
 80012b2:	7ffc      	ldrb	r4, [r7, #31]
 80012b4:	f107 0308 	add.w	r3, r7, #8
 80012b8:	4618      	mov	r0, r3
 80012ba:	f7fe ff49 	bl	8000150 <strlen>
 80012be:	4603      	mov	r3, r0
 80012c0:	429c      	cmp	r4, r3
 80012c2:	d3eb      	bcc.n	800129c <lcd_printf+0x22>
}
 80012c4:	bf00      	nop
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80012d0:	b004      	add	sp, #16
 80012d2:	4770      	bx	lr
 80012d4:	0000      	movs	r0, r0
	...

080012d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012d8:	b590      	push	{r4, r7, lr}
 80012da:	b087      	sub	sp, #28
 80012dc:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012de:	f000 ff63 	bl	80021a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012e2:	f000 fa61 	bl	80017a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012e6:	f000 fc65 	bl	8001bb4 <MX_GPIO_Init>
  MX_DMA_Init();
 80012ea:	f000 fc45 	bl	8001b78 <MX_DMA_Init>
  MX_ADC1_Init();
 80012ee:	f000 fab7 	bl	8001860 <MX_ADC1_Init>
  MX_TIM1_Init();
 80012f2:	f000 faf3 	bl	80018dc <MX_TIM1_Init>
  MX_TIM3_Init();
 80012f6:	f000 fb9d 	bl	8001a34 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012fa:	f000 fbef 	bl	8001adc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  lcd_Init(GPIOA, GPIO_PIN_4, GPIO_PIN_5,
 80012fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001302:	9304      	str	r3, [sp, #16]
 8001304:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001308:	9303      	str	r3, [sp, #12]
 800130a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800130e:	9302      	str	r3, [sp, #8]
 8001310:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	4b3d      	ldr	r3, [pc, #244]	; (800140c <main+0x134>)
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2340      	movs	r3, #64	; 0x40
 800131c:	2220      	movs	r2, #32
 800131e:	2110      	movs	r1, #16
 8001320:	483b      	ldr	r0, [pc, #236]	; (8001410 <main+0x138>)
 8001322:	f7ff ff17 	bl	8001154 <lcd_Init>
		  GPIO_PIN_6, GPIOB, GPIO_PIN_12,
		  GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15);
  HAL_TIM_Base_Start(&htim3);
 8001326:	483b      	ldr	r0, [pc, #236]	; (8001414 <main+0x13c>)
 8001328:	f002 fe8c 	bl	8004044 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim4);
 800132c:	483a      	ldr	r0, [pc, #232]	; (8001418 <main+0x140>)
 800132e:	f002 fed3 	bl	80040d8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001332:	2100      	movs	r1, #0
 8001334:	4839      	ldr	r0, [pc, #228]	; (800141c <main+0x144>)
 8001336:	f002 ff79 	bl	800422c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800133a:	2104      	movs	r1, #4
 800133c:	4837      	ldr	r0, [pc, #220]	; (800141c <main+0x144>)
 800133e:	f002 ff75 	bl	800422c <HAL_TIM_PWM_Start>
  last_time_LCD = HAL_GetTick();
 8001342:	f000 ff89 	bl	8002258 <HAL_GetTick>
 8001346:	4603      	mov	r3, r0
 8001348:	4a35      	ldr	r2, [pc, #212]	; (8001420 <main+0x148>)
 800134a:	6013      	str	r3, [r2, #0]
  last_time_ADC = HAL_GetTick();
 800134c:	f000 ff84 	bl	8002258 <HAL_GetTick>
 8001350:	4603      	mov	r3, r0
 8001352:	4a34      	ldr	r2, [pc, #208]	; (8001424 <main+0x14c>)
 8001354:	6013      	str	r3, [r2, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  current_time = HAL_GetTick();
 8001356:	f000 ff7f 	bl	8002258 <HAL_GetTick>
 800135a:	4603      	mov	r3, r0
 800135c:	4a32      	ldr	r2, [pc, #200]	; (8001428 <main+0x150>)
 800135e:	6013      	str	r3, [r2, #0]
	  HAL_ADC_Start(&hadc1);
 8001360:	4832      	ldr	r0, [pc, #200]	; (800142c <main+0x154>)
 8001362:	f001 f87f 	bl	8002464 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 20);	// Espera pelo resultado por até 20 ms
 8001366:	2114      	movs	r1, #20
 8001368:	4830      	ldr	r0, [pc, #192]	; (800142c <main+0x154>)
 800136a:	f001 f929 	bl	80025c0 <HAL_ADC_PollForConversion>
	  ADC_atual = HAL_ADC_GetValue(&hadc1);		/*Realizando a leitura do valor do pot.*/
 800136e:	482f      	ldr	r0, [pc, #188]	; (800142c <main+0x154>)
 8001370:	f001 fa2c 	bl	80027cc <HAL_ADC_GetValue>
 8001374:	4603      	mov	r3, r0
 8001376:	4a2e      	ldr	r2, [pc, #184]	; (8001430 <main+0x158>)
 8001378:	6013      	str	r3, [r2, #0]

	  RPM = ticks*TIM4_FREQ*60/(PPR*0.6);
 800137a:	4b2e      	ldr	r3, [pc, #184]	; (8001434 <main+0x15c>)
 800137c:	881b      	ldrh	r3, [r3, #0]
 800137e:	461a      	mov	r2, r3
 8001380:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8001384:	fb02 f303 	mul.w	r3, r2, r3
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f83b 	bl	8000404 <__aeabi_i2d>
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	4b29      	ldr	r3, [pc, #164]	; (8001438 <main+0x160>)
 8001394:	f7ff f9ca 	bl	800072c <__aeabi_ddiv>
 8001398:	4602      	mov	r2, r0
 800139a:	460b      	mov	r3, r1
 800139c:	4610      	mov	r0, r2
 800139e:	4619      	mov	r1, r3
 80013a0:	f7ff fb92 	bl	8000ac8 <__aeabi_d2f>
 80013a4:	4603      	mov	r3, r0
 80013a6:	4a25      	ldr	r2, [pc, #148]	; (800143c <main+0x164>)
 80013a8:	6013      	str	r3, [r2, #0]

	  if(RPM < RPM_LOW_THR && !motor_low_speed_flag){	// Se o motor estiver lento e a flag de motor
 80013aa:	4b24      	ldr	r3, [pc, #144]	; (800143c <main+0x164>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4924      	ldr	r1, [pc, #144]	; (8001440 <main+0x168>)
 80013b0:	4618      	mov	r0, r3
 80013b2:	f7ff fd35 	bl	8000e20 <__aeabi_fcmplt>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d00a      	beq.n	80013d2 <main+0xfa>
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <main+0x16c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d106      	bne.n	80013d2 <main+0xfa>
		  motor_low_speed_flag = 1;						// lento ainda não foi acionada
 80013c4:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <main+0x16c>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	601a      	str	r2, [r3, #0]
		  last_time_RPM = current_time;					// aciona a flag e o timer para nova checagem
 80013ca:	4b17      	ldr	r3, [pc, #92]	; (8001428 <main+0x150>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a1e      	ldr	r2, [pc, #120]	; (8001448 <main+0x170>)
 80013d0:	6013      	str	r3, [r2, #0]
	  }

	  if(current_time - last_time_RPM > RPM_TIME_DELAY && motor_low_speed_flag){
 80013d2:	4b15      	ldr	r3, [pc, #84]	; (8001428 <main+0x150>)
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <main+0x170>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80013e0:	d93b      	bls.n	800145a <main+0x182>
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <main+0x16c>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d037      	beq.n	800145a <main+0x182>
		  if(RPM < RPM_LOW_THR){
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <main+0x164>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4914      	ldr	r1, [pc, #80]	; (8001440 <main+0x168>)
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff fd15 	bl	8000e20 <__aeabi_fcmplt>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d02b      	beq.n	8001454 <main+0x17c>
			  safety_flag = 1;
 80013fc:	4b13      	ldr	r3, [pc, #76]	; (800144c <main+0x174>)
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
			  motor_lock_flag = 1;						// Se o motor não se mover depois de RPM_TIME_DELAY ms
 8001402:	4b13      	ldr	r3, [pc, #76]	; (8001450 <main+0x178>)
 8001404:	2201      	movs	r2, #1
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	e027      	b.n	800145a <main+0x182>
 800140a:	bf00      	nop
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40010800 	.word	0x40010800
 8001414:	200002c4 	.word	0x200002c4
 8001418:	2000030c 	.word	0x2000030c
 800141c:	2000027c 	.word	0x2000027c
 8001420:	20000360 	.word	0x20000360
 8001424:	2000035c 	.word	0x2000035c
 8001428:	20000354 	.word	0x20000354
 800142c:	20000208 	.word	0x20000208
 8001430:	20000364 	.word	0x20000364
 8001434:	20000370 	.word	0x20000370
 8001438:	4082c000 	.word	0x4082c000
 800143c:	20000374 	.word	0x20000374
 8001440:	42c80000 	.word	0x42c80000
 8001444:	2000038c 	.word	0x2000038c
 8001448:	20000358 	.word	0x20000358
 800144c:	20000390 	.word	0x20000390
 8001450:	20000394 	.word	0x20000394
		  }												// considera-se motor travado
		  else{
			  motor_low_speed_flag = 0;					// Motor entrou em movimento, operação nominal
 8001454:	4b98      	ldr	r3, [pc, #608]	; (80016b8 <main+0x3e0>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
		  }
	  }

	  if(current_time - last_time_ADC > ADC_TIME_DELAY){
 800145a:	4b98      	ldr	r3, [pc, #608]	; (80016bc <main+0x3e4>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4b98      	ldr	r3, [pc, #608]	; (80016c0 <main+0x3e8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001468:	d918      	bls.n	800149c <main+0x1c4>
		  if((int) (abs(ADC_atual - ADC_anterior)) > MAX_ADC_VARIATION){
 800146a:	4b96      	ldr	r3, [pc, #600]	; (80016c4 <main+0x3ec>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	4b96      	ldr	r3, [pc, #600]	; (80016c8 <main+0x3f0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	2b00      	cmp	r3, #0
 8001476:	bfb8      	it	lt
 8001478:	425b      	neglt	r3, r3
 800147a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800147e:	dd05      	ble.n	800148c <main+0x1b4>
			  safety_flag = 1;
 8001480:	4b92      	ldr	r3, [pc, #584]	; (80016cc <main+0x3f4>)
 8001482:	2201      	movs	r2, #1
 8001484:	601a      	str	r2, [r3, #0]
			  fast_movment_flag = 1;
 8001486:	4b92      	ldr	r3, [pc, #584]	; (80016d0 <main+0x3f8>)
 8001488:	2201      	movs	r2, #1
 800148a:	601a      	str	r2, [r3, #0]
		  }
		  ADC_anterior = ADC_atual;
 800148c:	4b8d      	ldr	r3, [pc, #564]	; (80016c4 <main+0x3ec>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a8d      	ldr	r2, [pc, #564]	; (80016c8 <main+0x3f0>)
 8001492:	6013      	str	r3, [r2, #0]
		  last_time_ADC = current_time;
 8001494:	4b89      	ldr	r3, [pc, #548]	; (80016bc <main+0x3e4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a89      	ldr	r2, [pc, #548]	; (80016c0 <main+0x3e8>)
 800149a:	6013      	str	r3, [r2, #0]
	  }

	  // CHECAR MOTOR PARADO AQUI

	  if(safety_flag){
 800149c:	4b8b      	ldr	r3, [pc, #556]	; (80016cc <main+0x3f4>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d018      	beq.n	80014d6 <main+0x1fe>
		  htim1.Instance->CCR2=0;
 80014a4:	4b8b      	ldr	r3, [pc, #556]	; (80016d4 <main+0x3fc>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2200      	movs	r2, #0
 80014aa:	639a      	str	r2, [r3, #56]	; 0x38
		  htim1.Instance->CCR1=0;
 80014ac:	4b89      	ldr	r3, [pc, #548]	; (80016d4 <main+0x3fc>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	2200      	movs	r2, #0
 80014b2:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_Delay(20);
 80014b4:	2014      	movs	r0, #20
 80014b6:	f000 fed9 	bl	800226c <HAL_Delay>
		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_SET);
 80014ba:	2201      	movs	r2, #1
 80014bc:	2120      	movs	r1, #32
 80014be:	4886      	ldr	r0, [pc, #536]	; (80016d8 <main+0x400>)
 80014c0:	f001 fff0 	bl	80034a4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	4883      	ldr	r0, [pc, #524]	; (80016d8 <main+0x400>)
 80014ca:	f001 ffeb 	bl	80034a4 <HAL_GPIO_WritePin>
		  duty_cycle = 0.;
 80014ce:	4b83      	ldr	r3, [pc, #524]	; (80016dc <main+0x404>)
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
	  }

	  if(ADC_atual < ADC_MIN_THR){						// Caso pedal volte pra posição inicial
 80014d6:	4b7b      	ldr	r3, [pc, #492]	; (80016c4 <main+0x3ec>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	2b63      	cmp	r3, #99	; 0x63
 80014dc:	d80e      	bhi.n	80014fc <main+0x224>
		  en_increment = 1;										// habilita-se o enable do incremento
 80014de:	4b80      	ldr	r3, [pc, #512]	; (80016e0 <main+0x408>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
		  safety_flag = 0;										// e reseta as flags
 80014e4:	4b79      	ldr	r3, [pc, #484]	; (80016cc <main+0x3f4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
		  motor_lock_flag = 0;
 80014ea:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <main+0x40c>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
		  fast_movment_flag = 0;
 80014f0:	4b77      	ldr	r3, [pc, #476]	; (80016d0 <main+0x3f8>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
		  motor_low_speed_flag = 0;
 80014f6:	4b70      	ldr	r3, [pc, #448]	; (80016b8 <main+0x3e0>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
	  }

	  if(ADC_atual < ADC_MAX_THR - NOISE && !safety_flag){
 80014fc:	4b71      	ldr	r3, [pc, #452]	; (80016c4 <main+0x3ec>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f640 62d7 	movw	r2, #3799	; 0xed7
 8001504:	4293      	cmp	r3, r2
 8001506:	d806      	bhi.n	8001516 <main+0x23e>
 8001508:	4b70      	ldr	r3, [pc, #448]	; (80016cc <main+0x3f4>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <main+0x23e>
		  en_count = 1;
 8001510:	4b75      	ldr	r3, [pc, #468]	; (80016e8 <main+0x410>)
 8001512:	2201      	movs	r2, #1
 8001514:	601a      	str	r2, [r3, #0]
	  }

	  if(ADC_atual > ADC_MAX_THR && en_count && !safety_flag){	// Conta quantas vezes o pedal foi pressionado
 8001516:	4b6b      	ldr	r3, [pc, #428]	; (80016c4 <main+0x3ec>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800151e:	d90f      	bls.n	8001540 <main+0x268>
 8001520:	4b71      	ldr	r3, [pc, #452]	; (80016e8 <main+0x410>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00b      	beq.n	8001540 <main+0x268>
 8001528:	4b68      	ldr	r3, [pc, #416]	; (80016cc <main+0x3f4>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d107      	bne.n	8001540 <main+0x268>
		  count = count + 1;									// até o fim de curso, caso não haja problemas de
 8001530:	4b6e      	ldr	r3, [pc, #440]	; (80016ec <main+0x414>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	3301      	adds	r3, #1
 8001536:	4a6d      	ldr	r2, [pc, #436]	; (80016ec <main+0x414>)
 8001538:	6013      	str	r3, [r2, #0]
		  en_count = 0;											// segurança
 800153a:	4b6b      	ldr	r3, [pc, #428]	; (80016e8 <main+0x410>)
 800153c:	2200      	movs	r2, #0
 800153e:	601a      	str	r2, [r3, #0]
	  }


	  if((ADC_atual > maior_valor || (en_increment && ADC_atual > ADC_MIN_THR + NOISE)) && !safety_flag){
 8001540:	4b60      	ldr	r3, [pc, #384]	; (80016c4 <main+0x3ec>)
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	4b6a      	ldr	r3, [pc, #424]	; (80016f0 <main+0x418>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	429a      	cmp	r2, r3
 800154a:	d808      	bhi.n	800155e <main+0x286>
 800154c:	4b64      	ldr	r3, [pc, #400]	; (80016e0 <main+0x408>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d045      	beq.n	80015e0 <main+0x308>
 8001554:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <main+0x3ec>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800155c:	d940      	bls.n	80015e0 <main+0x308>
 800155e:	4b5b      	ldr	r3, [pc, #364]	; (80016cc <main+0x3f4>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d13c      	bne.n	80015e0 <main+0x308>
		  maior_valor = ADC_atual;
 8001566:	4b57      	ldr	r3, [pc, #348]	; (80016c4 <main+0x3ec>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a61      	ldr	r2, [pc, #388]	; (80016f0 <main+0x418>)
 800156c:	6013      	str	r3, [r2, #0]
		  en_increment = 0;
 800156e:	4b5c      	ldr	r3, [pc, #368]	; (80016e0 <main+0x408>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

		  conversion = (int) (maior_valor/40.96);
 8001574:	4b5e      	ldr	r3, [pc, #376]	; (80016f0 <main+0x418>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4618      	mov	r0, r3
 800157a:	f7fe ff33 	bl	80003e4 <__aeabi_ui2d>
 800157e:	a34c      	add	r3, pc, #304	; (adr r3, 80016b0 <main+0x3d8>)
 8001580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001584:	f7ff f8d2 	bl	800072c <__aeabi_ddiv>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fa52 	bl	8000a38 <__aeabi_d2iz>
 8001594:	4603      	mov	r3, r0
 8001596:	4a57      	ldr	r2, [pc, #348]	; (80016f4 <main+0x41c>)
 8001598:	6013      	str	r3, [r2, #0]
		  duty_cycle = conversion;
 800159a:	4b56      	ldr	r3, [pc, #344]	; (80016f4 <main+0x41c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7ff fb9c 	bl	8000cdc <__aeabi_i2f>
 80015a4:	4603      	mov	r3, r0
 80015a6:	4a4d      	ldr	r2, [pc, #308]	; (80016dc <main+0x404>)
 80015a8:	6013      	str	r3, [r2, #0]
		  if(sentido_giro == HORARIO){
 80015aa:	4b53      	ldr	r3, [pc, #332]	; (80016f8 <main+0x420>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d108      	bne.n	80015c4 <main+0x2ec>
			  htim1.Instance->CCR1=conversion;
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <main+0x41c>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <main+0x3fc>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	635a      	str	r2, [r3, #52]	; 0x34
			  htim1.Instance->CCR2=0;
 80015bc:	4b45      	ldr	r3, [pc, #276]	; (80016d4 <main+0x3fc>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38
		  }
		  if(sentido_giro == ANTIHORARIO){
 80015c4:	4b4c      	ldr	r3, [pc, #304]	; (80016f8 <main+0x420>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d108      	bne.n	80015e0 <main+0x308>
			  htim1.Instance->CCR1=0;
 80015ce:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <main+0x3fc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2200      	movs	r2, #0
 80015d4:	635a      	str	r2, [r3, #52]	; 0x34
			  htim1.Instance->CCR2=conversion;
 80015d6:	4b47      	ldr	r3, [pc, #284]	; (80016f4 <main+0x41c>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <main+0x3fc>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	639a      	str	r2, [r3, #56]	; 0x38
		  }
	  }

	  if(count>=2){												// Inverte o sentido de rotação depois de desligar
 80015e0:	4b42      	ldr	r3, [pc, #264]	; (80016ec <main+0x414>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	dd21      	ble.n	800162c <main+0x354>
		  htim1.Instance->CCR1=0;								// os ENALBE e PWM
 80015e8:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <main+0x3fc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2200      	movs	r2, #0
 80015ee:	635a      	str	r2, [r3, #52]	; 0x34
		  htim1.Instance->CCR2=0;
 80015f0:	4b38      	ldr	r3, [pc, #224]	; (80016d4 <main+0x3fc>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2200      	movs	r2, #0
 80015f6:	639a      	str	r2, [r3, #56]	; 0x38
		  HAL_Delay(300);
 80015f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80015fc:	f000 fe36 	bl	800226c <HAL_Delay>
		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_SET);
 8001600:	2201      	movs	r2, #1
 8001602:	2120      	movs	r1, #32
 8001604:	4834      	ldr	r0, [pc, #208]	; (80016d8 <main+0x400>)
 8001606:	f001 ff4d 	bl	80034a4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_SET);
 800160a:	2201      	movs	r2, #1
 800160c:	2140      	movs	r1, #64	; 0x40
 800160e:	4832      	ldr	r0, [pc, #200]	; (80016d8 <main+0x400>)
 8001610:	f001 ff48 	bl	80034a4 <HAL_GPIO_WritePin>
		  HAL_Delay(300);
 8001614:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001618:	f000 fe28 	bl	800226c <HAL_Delay>
		  count = 0;
 800161c:	4b33      	ldr	r3, [pc, #204]	; (80016ec <main+0x414>)
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
		  sentido_giro=sentido_giro * -1;
 8001622:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <main+0x420>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	425b      	negs	r3, r3
 8001628:	4a33      	ldr	r2, [pc, #204]	; (80016f8 <main+0x420>)
 800162a:	6013      	str	r3, [r2, #0]
	  }

	  if(sentido_giro == HORARIO && !safety_flag){
 800162c:	4b32      	ldr	r3, [pc, #200]	; (80016f8 <main+0x420>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d10d      	bne.n	8001650 <main+0x378>
 8001634:	4b25      	ldr	r3, [pc, #148]	; (80016cc <main+0x3f4>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d109      	bne.n	8001650 <main+0x378>
		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_SET);
 800163c:	2201      	movs	r2, #1
 800163e:	2120      	movs	r1, #32
 8001640:	4825      	ldr	r0, [pc, #148]	; (80016d8 <main+0x400>)
 8001642:	f001 ff2f 	bl	80034a4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_RESET);
 8001646:	2200      	movs	r2, #0
 8001648:	2140      	movs	r1, #64	; 0x40
 800164a:	4823      	ldr	r0, [pc, #140]	; (80016d8 <main+0x400>)
 800164c:	f001 ff2a 	bl	80034a4 <HAL_GPIO_WritePin>
	  }

	  if(sentido_giro == ANTIHORARIO && !safety_flag){
 8001650:	4b29      	ldr	r3, [pc, #164]	; (80016f8 <main+0x420>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001658:	d10d      	bne.n	8001676 <main+0x39e>
 800165a:	4b1c      	ldr	r3, [pc, #112]	; (80016cc <main+0x3f4>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d109      	bne.n	8001676 <main+0x39e>
		  HAL_GPIO_WritePin(en1_GPIO_Port, en1_Pin, GPIO_PIN_RESET);
 8001662:	2200      	movs	r2, #0
 8001664:	2120      	movs	r1, #32
 8001666:	481c      	ldr	r0, [pc, #112]	; (80016d8 <main+0x400>)
 8001668:	f001 ff1c 	bl	80034a4 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(en2_GPIO_Port, en2_Pin, GPIO_PIN_SET);
 800166c:	2201      	movs	r2, #1
 800166e:	2140      	movs	r1, #64	; 0x40
 8001670:	4819      	ldr	r0, [pc, #100]	; (80016d8 <main+0x400>)
 8001672:	f001 ff17 	bl	80034a4 <HAL_GPIO_WritePin>
	  }

	  if(current_time - last_time_LCD > LCD_TIME_DELAY){	// Atualiza o display a cada LCD_TIME_DELAY ms
 8001676:	4b11      	ldr	r3, [pc, #68]	; (80016bc <main+0x3e4>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b20      	ldr	r3, [pc, #128]	; (80016fc <main+0x424>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	1ad3      	subs	r3, r2, r3
 8001680:	2bc8      	cmp	r3, #200	; 0xc8
 8001682:	f67f ae68 	bls.w	8001356 <main+0x7e>
		  lcd_clear();
 8001686:	f7ff fdf1 	bl	800126c <lcd_clear>
		  if(motor_lock_flag){
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <main+0x40c>)
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d03a      	beq.n	8001708 <main+0x430>
			  lcd_gotoxy(0,0);
 8001692:	2100      	movs	r1, #0
 8001694:	2000      	movs	r0, #0
 8001696:	f7ff fdcd 	bl	8001234 <lcd_gotoxy>
			  lcd_printf("MOTOR TRAVADO");
 800169a:	4819      	ldr	r0, [pc, #100]	; (8001700 <main+0x428>)
 800169c:	f7ff fded 	bl	800127a <lcd_printf>
			  lcd_gotoxy(0,1);
 80016a0:	2101      	movs	r1, #1
 80016a2:	2000      	movs	r0, #0
 80016a4:	f7ff fdc6 	bl	8001234 <lcd_gotoxy>
			  lcd_printf("Retorne a inicio");
 80016a8:	4816      	ldr	r0, [pc, #88]	; (8001704 <main+0x42c>)
 80016aa:	f7ff fde6 	bl	800127a <lcd_printf>
 80016ae:	e062      	b.n	8001776 <main+0x49e>
 80016b0:	47ae147b 	.word	0x47ae147b
 80016b4:	40447ae1 	.word	0x40447ae1
 80016b8:	2000038c 	.word	0x2000038c
 80016bc:	20000354 	.word	0x20000354
 80016c0:	2000035c 	.word	0x2000035c
 80016c4:	20000364 	.word	0x20000364
 80016c8:	20000368 	.word	0x20000368
 80016cc:	20000390 	.word	0x20000390
 80016d0:	20000398 	.word	0x20000398
 80016d4:	2000027c 	.word	0x2000027c
 80016d8:	40010c00 	.word	0x40010c00
 80016dc:	20000378 	.word	0x20000378
 80016e0:	20000384 	.word	0x20000384
 80016e4:	20000394 	.word	0x20000394
 80016e8:	20000388 	.word	0x20000388
 80016ec:	20000380 	.word	0x20000380
 80016f0:	2000036c 	.word	0x2000036c
 80016f4:	2000037c 	.word	0x2000037c
 80016f8:	20000000 	.word	0x20000000
 80016fc:	20000360 	.word	0x20000360
 8001700:	08009900 	.word	0x08009900
 8001704:	08009910 	.word	0x08009910
		  }
		  else if(fast_movment_flag){
 8001708:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <main+0x4ac>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00e      	beq.n	800172e <main+0x456>
			  lcd_gotoxy(0,0);
 8001710:	2100      	movs	r1, #0
 8001712:	2000      	movs	r0, #0
 8001714:	f7ff fd8e 	bl	8001234 <lcd_gotoxy>
			  lcd_printf("MOVIMENTO RAPIDO");
 8001718:	481b      	ldr	r0, [pc, #108]	; (8001788 <main+0x4b0>)
 800171a:	f7ff fdae 	bl	800127a <lcd_printf>
			  lcd_gotoxy(0,1);
 800171e:	2101      	movs	r1, #1
 8001720:	2000      	movs	r0, #0
 8001722:	f7ff fd87 	bl	8001234 <lcd_gotoxy>
			  lcd_printf("Retorne a inicio");
 8001726:	4819      	ldr	r0, [pc, #100]	; (800178c <main+0x4b4>)
 8001728:	f7ff fda7 	bl	800127a <lcd_printf>
 800172c:	e023      	b.n	8001776 <main+0x49e>
		  }
		  else{
			  lcd_gotoxy(0,0);
 800172e:	2100      	movs	r1, #0
 8001730:	2000      	movs	r0, #0
 8001732:	f7ff fd7f 	bl	8001234 <lcd_gotoxy>
			  lcd_printf("(%c)RPM: %0.0f ",(sentido_giro == 1) ? 'H':'A' ,RPM);
 8001736:	4b16      	ldr	r3, [pc, #88]	; (8001790 <main+0x4b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d101      	bne.n	8001742 <main+0x46a>
 800173e:	2448      	movs	r4, #72	; 0x48
 8001740:	e000      	b.n	8001744 <main+0x46c>
 8001742:	2441      	movs	r4, #65	; 0x41
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <main+0x4bc>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fe6d 	bl	8000428 <__aeabi_f2d>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4621      	mov	r1, r4
 8001754:	4810      	ldr	r0, [pc, #64]	; (8001798 <main+0x4c0>)
 8001756:	f7ff fd90 	bl	800127a <lcd_printf>
			  lcd_gotoxy(0,1);
 800175a:	2101      	movs	r1, #1
 800175c:	2000      	movs	r0, #0
 800175e:	f7ff fd69 	bl	8001234 <lcd_gotoxy>
			  lcd_printf("Ciclo T.: %0.1f %%", duty_cycle);
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <main+0x4c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe fe5e 	bl	8000428 <__aeabi_f2d>
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	480b      	ldr	r0, [pc, #44]	; (80017a0 <main+0x4c8>)
 8001772:	f7ff fd82 	bl	800127a <lcd_printf>
		  }
		  last_time_LCD = HAL_GetTick();
 8001776:	f000 fd6f 	bl	8002258 <HAL_GetTick>
 800177a:	4603      	mov	r3, r0
 800177c:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <main+0x4cc>)
 800177e:	6013      	str	r3, [r2, #0]
	  current_time = HAL_GetTick();
 8001780:	e5e9      	b.n	8001356 <main+0x7e>
 8001782:	bf00      	nop
 8001784:	20000398 	.word	0x20000398
 8001788:	08009924 	.word	0x08009924
 800178c:	08009910 	.word	0x08009910
 8001790:	20000000 	.word	0x20000000
 8001794:	20000374 	.word	0x20000374
 8001798:	08009938 	.word	0x08009938
 800179c:	20000378 	.word	0x20000378
 80017a0:	08009948 	.word	0x08009948
 80017a4:	20000360 	.word	0x20000360

080017a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b094      	sub	sp, #80	; 0x50
 80017ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017b2:	2228      	movs	r2, #40	; 0x28
 80017b4:	2100      	movs	r1, #0
 80017b6:	4618      	mov	r0, r3
 80017b8:	f004 fc72 	bl	80060a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017d8:	2301      	movs	r3, #1
 80017da:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017e6:	2301      	movs	r3, #1
 80017e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ea:	2302      	movs	r3, #2
 80017ec:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80017f4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80017f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017fe:	4618      	mov	r0, r3
 8001800:	f001 fe68 	bl	80034d4 <HAL_RCC_OscConfig>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800180a:	f000 fa41 	bl	8001c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800180e:	230f      	movs	r3, #15
 8001810:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001812:	2302      	movs	r3, #2
 8001814:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800181a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800181e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001820:	2300      	movs	r3, #0
 8001822:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2102      	movs	r1, #2
 800182a:	4618      	mov	r0, r3
 800182c:	f002 f8d4 	bl	80039d8 <HAL_RCC_ClockConfig>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d001      	beq.n	800183a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001836:	f000 fa2b 	bl	8001c90 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800183a:	2302      	movs	r3, #2
 800183c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800183e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001842:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001844:	1d3b      	adds	r3, r7, #4
 8001846:	4618      	mov	r0, r3
 8001848:	f002 fa40 	bl	8003ccc <HAL_RCCEx_PeriphCLKConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001852:	f000 fa1d 	bl	8001c90 <Error_Handler>
  }
}
 8001856:	bf00      	nop
 8001858:	3750      	adds	r7, #80	; 0x50
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001866:	1d3b      	adds	r3, r7, #4
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
 800186c:	605a      	str	r2, [r3, #4]
 800186e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001870:	4b18      	ldr	r3, [pc, #96]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001872:	4a19      	ldr	r2, [pc, #100]	; (80018d8 <MX_ADC1_Init+0x78>)
 8001874:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800187c:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <MX_ADC1_Init+0x74>)
 800187e:	2201      	movs	r2, #1
 8001880:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001882:	4b14      	ldr	r3, [pc, #80]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <MX_ADC1_Init+0x74>)
 800188a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800188e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001890:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001892:	2200      	movs	r2, #0
 8001894:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001896:	4b0f      	ldr	r3, [pc, #60]	; (80018d4 <MX_ADC1_Init+0x74>)
 8001898:	2201      	movs	r2, #1
 800189a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800189c:	480d      	ldr	r0, [pc, #52]	; (80018d4 <MX_ADC1_Init+0x74>)
 800189e:	f000 fd09 	bl	80022b4 <HAL_ADC_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80018a8:	f000 f9f2 	bl	8001c90 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	1d3b      	adds	r3, r7, #4
 80018ba:	4619      	mov	r1, r3
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <MX_ADC1_Init+0x74>)
 80018be:	f001 f863 	bl	8002988 <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80018c8:	f000 f9e2 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018cc:	bf00      	nop
 80018ce:	3710      	adds	r7, #16
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000208 	.word	0x20000208
 80018d8:	40012400 	.word	0x40012400

080018dc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b096      	sub	sp, #88	; 0x58
 80018e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018e2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
 80018ea:	605a      	str	r2, [r3, #4]
 80018ec:	609a      	str	r2, [r3, #8]
 80018ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800190e:	1d3b      	adds	r3, r7, #4
 8001910:	2220      	movs	r2, #32
 8001912:	2100      	movs	r1, #0
 8001914:	4618      	mov	r0, r3
 8001916:	f004 fbc3 	bl	80060a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800191a:	4b44      	ldr	r3, [pc, #272]	; (8001a2c <MX_TIM1_Init+0x150>)
 800191c:	4a44      	ldr	r2, [pc, #272]	; (8001a30 <MX_TIM1_Init+0x154>)
 800191e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8001920:	4b42      	ldr	r3, [pc, #264]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001922:	2247      	movs	r2, #71	; 0x47
 8001924:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001926:	4b41      	ldr	r3, [pc, #260]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001928:	2200      	movs	r2, #0
 800192a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 800192c:	4b3f      	ldr	r3, [pc, #252]	; (8001a2c <MX_TIM1_Init+0x150>)
 800192e:	2263      	movs	r2, #99	; 0x63
 8001930:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b3e      	ldr	r3, [pc, #248]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001938:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <MX_TIM1_Init+0x150>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b3b      	ldr	r3, [pc, #236]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001944:	4839      	ldr	r0, [pc, #228]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001946:	f002 fb2d 	bl	8003fa4 <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001950:	f000 f99e 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800195a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800195e:	4619      	mov	r1, r3
 8001960:	4832      	ldr	r0, [pc, #200]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001962:	f002 fecf 	bl	8004704 <HAL_TIM_ConfigClockSource>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 800196c:	f000 f990 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001970:	482e      	ldr	r0, [pc, #184]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001972:	f002 fc03 	bl	800417c <HAL_TIM_PWM_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 800197c:	f000 f988 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001980:	2300      	movs	r3, #0
 8001982:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001984:	2300      	movs	r3, #0
 8001986:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001988:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800198c:	4619      	mov	r1, r3
 800198e:	4827      	ldr	r0, [pc, #156]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001990:	f003 fb24 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 800199a:	f000 f979 	bl	8001c90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800199e:	2360      	movs	r3, #96	; 0x60
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019a6:	2300      	movs	r3, #0
 80019a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80019aa:	2300      	movs	r3, #0
 80019ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ae:	2300      	movs	r3, #0
 80019b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80019b2:	2300      	movs	r3, #0
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80019b6:	2300      	movs	r3, #0
 80019b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	481a      	ldr	r0, [pc, #104]	; (8001a2c <MX_TIM1_Init+0x150>)
 80019c4:	f002 fddc 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80019ce:	f000 f95f 	bl	8001c90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80019d6:	2204      	movs	r2, #4
 80019d8:	4619      	mov	r1, r3
 80019da:	4814      	ldr	r0, [pc, #80]	; (8001a2c <MX_TIM1_Init+0x150>)
 80019dc:	f002 fdd0 	bl	8004580 <HAL_TIM_PWM_ConfigChannel>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80019e6:	f000 f953 	bl	8001c90 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019ee:	2300      	movs	r3, #0
 80019f0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a02:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001a04:	2300      	movs	r3, #0
 8001a06:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001a08:	1d3b      	adds	r3, r7, #4
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	4807      	ldr	r0, [pc, #28]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001a0e:	f003 fb43 	bl	8005098 <HAL_TIMEx_ConfigBreakDeadTime>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8001a18:	f000 f93a 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001a1c:	4803      	ldr	r0, [pc, #12]	; (8001a2c <MX_TIM1_Init+0x150>)
 8001a1e:	f000 fa51 	bl	8001ec4 <HAL_TIM_MspPostInit>

}
 8001a22:	bf00      	nop
 8001a24:	3758      	adds	r7, #88	; 0x58
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000027c 	.word	0x2000027c
 8001a30:	40012c00 	.word	0x40012c00

08001a34 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b088      	sub	sp, #32
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001a3a:	f107 030c 	add.w	r3, r7, #12
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a52:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <MX_TIM3_Init+0xa0>)
 8001a54:	4a20      	ldr	r2, [pc, #128]	; (8001ad8 <MX_TIM3_Init+0xa4>)
 8001a56:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a58:	4b1e      	ldr	r3, [pc, #120]	; (8001ad4 <MX_TIM3_Init+0xa0>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <MX_TIM3_Init+0xa0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a64:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <MX_TIM3_Init+0xa0>)
 8001a66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6c:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <MX_TIM3_Init+0xa0>)
 8001a6e:	2200      	movs	r2, #0
 8001a70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a72:	4b18      	ldr	r3, [pc, #96]	; (8001ad4 <MX_TIM3_Init+0xa0>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a78:	4816      	ldr	r0, [pc, #88]	; (8001ad4 <MX_TIM3_Init+0xa0>)
 8001a7a:	f002 fa93 	bl	8003fa4 <HAL_TIM_Base_Init>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001a84:	f000 f904 	bl	8001c90 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001a88:	2307      	movs	r3, #7
 8001a8a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001a8c:	2350      	movs	r3, #80	; 0x50
 8001a8e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001a98:	f107 030c 	add.w	r3, r7, #12
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	480d      	ldr	r0, [pc, #52]	; (8001ad4 <MX_TIM3_Init+0xa0>)
 8001aa0:	f002 fef7 	bl	8004892 <HAL_TIM_SlaveConfigSynchro>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 8001aaa:	f000 f8f1 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	4619      	mov	r1, r3
 8001aba:	4806      	ldr	r0, [pc, #24]	; (8001ad4 <MX_TIM3_Init+0xa0>)
 8001abc:	f003 fa8e 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d001      	beq.n	8001aca <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8001ac6:	f000 f8e3 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001aca:	bf00      	nop
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200002c4 	.word	0x200002c4
 8001ad8:	40000400 	.word	0x40000400

08001adc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ae2:	f107 0308 	add.w	r3, r7, #8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001af0:	463b      	mov	r3, r7
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
 8001af6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001af8:	4b1d      	ldr	r3, [pc, #116]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001afa:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <MX_TIM4_Init+0x98>)
 8001afc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1799;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b00:	f240 7207 	movw	r2, #1799	; 0x707
 8001b04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b1a      	ldr	r3, [pc, #104]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8001b0c:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b1a:	4b15      	ldr	r3, [pc, #84]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b1c:	2280      	movs	r2, #128	; 0x80
 8001b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001b20:	4813      	ldr	r0, [pc, #76]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b22:	f002 fa3f 	bl	8003fa4 <HAL_TIM_Base_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001b2c:	f000 f8b0 	bl	8001c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001b36:	f107 0308 	add.w	r3, r7, #8
 8001b3a:	4619      	mov	r1, r3
 8001b3c:	480c      	ldr	r0, [pc, #48]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b3e:	f002 fde1 	bl	8004704 <HAL_TIM_ConfigClockSource>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d001      	beq.n	8001b4c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001b48:	f000 f8a2 	bl	8001c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001b54:	463b      	mov	r3, r7
 8001b56:	4619      	mov	r1, r3
 8001b58:	4805      	ldr	r0, [pc, #20]	; (8001b70 <MX_TIM4_Init+0x94>)
 8001b5a:	f003 fa3f 	bl	8004fdc <HAL_TIMEx_MasterConfigSynchronization>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d001      	beq.n	8001b68 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001b64:	f000 f894 	bl	8001c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001b68:	bf00      	nop
 8001b6a:	3718      	adds	r7, #24
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	2000030c 	.word	0x2000030c
 8001b74:	40000800 	.word	0x40000800

08001b78 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b7e:	4b0c      	ldr	r3, [pc, #48]	; (8001bb0 <MX_DMA_Init+0x38>)
 8001b80:	695b      	ldr	r3, [r3, #20]
 8001b82:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <MX_DMA_Init+0x38>)
 8001b84:	f043 0301 	orr.w	r3, r3, #1
 8001b88:	6153      	str	r3, [r2, #20]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <MX_DMA_Init+0x38>)
 8001b8c:	695b      	ldr	r3, [r3, #20]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001b96:	2200      	movs	r2, #0
 8001b98:	2100      	movs	r1, #0
 8001b9a:	200b      	movs	r0, #11
 8001b9c:	f001 f967 	bl	8002e6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001ba0:	200b      	movs	r0, #11
 8001ba2:	f001 f980 	bl	8002ea6 <HAL_NVIC_EnableIRQ>

}
 8001ba6:	bf00      	nop
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40021000 	.word	0x40021000

08001bb4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b088      	sub	sp, #32
 8001bb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bba:	f107 0310 	add.w	r3, r7, #16
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	601a      	str	r2, [r3, #0]
 8001bc2:	605a      	str	r2, [r3, #4]
 8001bc4:	609a      	str	r2, [r3, #8]
 8001bc6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc8:	4b2e      	ldr	r3, [pc, #184]	; (8001c84 <MX_GPIO_Init+0xd0>)
 8001bca:	699b      	ldr	r3, [r3, #24]
 8001bcc:	4a2d      	ldr	r2, [pc, #180]	; (8001c84 <MX_GPIO_Init+0xd0>)
 8001bce:	f043 0320 	orr.w	r3, r3, #32
 8001bd2:	6193      	str	r3, [r2, #24]
 8001bd4:	4b2b      	ldr	r3, [pc, #172]	; (8001c84 <MX_GPIO_Init+0xd0>)
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	f003 0320 	and.w	r3, r3, #32
 8001bdc:	60fb      	str	r3, [r7, #12]
 8001bde:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b28      	ldr	r3, [pc, #160]	; (8001c84 <MX_GPIO_Init+0xd0>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a27      	ldr	r2, [pc, #156]	; (8001c84 <MX_GPIO_Init+0xd0>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b25      	ldr	r3, [pc, #148]	; (8001c84 <MX_GPIO_Init+0xd0>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf8:	4b22      	ldr	r3, [pc, #136]	; (8001c84 <MX_GPIO_Init+0xd0>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <MX_GPIO_Init+0xd0>)
 8001bfe:	f043 0308 	orr.w	r3, r3, #8
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b1f      	ldr	r3, [pc, #124]	; (8001c84 <MX_GPIO_Init+0xd0>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8001c10:	2200      	movs	r2, #0
 8001c12:	2170      	movs	r1, #112	; 0x70
 8001c14:	481c      	ldr	r0, [pc, #112]	; (8001c88 <MX_GPIO_Init+0xd4>)
 8001c16:	f001 fc45 	bl	80034a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f24f 0160 	movw	r1, #61536	; 0xf060
 8001c20:	481a      	ldr	r0, [pc, #104]	; (8001c8c <MX_GPIO_Init+0xd8>)
 8001c22:	f001 fc3f 	bl	80034a4 <HAL_GPIO_WritePin>
                          |en1_Pin|en2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001c26:	2370      	movs	r3, #112	; 0x70
 8001c28:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4812      	ldr	r0, [pc, #72]	; (8001c88 <MX_GPIO_Init+0xd4>)
 8001c3e:	f001 faad 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001c42:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001c46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	480c      	ldr	r0, [pc, #48]	; (8001c8c <MX_GPIO_Init+0xd8>)
 8001c5c:	f001 fa9e 	bl	800319c <HAL_GPIO_Init>

  /*Configure GPIO pins : en1_Pin en2_Pin */
  GPIO_InitStruct.Pin = en1_Pin|en2_Pin;
 8001c60:	2360      	movs	r3, #96	; 0x60
 8001c62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c64:	2301      	movs	r3, #1
 8001c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001c68:	2302      	movs	r3, #2
 8001c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4619      	mov	r1, r3
 8001c76:	4805      	ldr	r0, [pc, #20]	; (8001c8c <MX_GPIO_Init+0xd8>)
 8001c78:	f001 fa90 	bl	800319c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c7c:	bf00      	nop
 8001c7e:	3720      	adds	r7, #32
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	40021000 	.word	0x40021000
 8001c88:	40010800 	.word	0x40010800
 8001c8c:	40010c00 	.word	0x40010c00

08001c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c94:	b672      	cpsid	i
}
 8001c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c98:	e7fe      	b.n	8001c98 <Error_Handler+0x8>
	...

08001c9c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ca2:	4b0e      	ldr	r3, [pc, #56]	; (8001cdc <HAL_MspInit+0x40>)
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <HAL_MspInit+0x40>)
 8001ca8:	f043 0301 	orr.w	r3, r3, #1
 8001cac:	6193      	str	r3, [r2, #24]
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_MspInit+0x40>)
 8001cb0:	699b      	ldr	r3, [r3, #24]
 8001cb2:	f003 0301 	and.w	r3, r3, #1
 8001cb6:	607b      	str	r3, [r7, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cba:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <HAL_MspInit+0x40>)
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	4a07      	ldr	r2, [pc, #28]	; (8001cdc <HAL_MspInit+0x40>)
 8001cc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cc4:	61d3      	str	r3, [r2, #28]
 8001cc6:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <HAL_MspInit+0x40>)
 8001cc8:	69db      	ldr	r3, [r3, #28]
 8001cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b088      	sub	sp, #32
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0310 	add.w	r3, r7, #16
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a2c      	ldr	r2, [pc, #176]	; (8001dac <HAL_ADC_MspInit+0xcc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d151      	bne.n	8001da4 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_ADC_MspInit+0xd0>)
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	4a2a      	ldr	r2, [pc, #168]	; (8001db0 <HAL_ADC_MspInit+0xd0>)
 8001d06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d0a:	6193      	str	r3, [r2, #24]
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <HAL_ADC_MspInit+0xd0>)
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <HAL_ADC_MspInit+0xd0>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a24      	ldr	r2, [pc, #144]	; (8001db0 <HAL_ADC_MspInit+0xd0>)
 8001d1e:	f043 0304 	orr.w	r3, r3, #4
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_ADC_MspInit+0xd0>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0304 	and.w	r3, r3, #4
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001d30:	2301      	movs	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d34:	2303      	movs	r3, #3
 8001d36:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d38:	f107 0310 	add.w	r3, r7, #16
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	481d      	ldr	r0, [pc, #116]	; (8001db4 <HAL_ADC_MspInit+0xd4>)
 8001d40:	f001 fa2c 	bl	800319c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001d44:	4b1c      	ldr	r3, [pc, #112]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <HAL_ADC_MspInit+0xdc>)
 8001d48:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d50:	4b19      	ldr	r3, [pc, #100]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d62:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001d6a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d6e:	2220      	movs	r2, #32
 8001d70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d78:	480f      	ldr	r0, [pc, #60]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d7a:	f001 f8af 	bl	8002edc <HAL_DMA_Init>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d001      	beq.n	8001d88 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8001d84:	f7ff ff84 	bl	8001c90 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d8c:	621a      	str	r2, [r3, #32]
 8001d8e:	4a0a      	ldr	r2, [pc, #40]	; (8001db8 <HAL_ADC_MspInit+0xd8>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8001d94:	2200      	movs	r2, #0
 8001d96:	2100      	movs	r1, #0
 8001d98:	2012      	movs	r0, #18
 8001d9a:	f001 f868 	bl	8002e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001d9e:	2012      	movs	r0, #18
 8001da0:	f001 f881 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001da4:	bf00      	nop
 8001da6:	3720      	adds	r7, #32
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	40012400 	.word	0x40012400
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010800 	.word	0x40010800
 8001db8:	20000238 	.word	0x20000238
 8001dbc:	40020008 	.word	0x40020008

08001dc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b08c      	sub	sp, #48	; 0x30
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 031c 	add.w	r3, r7, #28
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM1)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a34      	ldr	r2, [pc, #208]	; (8001eac <HAL_TIM_Base_MspInit+0xec>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d10c      	bne.n	8001dfa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001de0:	4b33      	ldr	r3, [pc, #204]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	4a32      	ldr	r2, [pc, #200]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001de6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001dea:	6193      	str	r3, [r2, #24]
 8001dec:	4b30      	ldr	r3, [pc, #192]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001dee:	699b      	ldr	r3, [r3, #24]
 8001df0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df4:	61bb      	str	r3, [r7, #24]
 8001df6:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001df8:	e054      	b.n	8001ea4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM3)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <HAL_TIM_Base_MspInit+0xf4>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d136      	bne.n	8001e72 <HAL_TIM_Base_MspInit+0xb2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e04:	4b2a      	ldr	r3, [pc, #168]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001e06:	69db      	ldr	r3, [r3, #28]
 8001e08:	4a29      	ldr	r2, [pc, #164]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001e0a:	f043 0302 	orr.w	r3, r3, #2
 8001e0e:	61d3      	str	r3, [r2, #28]
 8001e10:	4b27      	ldr	r3, [pc, #156]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	617b      	str	r3, [r7, #20]
 8001e1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b24      	ldr	r3, [pc, #144]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a23      	ldr	r2, [pc, #140]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001e22:	f043 0308 	orr.w	r3, r3, #8
 8001e26:	6193      	str	r3, [r2, #24]
 8001e28:	4b21      	ldr	r3, [pc, #132]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001e2a:	699b      	ldr	r3, [r3, #24]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001e34:	2310      	movs	r3, #16
 8001e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e40:	f107 031c 	add.w	r3, r7, #28
 8001e44:	4619      	mov	r1, r3
 8001e46:	481c      	ldr	r0, [pc, #112]	; (8001eb8 <HAL_TIM_Base_MspInit+0xf8>)
 8001e48:	f001 f9a8 	bl	800319c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8001e4c:	4b1b      	ldr	r3, [pc, #108]	; (8001ebc <HAL_TIM_Base_MspInit+0xfc>)
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e54:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e5c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e6a:	4a14      	ldr	r2, [pc, #80]	; (8001ebc <HAL_TIM_Base_MspInit+0xfc>)
 8001e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e6e:	6053      	str	r3, [r2, #4]
}
 8001e70:	e018      	b.n	8001ea4 <HAL_TIM_Base_MspInit+0xe4>
  else if(htim_base->Instance==TIM4)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a12      	ldr	r2, [pc, #72]	; (8001ec0 <HAL_TIM_Base_MspInit+0x100>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d113      	bne.n	8001ea4 <HAL_TIM_Base_MspInit+0xe4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001e7c:	4b0c      	ldr	r3, [pc, #48]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001e7e:	69db      	ldr	r3, [r3, #28]
 8001e80:	4a0b      	ldr	r2, [pc, #44]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001e82:	f043 0304 	orr.w	r3, r3, #4
 8001e86:	61d3      	str	r3, [r2, #28]
 8001e88:	4b09      	ldr	r3, [pc, #36]	; (8001eb0 <HAL_TIM_Base_MspInit+0xf0>)
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f003 0304 	and.w	r3, r3, #4
 8001e90:	60fb      	str	r3, [r7, #12]
 8001e92:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001e94:	2200      	movs	r2, #0
 8001e96:	2100      	movs	r1, #0
 8001e98:	201e      	movs	r0, #30
 8001e9a:	f000 ffe8 	bl	8002e6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001e9e:	201e      	movs	r0, #30
 8001ea0:	f001 f801 	bl	8002ea6 <HAL_NVIC_EnableIRQ>
}
 8001ea4:	bf00      	nop
 8001ea6:	3730      	adds	r7, #48	; 0x30
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40012c00 	.word	0x40012c00
 8001eb0:	40021000 	.word	0x40021000
 8001eb4:	40000400 	.word	0x40000400
 8001eb8:	40010c00 	.word	0x40010c00
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	40000800 	.word	0x40000800

08001ec4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b088      	sub	sp, #32
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ecc:	f107 0310 	add.w	r3, r7, #16
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	601a      	str	r2, [r3, #0]
 8001ed4:	605a      	str	r2, [r3, #4]
 8001ed6:	609a      	str	r2, [r3, #8]
 8001ed8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a10      	ldr	r2, [pc, #64]	; (8001f20 <HAL_TIM_MspPostInit+0x5c>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d118      	bne.n	8001f16 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ee4:	4b0f      	ldr	r3, [pc, #60]	; (8001f24 <HAL_TIM_MspPostInit+0x60>)
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	4a0e      	ldr	r2, [pc, #56]	; (8001f24 <HAL_TIM_MspPostInit+0x60>)
 8001eea:	f043 0304 	orr.w	r3, r3, #4
 8001eee:	6193      	str	r3, [r2, #24]
 8001ef0:	4b0c      	ldr	r3, [pc, #48]	; (8001f24 <HAL_TIM_MspPostInit+0x60>)
 8001ef2:	699b      	ldr	r3, [r3, #24]
 8001ef4:	f003 0304 	and.w	r3, r3, #4
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001efc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f02:	2302      	movs	r3, #2
 8001f04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f06:	2302      	movs	r3, #2
 8001f08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f0a:	f107 0310 	add.w	r3, r7, #16
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <HAL_TIM_MspPostInit+0x64>)
 8001f12:	f001 f943 	bl	800319c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f16:	bf00      	nop
 8001f18:	3720      	adds	r7, #32
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bd80      	pop	{r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	40012c00 	.word	0x40012c00
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010800 	.word	0x40010800

08001f2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f30:	e7fe      	b.n	8001f30 <NMI_Handler+0x4>

08001f32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f32:	b480      	push	{r7}
 8001f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f36:	e7fe      	b.n	8001f36 <HardFault_Handler+0x4>

08001f38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f3c:	e7fe      	b.n	8001f3c <MemManage_Handler+0x4>

08001f3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f42:	e7fe      	b.n	8001f42 <BusFault_Handler+0x4>

08001f44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f48:	e7fe      	b.n	8001f48 <UsageFault_Handler+0x4>

08001f4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4e:	bf00      	nop
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bc80      	pop	{r7}
 8001f60:	4770      	bx	lr

08001f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f62:	b480      	push	{r7}
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f66:	bf00      	nop
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f72:	f000 f95f 	bl	8002234 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f76:	bf00      	nop
 8001f78:	bd80      	pop	{r7, pc}
	...

08001f7c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <DMA1_Channel1_IRQHandler+0x10>)
 8001f82:	f001 f805 	bl	8002f90 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000238 	.word	0x20000238

08001f90 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <ADC1_2_IRQHandler+0x10>)
 8001f96:	f000 fc25 	bl	80027e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000208 	.word	0x20000208

08001fa4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	ticks = TIM3->CNT;
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <TIM4_IRQHandler+0x20>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	4b06      	ldr	r3, [pc, #24]	; (8001fc8 <TIM4_IRQHandler+0x24>)
 8001fb0:	801a      	strh	r2, [r3, #0]
  /* USER CODE END TIM4_IRQn 0 */
	HAL_TIM_IRQHandler(&htim4);
 8001fb2:	4806      	ldr	r0, [pc, #24]	; (8001fcc <TIM4_IRQHandler+0x28>)
 8001fb4:	f002 f9dc 	bl	8004370 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */
	TIM3->CNT = 0;
 8001fb8:	4b02      	ldr	r3, [pc, #8]	; (8001fc4 <TIM4_IRQHandler+0x20>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	625a      	str	r2, [r3, #36]	; 0x24
  /* USER CODE END TIM4_IRQn 1 */
}
 8001fbe:	bf00      	nop
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	40000400 	.word	0x40000400
 8001fc8:	20000370 	.word	0x20000370
 8001fcc:	2000030c 	.word	0x2000030c

08001fd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return 1;
 8001fd4:	2301      	movs	r3, #1
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bc80      	pop	{r7}
 8001fdc:	4770      	bx	lr

08001fde <_kill>:

int _kill(int pid, int sig)
{
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b082      	sub	sp, #8
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
 8001fe6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fe8:	f004 f8ac 	bl	8006144 <__errno>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2216      	movs	r2, #22
 8001ff0:	601a      	str	r2, [r3, #0]
  return -1;
 8001ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3708      	adds	r7, #8
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_exit>:

void _exit (int status)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b082      	sub	sp, #8
 8002002:	af00      	add	r7, sp, #0
 8002004:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002006:	f04f 31ff 	mov.w	r1, #4294967295
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f7ff ffe7 	bl	8001fde <_kill>
  while (1) {}    /* Make sure we hang here */
 8002010:	e7fe      	b.n	8002010 <_exit+0x12>

08002012 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002012:	b580      	push	{r7, lr}
 8002014:	b086      	sub	sp, #24
 8002016:	af00      	add	r7, sp, #0
 8002018:	60f8      	str	r0, [r7, #12]
 800201a:	60b9      	str	r1, [r7, #8]
 800201c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
 8002022:	e00a      	b.n	800203a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002024:	f3af 8000 	nop.w
 8002028:	4601      	mov	r1, r0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1c5a      	adds	r2, r3, #1
 800202e:	60ba      	str	r2, [r7, #8]
 8002030:	b2ca      	uxtb	r2, r1
 8002032:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	3301      	adds	r3, #1
 8002038:	617b      	str	r3, [r7, #20]
 800203a:	697a      	ldr	r2, [r7, #20]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	429a      	cmp	r2, r3
 8002040:	dbf0      	blt.n	8002024 <_read+0x12>
  }

  return len;
 8002042:	687b      	ldr	r3, [r7, #4]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b086      	sub	sp, #24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e009      	b.n	8002072 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1c5a      	adds	r2, r3, #1
 8002062:	60ba      	str	r2, [r7, #8]
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	4618      	mov	r0, r3
 8002068:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	3301      	adds	r3, #1
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	697a      	ldr	r2, [r7, #20]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	429a      	cmp	r2, r3
 8002078:	dbf1      	blt.n	800205e <_write+0x12>
  }
  return len;
 800207a:	687b      	ldr	r3, [r7, #4]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3718      	adds	r7, #24
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_close>:

int _close(int file)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	bc80      	pop	{r7}
 8002098:	4770      	bx	lr

0800209a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800209a:	b480      	push	{r7}
 800209c:	b083      	sub	sp, #12
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020aa:	605a      	str	r2, [r3, #4]
  return 0;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <_isatty>:

int _isatty(int file)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b083      	sub	sp, #12
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020c0:	2301      	movs	r3, #1
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bc80      	pop	{r7}
 80020ca:	4770      	bx	lr

080020cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b085      	sub	sp, #20
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3714      	adds	r7, #20
 80020de:	46bd      	mov	sp, r7
 80020e0:	bc80      	pop	{r7}
 80020e2:	4770      	bx	lr

080020e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b086      	sub	sp, #24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020ec:	4a14      	ldr	r2, [pc, #80]	; (8002140 <_sbrk+0x5c>)
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <_sbrk+0x60>)
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020f8:	4b13      	ldr	r3, [pc, #76]	; (8002148 <_sbrk+0x64>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d102      	bne.n	8002106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <_sbrk+0x64>)
 8002102:	4a12      	ldr	r2, [pc, #72]	; (800214c <_sbrk+0x68>)
 8002104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002106:	4b10      	ldr	r3, [pc, #64]	; (8002148 <_sbrk+0x64>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	4413      	add	r3, r2
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	429a      	cmp	r2, r3
 8002112:	d207      	bcs.n	8002124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002114:	f004 f816 	bl	8006144 <__errno>
 8002118:	4603      	mov	r3, r0
 800211a:	220c      	movs	r2, #12
 800211c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295
 8002122:	e009      	b.n	8002138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002124:	4b08      	ldr	r3, [pc, #32]	; (8002148 <_sbrk+0x64>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212a:	4b07      	ldr	r3, [pc, #28]	; (8002148 <_sbrk+0x64>)
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4413      	add	r3, r2
 8002132:	4a05      	ldr	r2, [pc, #20]	; (8002148 <_sbrk+0x64>)
 8002134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	20005000 	.word	0x20005000
 8002144:	00000400 	.word	0x00000400
 8002148:	2000039c 	.word	0x2000039c
 800214c:	200004f0 	.word	0x200004f0

08002150 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	bc80      	pop	{r7}
 800215a:	4770      	bx	lr

0800215c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800215c:	f7ff fff8 	bl	8002150 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002160:	480b      	ldr	r0, [pc, #44]	; (8002190 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002162:	490c      	ldr	r1, [pc, #48]	; (8002194 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002164:	4a0c      	ldr	r2, [pc, #48]	; (8002198 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002168:	e002      	b.n	8002170 <LoopCopyDataInit>

0800216a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800216a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800216c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800216e:	3304      	adds	r3, #4

08002170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002174:	d3f9      	bcc.n	800216a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002176:	4a09      	ldr	r2, [pc, #36]	; (800219c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002178:	4c09      	ldr	r4, [pc, #36]	; (80021a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800217a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800217c:	e001      	b.n	8002182 <LoopFillZerobss>

0800217e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800217e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002180:	3204      	adds	r2, #4

08002182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002184:	d3fb      	bcc.n	800217e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002186:	f003 ffe3 	bl	8006150 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800218a:	f7ff f8a5 	bl	80012d8 <main>
  bx lr
 800218e:	4770      	bx	lr
  ldr r0, =_sdata
 8002190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002194:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002198:	08009dd0 	.word	0x08009dd0
  ldr r2, =_sbss
 800219c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80021a0:	200004f0 	.word	0x200004f0

080021a4 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80021a4:	e7fe      	b.n	80021a4 <CAN1_RX1_IRQHandler>
	...

080021a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <HAL_Init+0x28>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a07      	ldr	r2, [pc, #28]	; (80021d0 <HAL_Init+0x28>)
 80021b2:	f043 0310 	orr.w	r3, r3, #16
 80021b6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021b8:	2003      	movs	r0, #3
 80021ba:	f000 fe4d 	bl	8002e58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021be:	200f      	movs	r0, #15
 80021c0:	f000 f808 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021c4:	f7ff fd6a 	bl	8001c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40022000 	.word	0x40022000

080021d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021dc:	4b12      	ldr	r3, [pc, #72]	; (8002228 <HAL_InitTick+0x54>)
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4b12      	ldr	r3, [pc, #72]	; (800222c <HAL_InitTick+0x58>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4619      	mov	r1, r3
 80021e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80021ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	f000 fe65 	bl	8002ec2 <HAL_SYSTICK_Config>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e00e      	b.n	8002220 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2b0f      	cmp	r3, #15
 8002206:	d80a      	bhi.n	800221e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002208:	2200      	movs	r2, #0
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	f04f 30ff 	mov.w	r0, #4294967295
 8002210:	f000 fe2d 	bl	8002e6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002214:	4a06      	ldr	r2, [pc, #24]	; (8002230 <HAL_InitTick+0x5c>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800221a:	2300      	movs	r3, #0
 800221c:	e000      	b.n	8002220 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
}
 8002220:	4618      	mov	r0, r3
 8002222:	3708      	adds	r7, #8
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	20000004 	.word	0x20000004
 800222c:	2000000c 	.word	0x2000000c
 8002230:	20000008 	.word	0x20000008

08002234 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002234:	b480      	push	{r7}
 8002236:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002238:	4b05      	ldr	r3, [pc, #20]	; (8002250 <HAL_IncTick+0x1c>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	461a      	mov	r2, r3
 800223e:	4b05      	ldr	r3, [pc, #20]	; (8002254 <HAL_IncTick+0x20>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4413      	add	r3, r2
 8002244:	4a03      	ldr	r2, [pc, #12]	; (8002254 <HAL_IncTick+0x20>)
 8002246:	6013      	str	r3, [r2, #0]
}
 8002248:	bf00      	nop
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	2000000c 	.word	0x2000000c
 8002254:	200003a0 	.word	0x200003a0

08002258 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return uwTick;
 800225c:	4b02      	ldr	r3, [pc, #8]	; (8002268 <HAL_GetTick+0x10>)
 800225e:	681b      	ldr	r3, [r3, #0]
}
 8002260:	4618      	mov	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	bc80      	pop	{r7}
 8002266:	4770      	bx	lr
 8002268:	200003a0 	.word	0x200003a0

0800226c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002274:	f7ff fff0 	bl	8002258 <HAL_GetTick>
 8002278:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002284:	d005      	beq.n	8002292 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002286:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <HAL_Delay+0x44>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	461a      	mov	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002292:	bf00      	nop
 8002294:	f7ff ffe0 	bl	8002258 <HAL_GetTick>
 8002298:	4602      	mov	r2, r0
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	1ad3      	subs	r3, r2, r3
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	429a      	cmp	r2, r3
 80022a2:	d8f7      	bhi.n	8002294 <HAL_Delay+0x28>
  {
  }
}
 80022a4:	bf00      	nop
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	2000000c 	.word	0x2000000c

080022b4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022bc:	2300      	movs	r3, #0
 80022be:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e0be      	b.n	8002454 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fcf4 	bl	8001ce0 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80022f8:	6878      	ldr	r0, [r7, #4]
 80022fa:	f000 fc97 	bl	8002c2c <ADC_ConversionStop_Disable>
 80022fe:	4603      	mov	r3, r0
 8002300:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002306:	f003 0310 	and.w	r3, r3, #16
 800230a:	2b00      	cmp	r3, #0
 800230c:	f040 8099 	bne.w	8002442 <HAL_ADC_Init+0x18e>
 8002310:	7dfb      	ldrb	r3, [r7, #23]
 8002312:	2b00      	cmp	r3, #0
 8002314:	f040 8095 	bne.w	8002442 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002320:	f023 0302 	bic.w	r3, r3, #2
 8002324:	f043 0202 	orr.w	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002334:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	7b1b      	ldrb	r3, [r3, #12]
 800233a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800233c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800233e:	68ba      	ldr	r2, [r7, #8]
 8002340:	4313      	orrs	r3, r2
 8002342:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800234c:	d003      	beq.n	8002356 <HAL_ADC_Init+0xa2>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d102      	bne.n	800235c <HAL_ADC_Init+0xa8>
 8002356:	f44f 7380 	mov.w	r3, #256	; 0x100
 800235a:	e000      	b.n	800235e <HAL_ADC_Init+0xaa>
 800235c:	2300      	movs	r3, #0
 800235e:	693a      	ldr	r2, [r7, #16]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	7d1b      	ldrb	r3, [r3, #20]
 8002368:	2b01      	cmp	r3, #1
 800236a:	d119      	bne.n	80023a0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	7b1b      	ldrb	r3, [r3, #12]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d109      	bne.n	8002388 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	699b      	ldr	r3, [r3, #24]
 8002378:	3b01      	subs	r3, #1
 800237a:	035a      	lsls	r2, r3, #13
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002384:	613b      	str	r3, [r7, #16]
 8002386:	e00b      	b.n	80023a0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238c:	f043 0220 	orr.w	r2, r3, #32
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f043 0201 	orr.w	r2, r3, #1
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	689a      	ldr	r2, [r3, #8]
 80023ba:	4b28      	ldr	r3, [pc, #160]	; (800245c <HAL_ADC_Init+0x1a8>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6812      	ldr	r2, [r2, #0]
 80023c2:	68b9      	ldr	r1, [r7, #8]
 80023c4:	430b      	orrs	r3, r1
 80023c6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	689b      	ldr	r3, [r3, #8]
 80023cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023d0:	d003      	beq.n	80023da <HAL_ADC_Init+0x126>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d104      	bne.n	80023e4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	3b01      	subs	r3, #1
 80023e0:	051b      	lsls	r3, r3, #20
 80023e2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	689a      	ldr	r2, [r3, #8]
 80023fe:	4b18      	ldr	r3, [pc, #96]	; (8002460 <HAL_ADC_Init+0x1ac>)
 8002400:	4013      	ands	r3, r2
 8002402:	68ba      	ldr	r2, [r7, #8]
 8002404:	429a      	cmp	r2, r3
 8002406:	d10b      	bne.n	8002420 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2200      	movs	r2, #0
 800240c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002412:	f023 0303 	bic.w	r3, r3, #3
 8002416:	f043 0201 	orr.w	r2, r3, #1
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800241e:	e018      	b.n	8002452 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002424:	f023 0312 	bic.w	r3, r3, #18
 8002428:	f043 0210 	orr.w	r2, r3, #16
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	f043 0201 	orr.w	r2, r3, #1
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002440:	e007      	b.n	8002452 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002446:	f043 0210 	orr.w	r2, r3, #16
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002452:	7dfb      	ldrb	r3, [r7, #23]
}
 8002454:	4618      	mov	r0, r3
 8002456:	3718      	adds	r7, #24
 8002458:	46bd      	mov	sp, r7
 800245a:	bd80      	pop	{r7, pc}
 800245c:	ffe1f7fd 	.word	0xffe1f7fd
 8002460:	ff1f0efe 	.word	0xff1f0efe

08002464 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800246c:	2300      	movs	r3, #0
 800246e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002476:	2b01      	cmp	r3, #1
 8002478:	d101      	bne.n	800247e <HAL_ADC_Start+0x1a>
 800247a:	2302      	movs	r3, #2
 800247c:	e098      	b.n	80025b0 <HAL_ADC_Start+0x14c>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f000 fb76 	bl	8002b78 <ADC_Enable>
 800248c:	4603      	mov	r3, r0
 800248e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8002490:	7bfb      	ldrb	r3, [r7, #15]
 8002492:	2b00      	cmp	r3, #0
 8002494:	f040 8087 	bne.w	80025a6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024a0:	f023 0301 	bic.w	r3, r3, #1
 80024a4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a41      	ldr	r2, [pc, #260]	; (80025b8 <HAL_ADC_Start+0x154>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d105      	bne.n	80024c2 <HAL_ADC_Start+0x5e>
 80024b6:	4b41      	ldr	r3, [pc, #260]	; (80025bc <HAL_ADC_Start+0x158>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d115      	bne.n	80024ee <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d026      	beq.n	800252a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024ec:	e01d      	b.n	800252a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a2f      	ldr	r2, [pc, #188]	; (80025bc <HAL_ADC_Start+0x158>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d004      	beq.n	800250e <HAL_ADC_Start+0xaa>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2b      	ldr	r2, [pc, #172]	; (80025b8 <HAL_ADC_Start+0x154>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d10d      	bne.n	800252a <HAL_ADC_Start+0xc6>
 800250e:	4b2b      	ldr	r3, [pc, #172]	; (80025bc <HAL_ADC_Start+0x158>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002516:	2b00      	cmp	r3, #0
 8002518:	d007      	beq.n	800252a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002522:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800252e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800253a:	f023 0206 	bic.w	r2, r3, #6
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	62da      	str	r2, [r3, #44]	; 0x2c
 8002542:	e002      	b.n	800254a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0202 	mvn.w	r2, #2
 800255a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002566:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800256a:	d113      	bne.n	8002594 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002570:	4a11      	ldr	r2, [pc, #68]	; (80025b8 <HAL_ADC_Start+0x154>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d105      	bne.n	8002582 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002576:	4b11      	ldr	r3, [pc, #68]	; (80025bc <HAL_ADC_Start+0x158>)
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800257e:	2b00      	cmp	r3, #0
 8002580:	d108      	bne.n	8002594 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689a      	ldr	r2, [r3, #8]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8002590:	609a      	str	r2, [r3, #8]
 8002592:	e00c      	b.n	80025ae <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689a      	ldr	r2, [r3, #8]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80025a2:	609a      	str	r2, [r3, #8]
 80025a4:	e003      	b.n	80025ae <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80025ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3710      	adds	r7, #16
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	40012800 	.word	0x40012800
 80025bc:	40012400 	.word	0x40012400

080025c0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b087      	sub	sp, #28
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80025d2:	2300      	movs	r3, #0
 80025d4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80025d6:	f7ff fe3f 	bl	8002258 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ee:	f043 0220 	orr.w	r2, r3, #32
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e0d3      	b.n	80027aa <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800260c:	2b00      	cmp	r3, #0
 800260e:	d131      	bne.n	8002674 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002616:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800261a:	2b00      	cmp	r3, #0
 800261c:	d12a      	bne.n	8002674 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800261e:	e021      	b.n	8002664 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002626:	d01d      	beq.n	8002664 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_ADC_PollForConversion+0x7e>
 800262e:	f7ff fe13 	bl	8002258 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	429a      	cmp	r2, r3
 800263c:	d212      	bcs.n	8002664 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d10b      	bne.n	8002664 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f043 0204 	orr.w	r2, r3, #4
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	629a      	str	r2, [r3, #40]	; 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
            
            return HAL_TIMEOUT;
 8002660:	2303      	movs	r3, #3
 8002662:	e0a2      	b.n	80027aa <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d0d6      	beq.n	8002620 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002672:	e070      	b.n	8002756 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002674:	4b4f      	ldr	r3, [pc, #316]	; (80027b4 <HAL_ADC_PollForConversion+0x1f4>)
 8002676:	681c      	ldr	r4, [r3, #0]
 8002678:	2002      	movs	r0, #2
 800267a:	f001 fbdd 	bl	8003e38 <HAL_RCCEx_GetPeriphCLKFreq>
 800267e:	4603      	mov	r3, r0
 8002680:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	6919      	ldr	r1, [r3, #16]
 800268a:	4b4b      	ldr	r3, [pc, #300]	; (80027b8 <HAL_ADC_PollForConversion+0x1f8>)
 800268c:	400b      	ands	r3, r1
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x104>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68d9      	ldr	r1, [r3, #12]
 8002698:	4b48      	ldr	r3, [pc, #288]	; (80027bc <HAL_ADC_PollForConversion+0x1fc>)
 800269a:	400b      	ands	r3, r1
 800269c:	2b00      	cmp	r3, #0
 800269e:	d111      	bne.n	80026c4 <HAL_ADC_PollForConversion+0x104>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6919      	ldr	r1, [r3, #16]
 80026a6:	4b46      	ldr	r3, [pc, #280]	; (80027c0 <HAL_ADC_PollForConversion+0x200>)
 80026a8:	400b      	ands	r3, r1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d108      	bne.n	80026c0 <HAL_ADC_PollForConversion+0x100>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68d9      	ldr	r1, [r3, #12]
 80026b4:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <HAL_ADC_PollForConversion+0x204>)
 80026b6:	400b      	ands	r3, r1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <HAL_ADC_PollForConversion+0x100>
 80026bc:	2314      	movs	r3, #20
 80026be:	e020      	b.n	8002702 <HAL_ADC_PollForConversion+0x142>
 80026c0:	2329      	movs	r3, #41	; 0x29
 80026c2:	e01e      	b.n	8002702 <HAL_ADC_PollForConversion+0x142>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6919      	ldr	r1, [r3, #16]
 80026ca:	4b3d      	ldr	r3, [pc, #244]	; (80027c0 <HAL_ADC_PollForConversion+0x200>)
 80026cc:	400b      	ands	r3, r1
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d106      	bne.n	80026e0 <HAL_ADC_PollForConversion+0x120>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68d9      	ldr	r1, [r3, #12]
 80026d8:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_ADC_PollForConversion+0x204>)
 80026da:	400b      	ands	r3, r1
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d00d      	beq.n	80026fc <HAL_ADC_PollForConversion+0x13c>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	6919      	ldr	r1, [r3, #16]
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_ADC_PollForConversion+0x208>)
 80026e8:	400b      	ands	r3, r1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d108      	bne.n	8002700 <HAL_ADC_PollForConversion+0x140>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	68d9      	ldr	r1, [r3, #12]
 80026f4:	4b34      	ldr	r3, [pc, #208]	; (80027c8 <HAL_ADC_PollForConversion+0x208>)
 80026f6:	400b      	ands	r3, r1
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_ADC_PollForConversion+0x140>
 80026fc:	2354      	movs	r3, #84	; 0x54
 80026fe:	e000      	b.n	8002702 <HAL_ADC_PollForConversion+0x142>
 8002700:	23fc      	movs	r3, #252	; 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002702:	fb02 f303 	mul.w	r3, r2, r3
 8002706:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002708:	e021      	b.n	800274e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002710:	d01a      	beq.n	8002748 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d007      	beq.n	8002728 <HAL_ADC_PollForConversion+0x168>
 8002718:	f7ff fd9e 	bl	8002258 <HAL_GetTick>
 800271c:	4602      	mov	r2, r0
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	1ad3      	subs	r3, r2, r3
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	429a      	cmp	r2, r3
 8002726:	d20f      	bcs.n	8002748 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	429a      	cmp	r2, r3
 800272e:	d90b      	bls.n	8002748 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f043 0204 	orr.w	r2, r3, #4
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	629a      	str	r2, [r3, #40]	; 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

            return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e030      	b.n	80027aa <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	3301      	adds	r3, #1
 800274c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	429a      	cmp	r2, r3
 8002754:	d8d9      	bhi.n	800270a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f06f 0212 	mvn.w	r2, #18
 800275e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002776:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800277a:	d115      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002780:	2b00      	cmp	r3, #0
 8002782:	d111      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002798:	2b00      	cmp	r3, #0
 800279a:	d105      	bne.n	80027a8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a0:	f043 0201 	orr.w	r2, r3, #1
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	629a      	str	r2, [r3, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	371c      	adds	r7, #28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd90      	pop	{r4, r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20000004 	.word	0x20000004
 80027b8:	24924924 	.word	0x24924924
 80027bc:	00924924 	.word	0x00924924
 80027c0:	12492492 	.word	0x12492492
 80027c4:	00492492 	.word	0x00492492
 80027c8:	00249249 	.word	0x00249249

080027cc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80027da:	4618      	mov	r0, r3
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr

080027e4 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b084      	sub	sp, #16
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f003 0320 	and.w	r3, r3, #32
 8002802:	2b00      	cmp	r3, #0
 8002804:	d03e      	beq.n	8002884 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d039      	beq.n	8002884 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d105      	bne.n	8002828 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002820:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8002832:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002836:	d11d      	bne.n	8002874 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800283c:	2b00      	cmp	r3, #0
 800283e:	d119      	bne.n	8002874 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0220 	bic.w	r2, r2, #32
 800284e:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002854:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002860:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d105      	bne.n	8002874 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002874:	6878      	ldr	r0, [r7, #4]
 8002876:	f000 f874 	bl	8002962 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f06f 0212 	mvn.w	r2, #18
 8002882:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288a:	2b00      	cmp	r3, #0
 800288c:	d04d      	beq.n	800292a <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0304 	and.w	r3, r3, #4
 8002894:	2b00      	cmp	r3, #0
 8002896:	d048      	beq.n	800292a <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289c:	f003 0310 	and.w	r3, r3, #16
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d105      	bne.n	80028b0 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80028ba:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80028be:	d012      	beq.n	80028e6 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d125      	bne.n	800291a <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80028d8:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80028dc:	d11d      	bne.n	800291a <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d119      	bne.n	800291a <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	685a      	ldr	r2, [r3, #4]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	2b00      	cmp	r3, #0
 800290c:	d105      	bne.n	800291a <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f000 f9c7 	bl	8002cae <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 020c 	mvn.w	r2, #12
 8002928:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d012      	beq.n	800295a <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 0301 	and.w	r3, r3, #1
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00d      	beq.n	800295a <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002942:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	f000 f812 	bl	8002974 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0201 	mvn.w	r2, #1
 8002958:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	bc80      	pop	{r7}
 8002984:	4770      	bx	lr
	...

08002988 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002996:	2300      	movs	r3, #0
 8002998:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <HAL_ADC_ConfigChannel+0x20>
 80029a4:	2302      	movs	r3, #2
 80029a6:	e0dc      	b.n	8002b62 <HAL_ADC_ConfigChannel+0x1da>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	685b      	ldr	r3, [r3, #4]
 80029b4:	2b06      	cmp	r3, #6
 80029b6:	d81c      	bhi.n	80029f2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	3b05      	subs	r3, #5
 80029ca:	221f      	movs	r2, #31
 80029cc:	fa02 f303 	lsl.w	r3, r2, r3
 80029d0:	43db      	mvns	r3, r3
 80029d2:	4019      	ands	r1, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	6818      	ldr	r0, [r3, #0]
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	3b05      	subs	r3, #5
 80029e4:	fa00 f203 	lsl.w	r2, r0, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	635a      	str	r2, [r3, #52]	; 0x34
 80029f0:	e03c      	b.n	8002a6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	d81c      	bhi.n	8002a34 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	4413      	add	r3, r2
 8002a0a:	3b23      	subs	r3, #35	; 0x23
 8002a0c:	221f      	movs	r2, #31
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	43db      	mvns	r3, r3
 8002a14:	4019      	ands	r1, r3
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	4613      	mov	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	4413      	add	r3, r2
 8002a24:	3b23      	subs	r3, #35	; 0x23
 8002a26:	fa00 f203 	lsl.w	r2, r0, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	430a      	orrs	r2, r1
 8002a30:	631a      	str	r2, [r3, #48]	; 0x30
 8002a32:	e01b      	b.n	8002a6c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	685a      	ldr	r2, [r3, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	4413      	add	r3, r2
 8002a44:	3b41      	subs	r3, #65	; 0x41
 8002a46:	221f      	movs	r2, #31
 8002a48:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4c:	43db      	mvns	r3, r3
 8002a4e:	4019      	ands	r1, r3
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685a      	ldr	r2, [r3, #4]
 8002a58:	4613      	mov	r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	4413      	add	r3, r2
 8002a5e:	3b41      	subs	r3, #65	; 0x41
 8002a60:	fa00 f203 	lsl.w	r2, r0, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	430a      	orrs	r2, r1
 8002a6a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	2b09      	cmp	r3, #9
 8002a72:	d91c      	bls.n	8002aae <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68d9      	ldr	r1, [r3, #12]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	3b1e      	subs	r3, #30
 8002a86:	2207      	movs	r2, #7
 8002a88:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8c:	43db      	mvns	r3, r3
 8002a8e:	4019      	ands	r1, r3
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	6898      	ldr	r0, [r3, #8]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	005b      	lsls	r3, r3, #1
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b1e      	subs	r3, #30
 8002aa0:	fa00 f203 	lsl.w	r2, r0, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	60da      	str	r2, [r3, #12]
 8002aac:	e019      	b.n	8002ae2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	6919      	ldr	r1, [r3, #16]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681a      	ldr	r2, [r3, #0]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	005b      	lsls	r3, r3, #1
 8002abc:	4413      	add	r3, r2
 8002abe:	2207      	movs	r2, #7
 8002ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac4:	43db      	mvns	r3, r3
 8002ac6:	4019      	ands	r1, r3
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	6898      	ldr	r0, [r3, #8]
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	4413      	add	r3, r2
 8002ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	2b10      	cmp	r3, #16
 8002ae8:	d003      	beq.n	8002af2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aee:	2b11      	cmp	r3, #17
 8002af0:	d132      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a1d      	ldr	r2, [pc, #116]	; (8002b6c <HAL_ADC_ConfigChannel+0x1e4>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d125      	bne.n	8002b48 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d126      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002b18:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	d11a      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_ADC_ConfigChannel+0x1e8>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a13      	ldr	r2, [pc, #76]	; (8002b74 <HAL_ADC_ConfigChannel+0x1ec>)
 8002b28:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2c:	0c9a      	lsrs	r2, r3, #18
 8002b2e:	4613      	mov	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4413      	add	r3, r2
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b38:	e002      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1f9      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x1b2>
 8002b46:	e007      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	f043 0220 	orr.w	r2, r3, #32
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002b54:	2301      	movs	r3, #1
 8002b56:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3714      	adds	r7, #20
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bc80      	pop	{r7}
 8002b6a:	4770      	bx	lr
 8002b6c:	40012400 	.word	0x40012400
 8002b70:	20000004 	.word	0x20000004
 8002b74:	431bde83 	.word	0x431bde83

08002b78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b80:	2300      	movs	r3, #0
 8002b82:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 0301 	and.w	r3, r3, #1
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d040      	beq.n	8002c18 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f042 0201 	orr.w	r2, r2, #1
 8002ba4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002ba6:	4b1f      	ldr	r3, [pc, #124]	; (8002c24 <ADC_Enable+0xac>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1f      	ldr	r2, [pc, #124]	; (8002c28 <ADC_Enable+0xb0>)
 8002bac:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb0:	0c9b      	lsrs	r3, r3, #18
 8002bb2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bb4:	e002      	b.n	8002bbc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f9      	bne.n	8002bb6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bc2:	f7ff fb49 	bl	8002258 <HAL_GetTick>
 8002bc6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002bc8:	e01f      	b.n	8002c0a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002bca:	f7ff fb45 	bl	8002258 <HAL_GetTick>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	2b02      	cmp	r3, #2
 8002bd6:	d918      	bls.n	8002c0a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d011      	beq.n	8002c0a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	f043 0210 	orr.w	r2, r3, #16
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf6:	f043 0201 	orr.w	r2, r3, #1
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e007      	b.n	8002c1a <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d1d8      	bne.n	8002bca <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	20000004 	.word	0x20000004
 8002c28:	431bde83 	.word	0x431bde83

08002c2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c34:	2300      	movs	r3, #0
 8002c36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 0301 	and.w	r3, r3, #1
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d12e      	bne.n	8002ca4 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689a      	ldr	r2, [r3, #8]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c56:	f7ff faff 	bl	8002258 <HAL_GetTick>
 8002c5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c5c:	e01b      	b.n	8002c96 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c5e:	f7ff fafb 	bl	8002258 <HAL_GetTick>
 8002c62:	4602      	mov	r2, r0
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1ad3      	subs	r3, r2, r3
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d914      	bls.n	8002c96 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d10d      	bne.n	8002c96 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7e:	f043 0210 	orr.w	r2, r3, #16
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c8a:	f043 0201 	orr.w	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e007      	b.n	8002ca6 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d0dc      	beq.n	8002c5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}

08002cae <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b085      	sub	sp, #20
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd0:	4b0c      	ldr	r3, [pc, #48]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cd6:	68ba      	ldr	r2, [r7, #8]
 8002cd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cdc:	4013      	ands	r3, r2
 8002cde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ce8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf2:	4a04      	ldr	r2, [pc, #16]	; (8002d04 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	60d3      	str	r3, [r2, #12]
}
 8002cf8:	bf00      	nop
 8002cfa:	3714      	adds	r7, #20
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bc80      	pop	{r7}
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	e000ed00 	.word	0xe000ed00

08002d08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d0c:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <__NVIC_GetPriorityGrouping+0x18>)
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	0a1b      	lsrs	r3, r3, #8
 8002d12:	f003 0307 	and.w	r3, r3, #7
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bc80      	pop	{r7}
 8002d1c:	4770      	bx	lr
 8002d1e:	bf00      	nop
 8002d20:	e000ed00 	.word	0xe000ed00

08002d24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b083      	sub	sp, #12
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	db0b      	blt.n	8002d4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d36:	79fb      	ldrb	r3, [r7, #7]
 8002d38:	f003 021f 	and.w	r2, r3, #31
 8002d3c:	4906      	ldr	r1, [pc, #24]	; (8002d58 <__NVIC_EnableIRQ+0x34>)
 8002d3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d42:	095b      	lsrs	r3, r3, #5
 8002d44:	2001      	movs	r0, #1
 8002d46:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d4e:	bf00      	nop
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bc80      	pop	{r7}
 8002d56:	4770      	bx	lr
 8002d58:	e000e100 	.word	0xe000e100

08002d5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	6039      	str	r1, [r7, #0]
 8002d66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	db0a      	blt.n	8002d86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	b2da      	uxtb	r2, r3
 8002d74:	490c      	ldr	r1, [pc, #48]	; (8002da8 <__NVIC_SetPriority+0x4c>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	0112      	lsls	r2, r2, #4
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	440b      	add	r3, r1
 8002d80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d84:	e00a      	b.n	8002d9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	b2da      	uxtb	r2, r3
 8002d8a:	4908      	ldr	r1, [pc, #32]	; (8002dac <__NVIC_SetPriority+0x50>)
 8002d8c:	79fb      	ldrb	r3, [r7, #7]
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3b04      	subs	r3, #4
 8002d94:	0112      	lsls	r2, r2, #4
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	440b      	add	r3, r1
 8002d9a:	761a      	strb	r2, [r3, #24]
}
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000e100 	.word	0xe000e100
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	; 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	60b9      	str	r1, [r7, #8]
 8002dba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f1c3 0307 	rsb	r3, r3, #7
 8002dca:	2b04      	cmp	r3, #4
 8002dcc:	bf28      	it	cs
 8002dce:	2304      	movcs	r3, #4
 8002dd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	2b06      	cmp	r3, #6
 8002dd8:	d902      	bls.n	8002de0 <NVIC_EncodePriority+0x30>
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3b03      	subs	r3, #3
 8002dde:	e000      	b.n	8002de2 <NVIC_EncodePriority+0x32>
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de4:	f04f 32ff 	mov.w	r2, #4294967295
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	fa02 f303 	lsl.w	r3, r2, r3
 8002dee:	43da      	mvns	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	401a      	ands	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002df8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	fa01 f303 	lsl.w	r3, r1, r3
 8002e02:	43d9      	mvns	r1, r3
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	4313      	orrs	r3, r2
         );
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3724      	adds	r7, #36	; 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bc80      	pop	{r7}
 8002e12:	4770      	bx	lr

08002e14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b082      	sub	sp, #8
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e24:	d301      	bcc.n	8002e2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00f      	b.n	8002e4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e2a:	4a0a      	ldr	r2, [pc, #40]	; (8002e54 <SysTick_Config+0x40>)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e32:	210f      	movs	r1, #15
 8002e34:	f04f 30ff 	mov.w	r0, #4294967295
 8002e38:	f7ff ff90 	bl	8002d5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e3c:	4b05      	ldr	r3, [pc, #20]	; (8002e54 <SysTick_Config+0x40>)
 8002e3e:	2200      	movs	r2, #0
 8002e40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e42:	4b04      	ldr	r3, [pc, #16]	; (8002e54 <SysTick_Config+0x40>)
 8002e44:	2207      	movs	r2, #7
 8002e46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	e000e010 	.word	0xe000e010

08002e58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b082      	sub	sp, #8
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff ff2d 	bl	8002cc0 <__NVIC_SetPriorityGrouping>
}
 8002e66:	bf00      	nop
 8002e68:	3708      	adds	r7, #8
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}

08002e6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e6e:	b580      	push	{r7, lr}
 8002e70:	b086      	sub	sp, #24
 8002e72:	af00      	add	r7, sp, #0
 8002e74:	4603      	mov	r3, r0
 8002e76:	60b9      	str	r1, [r7, #8]
 8002e78:	607a      	str	r2, [r7, #4]
 8002e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e80:	f7ff ff42 	bl	8002d08 <__NVIC_GetPriorityGrouping>
 8002e84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	68b9      	ldr	r1, [r7, #8]
 8002e8a:	6978      	ldr	r0, [r7, #20]
 8002e8c:	f7ff ff90 	bl	8002db0 <NVIC_EncodePriority>
 8002e90:	4602      	mov	r2, r0
 8002e92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e96:	4611      	mov	r1, r2
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff5f 	bl	8002d5c <__NVIC_SetPriority>
}
 8002e9e:	bf00      	nop
 8002ea0:	3718      	adds	r7, #24
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002eb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	f7ff ff35 	bl	8002d24 <__NVIC_EnableIRQ>
}
 8002eba:	bf00      	nop
 8002ebc:	3708      	adds	r7, #8
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff ffa2 	bl	8002e14 <SysTick_Config>
 8002ed0:	4603      	mov	r3, r0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3708      	adds	r7, #8
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}
	...

08002edc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e043      	b.n	8002f7a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_DMA_Init+0xa8>)
 8002efa:	4413      	add	r3, r2
 8002efc:	4a22      	ldr	r2, [pc, #136]	; (8002f88 <HAL_DMA_Init+0xac>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	009a      	lsls	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a1f      	ldr	r2, [pc, #124]	; (8002f8c <HAL_DMA_Init+0xb0>)
 8002f0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f26:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8002f2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	69db      	ldr	r3, [r3, #28]
 8002f52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f54:	68fa      	ldr	r2, [r7, #12]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2200      	movs	r2, #0
 8002f74:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3714      	adds	r7, #20
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bc80      	pop	{r7}
 8002f82:	4770      	bx	lr
 8002f84:	bffdfff8 	.word	0xbffdfff8
 8002f88:	cccccccd 	.word	0xcccccccd
 8002f8c:	40020000 	.word	0x40020000

08002f90 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fac:	2204      	movs	r2, #4
 8002fae:	409a      	lsls	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d04f      	beq.n	8003058 <HAL_DMA_IRQHandler+0xc8>
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	f003 0304 	and.w	r3, r3, #4
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d04a      	beq.n	8003058 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f003 0320 	and.w	r3, r3, #32
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d107      	bne.n	8002fe0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f022 0204 	bic.w	r2, r2, #4
 8002fde:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a66      	ldr	r2, [pc, #408]	; (8003180 <HAL_DMA_IRQHandler+0x1f0>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d029      	beq.n	800303e <HAL_DMA_IRQHandler+0xae>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a65      	ldr	r2, [pc, #404]	; (8003184 <HAL_DMA_IRQHandler+0x1f4>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d022      	beq.n	800303a <HAL_DMA_IRQHandler+0xaa>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a63      	ldr	r2, [pc, #396]	; (8003188 <HAL_DMA_IRQHandler+0x1f8>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d01a      	beq.n	8003034 <HAL_DMA_IRQHandler+0xa4>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a62      	ldr	r2, [pc, #392]	; (800318c <HAL_DMA_IRQHandler+0x1fc>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d012      	beq.n	800302e <HAL_DMA_IRQHandler+0x9e>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a60      	ldr	r2, [pc, #384]	; (8003190 <HAL_DMA_IRQHandler+0x200>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d00a      	beq.n	8003028 <HAL_DMA_IRQHandler+0x98>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a5f      	ldr	r2, [pc, #380]	; (8003194 <HAL_DMA_IRQHandler+0x204>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d102      	bne.n	8003022 <HAL_DMA_IRQHandler+0x92>
 800301c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003020:	e00e      	b.n	8003040 <HAL_DMA_IRQHandler+0xb0>
 8003022:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003026:	e00b      	b.n	8003040 <HAL_DMA_IRQHandler+0xb0>
 8003028:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800302c:	e008      	b.n	8003040 <HAL_DMA_IRQHandler+0xb0>
 800302e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003032:	e005      	b.n	8003040 <HAL_DMA_IRQHandler+0xb0>
 8003034:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003038:	e002      	b.n	8003040 <HAL_DMA_IRQHandler+0xb0>
 800303a:	2340      	movs	r3, #64	; 0x40
 800303c:	e000      	b.n	8003040 <HAL_DMA_IRQHandler+0xb0>
 800303e:	2304      	movs	r3, #4
 8003040:	4a55      	ldr	r2, [pc, #340]	; (8003198 <HAL_DMA_IRQHandler+0x208>)
 8003042:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 8094 	beq.w	8003176 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003056:	e08e      	b.n	8003176 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305c:	2202      	movs	r2, #2
 800305e:	409a      	lsls	r2, r3
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4013      	ands	r3, r2
 8003064:	2b00      	cmp	r3, #0
 8003066:	d056      	beq.n	8003116 <HAL_DMA_IRQHandler+0x186>
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d051      	beq.n	8003116 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0320 	and.w	r3, r3, #32
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10b      	bne.n	8003098 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f022 020a 	bic.w	r2, r2, #10
 800308e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a38      	ldr	r2, [pc, #224]	; (8003180 <HAL_DMA_IRQHandler+0x1f0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d029      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x166>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a37      	ldr	r2, [pc, #220]	; (8003184 <HAL_DMA_IRQHandler+0x1f4>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d022      	beq.n	80030f2 <HAL_DMA_IRQHandler+0x162>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a35      	ldr	r2, [pc, #212]	; (8003188 <HAL_DMA_IRQHandler+0x1f8>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d01a      	beq.n	80030ec <HAL_DMA_IRQHandler+0x15c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a34      	ldr	r2, [pc, #208]	; (800318c <HAL_DMA_IRQHandler+0x1fc>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d012      	beq.n	80030e6 <HAL_DMA_IRQHandler+0x156>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a32      	ldr	r2, [pc, #200]	; (8003190 <HAL_DMA_IRQHandler+0x200>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00a      	beq.n	80030e0 <HAL_DMA_IRQHandler+0x150>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a31      	ldr	r2, [pc, #196]	; (8003194 <HAL_DMA_IRQHandler+0x204>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d102      	bne.n	80030da <HAL_DMA_IRQHandler+0x14a>
 80030d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80030d8:	e00e      	b.n	80030f8 <HAL_DMA_IRQHandler+0x168>
 80030da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030de:	e00b      	b.n	80030f8 <HAL_DMA_IRQHandler+0x168>
 80030e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030e4:	e008      	b.n	80030f8 <HAL_DMA_IRQHandler+0x168>
 80030e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80030ea:	e005      	b.n	80030f8 <HAL_DMA_IRQHandler+0x168>
 80030ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030f0:	e002      	b.n	80030f8 <HAL_DMA_IRQHandler+0x168>
 80030f2:	2320      	movs	r3, #32
 80030f4:	e000      	b.n	80030f8 <HAL_DMA_IRQHandler+0x168>
 80030f6:	2302      	movs	r3, #2
 80030f8:	4a27      	ldr	r2, [pc, #156]	; (8003198 <HAL_DMA_IRQHandler+0x208>)
 80030fa:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003108:	2b00      	cmp	r3, #0
 800310a:	d034      	beq.n	8003176 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003110:	6878      	ldr	r0, [r7, #4]
 8003112:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003114:	e02f      	b.n	8003176 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	2208      	movs	r2, #8
 800311c:	409a      	lsls	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d028      	beq.n	8003178 <HAL_DMA_IRQHandler+0x1e8>
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	f003 0308 	and.w	r3, r3, #8
 800312c:	2b00      	cmp	r3, #0
 800312e:	d023      	beq.n	8003178 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	681a      	ldr	r2, [r3, #0]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 020e 	bic.w	r2, r2, #14
 800313e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	2101      	movs	r1, #1
 800314a:	fa01 f202 	lsl.w	r2, r1, r2
 800314e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2201      	movs	r2, #1
 800315a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	2b00      	cmp	r3, #0
 800316c:	d004      	beq.n	8003178 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	4798      	blx	r3
    }
  }
  return;
 8003176:	bf00      	nop
 8003178:	bf00      	nop
}
 800317a:	3710      	adds	r7, #16
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	40020008 	.word	0x40020008
 8003184:	4002001c 	.word	0x4002001c
 8003188:	40020030 	.word	0x40020030
 800318c:	40020044 	.word	0x40020044
 8003190:	40020058 	.word	0x40020058
 8003194:	4002006c 	.word	0x4002006c
 8003198:	40020000 	.word	0x40020000

0800319c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800319c:	b480      	push	{r7}
 800319e:	b08b      	sub	sp, #44	; 0x2c
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80031a6:	2300      	movs	r3, #0
 80031a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80031aa:	2300      	movs	r3, #0
 80031ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80031ae:	e169      	b.n	8003484 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80031b0:	2201      	movs	r2, #1
 80031b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	69fa      	ldr	r2, [r7, #28]
 80031c0:	4013      	ands	r3, r2
 80031c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	f040 8158 	bne.w	800347e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	4a9a      	ldr	r2, [pc, #616]	; (800343c <HAL_GPIO_Init+0x2a0>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d05e      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031d8:	4a98      	ldr	r2, [pc, #608]	; (800343c <HAL_GPIO_Init+0x2a0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d875      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 80031de:	4a98      	ldr	r2, [pc, #608]	; (8003440 <HAL_GPIO_Init+0x2a4>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d058      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031e4:	4a96      	ldr	r2, [pc, #600]	; (8003440 <HAL_GPIO_Init+0x2a4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d86f      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 80031ea:	4a96      	ldr	r2, [pc, #600]	; (8003444 <HAL_GPIO_Init+0x2a8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d052      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031f0:	4a94      	ldr	r2, [pc, #592]	; (8003444 <HAL_GPIO_Init+0x2a8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d869      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 80031f6:	4a94      	ldr	r2, [pc, #592]	; (8003448 <HAL_GPIO_Init+0x2ac>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d04c      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 80031fc:	4a92      	ldr	r2, [pc, #584]	; (8003448 <HAL_GPIO_Init+0x2ac>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d863      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 8003202:	4a92      	ldr	r2, [pc, #584]	; (800344c <HAL_GPIO_Init+0x2b0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d046      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
 8003208:	4a90      	ldr	r2, [pc, #576]	; (800344c <HAL_GPIO_Init+0x2b0>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d85d      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 800320e:	2b12      	cmp	r3, #18
 8003210:	d82a      	bhi.n	8003268 <HAL_GPIO_Init+0xcc>
 8003212:	2b12      	cmp	r3, #18
 8003214:	d859      	bhi.n	80032ca <HAL_GPIO_Init+0x12e>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <HAL_GPIO_Init+0x80>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003297 	.word	0x08003297
 8003220:	08003271 	.word	0x08003271
 8003224:	08003283 	.word	0x08003283
 8003228:	080032c5 	.word	0x080032c5
 800322c:	080032cb 	.word	0x080032cb
 8003230:	080032cb 	.word	0x080032cb
 8003234:	080032cb 	.word	0x080032cb
 8003238:	080032cb 	.word	0x080032cb
 800323c:	080032cb 	.word	0x080032cb
 8003240:	080032cb 	.word	0x080032cb
 8003244:	080032cb 	.word	0x080032cb
 8003248:	080032cb 	.word	0x080032cb
 800324c:	080032cb 	.word	0x080032cb
 8003250:	080032cb 	.word	0x080032cb
 8003254:	080032cb 	.word	0x080032cb
 8003258:	080032cb 	.word	0x080032cb
 800325c:	080032cb 	.word	0x080032cb
 8003260:	08003279 	.word	0x08003279
 8003264:	0800328d 	.word	0x0800328d
 8003268:	4a79      	ldr	r2, [pc, #484]	; (8003450 <HAL_GPIO_Init+0x2b4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d013      	beq.n	8003296 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800326e:	e02c      	b.n	80032ca <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	623b      	str	r3, [r7, #32]
          break;
 8003276:	e029      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	3304      	adds	r3, #4
 800327e:	623b      	str	r3, [r7, #32]
          break;
 8003280:	e024      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	3308      	adds	r3, #8
 8003288:	623b      	str	r3, [r7, #32]
          break;
 800328a:	e01f      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68db      	ldr	r3, [r3, #12]
 8003290:	330c      	adds	r3, #12
 8003292:	623b      	str	r3, [r7, #32]
          break;
 8003294:	e01a      	b.n	80032cc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d102      	bne.n	80032a4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800329e:	2304      	movs	r3, #4
 80032a0:	623b      	str	r3, [r7, #32]
          break;
 80032a2:	e013      	b.n	80032cc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d105      	bne.n	80032b8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032ac:	2308      	movs	r3, #8
 80032ae:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	611a      	str	r2, [r3, #16]
          break;
 80032b6:	e009      	b.n	80032cc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80032b8:	2308      	movs	r3, #8
 80032ba:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69fa      	ldr	r2, [r7, #28]
 80032c0:	615a      	str	r2, [r3, #20]
          break;
 80032c2:	e003      	b.n	80032cc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80032c4:	2300      	movs	r3, #0
 80032c6:	623b      	str	r3, [r7, #32]
          break;
 80032c8:	e000      	b.n	80032cc <HAL_GPIO_Init+0x130>
          break;
 80032ca:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	2bff      	cmp	r3, #255	; 0xff
 80032d0:	d801      	bhi.n	80032d6 <HAL_GPIO_Init+0x13a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	e001      	b.n	80032da <HAL_GPIO_Init+0x13e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	3304      	adds	r3, #4
 80032da:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2bff      	cmp	r3, #255	; 0xff
 80032e0:	d802      	bhi.n	80032e8 <HAL_GPIO_Init+0x14c>
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	e002      	b.n	80032ee <HAL_GPIO_Init+0x152>
 80032e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ea:	3b08      	subs	r3, #8
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80032f0:	697b      	ldr	r3, [r7, #20]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	210f      	movs	r1, #15
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	fa01 f303 	lsl.w	r3, r1, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	401a      	ands	r2, r3
 8003300:	6a39      	ldr	r1, [r7, #32]
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	fa01 f303 	lsl.w	r3, r1, r3
 8003308:	431a      	orrs	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80b1 	beq.w	800347e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800331c:	4b4d      	ldr	r3, [pc, #308]	; (8003454 <HAL_GPIO_Init+0x2b8>)
 800331e:	699b      	ldr	r3, [r3, #24]
 8003320:	4a4c      	ldr	r2, [pc, #304]	; (8003454 <HAL_GPIO_Init+0x2b8>)
 8003322:	f043 0301 	orr.w	r3, r3, #1
 8003326:	6193      	str	r3, [r2, #24]
 8003328:	4b4a      	ldr	r3, [pc, #296]	; (8003454 <HAL_GPIO_Init+0x2b8>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003334:	4a48      	ldr	r2, [pc, #288]	; (8003458 <HAL_GPIO_Init+0x2bc>)
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	089b      	lsrs	r3, r3, #2
 800333a:	3302      	adds	r3, #2
 800333c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003340:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	f003 0303 	and.w	r3, r3, #3
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	220f      	movs	r2, #15
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	43db      	mvns	r3, r3
 8003352:	68fa      	ldr	r2, [r7, #12]
 8003354:	4013      	ands	r3, r2
 8003356:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a40      	ldr	r2, [pc, #256]	; (800345c <HAL_GPIO_Init+0x2c0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d013      	beq.n	8003388 <HAL_GPIO_Init+0x1ec>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3f      	ldr	r2, [pc, #252]	; (8003460 <HAL_GPIO_Init+0x2c4>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d00d      	beq.n	8003384 <HAL_GPIO_Init+0x1e8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3e      	ldr	r2, [pc, #248]	; (8003464 <HAL_GPIO_Init+0x2c8>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d007      	beq.n	8003380 <HAL_GPIO_Init+0x1e4>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	4a3d      	ldr	r2, [pc, #244]	; (8003468 <HAL_GPIO_Init+0x2cc>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d101      	bne.n	800337c <HAL_GPIO_Init+0x1e0>
 8003378:	2303      	movs	r3, #3
 800337a:	e006      	b.n	800338a <HAL_GPIO_Init+0x1ee>
 800337c:	2304      	movs	r3, #4
 800337e:	e004      	b.n	800338a <HAL_GPIO_Init+0x1ee>
 8003380:	2302      	movs	r3, #2
 8003382:	e002      	b.n	800338a <HAL_GPIO_Init+0x1ee>
 8003384:	2301      	movs	r3, #1
 8003386:	e000      	b.n	800338a <HAL_GPIO_Init+0x1ee>
 8003388:	2300      	movs	r3, #0
 800338a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800338c:	f002 0203 	and.w	r2, r2, #3
 8003390:	0092      	lsls	r2, r2, #2
 8003392:	4093      	lsls	r3, r2
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800339a:	492f      	ldr	r1, [pc, #188]	; (8003458 <HAL_GPIO_Init+0x2bc>)
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	089b      	lsrs	r3, r3, #2
 80033a0:	3302      	adds	r3, #2
 80033a2:	68fa      	ldr	r2, [r7, #12]
 80033a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d006      	beq.n	80033c2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80033b4:	4b2d      	ldr	r3, [pc, #180]	; (800346c <HAL_GPIO_Init+0x2d0>)
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	492c      	ldr	r1, [pc, #176]	; (800346c <HAL_GPIO_Init+0x2d0>)
 80033ba:	69bb      	ldr	r3, [r7, #24]
 80033bc:	4313      	orrs	r3, r2
 80033be:	608b      	str	r3, [r1, #8]
 80033c0:	e006      	b.n	80033d0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80033c2:	4b2a      	ldr	r3, [pc, #168]	; (800346c <HAL_GPIO_Init+0x2d0>)
 80033c4:	689a      	ldr	r2, [r3, #8]
 80033c6:	69bb      	ldr	r3, [r7, #24]
 80033c8:	43db      	mvns	r3, r3
 80033ca:	4928      	ldr	r1, [pc, #160]	; (800346c <HAL_GPIO_Init+0x2d0>)
 80033cc:	4013      	ands	r3, r2
 80033ce:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d006      	beq.n	80033ea <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80033dc:	4b23      	ldr	r3, [pc, #140]	; (800346c <HAL_GPIO_Init+0x2d0>)
 80033de:	68da      	ldr	r2, [r3, #12]
 80033e0:	4922      	ldr	r1, [pc, #136]	; (800346c <HAL_GPIO_Init+0x2d0>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	4313      	orrs	r3, r2
 80033e6:	60cb      	str	r3, [r1, #12]
 80033e8:	e006      	b.n	80033f8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_GPIO_Init+0x2d0>)
 80033ec:	68da      	ldr	r2, [r3, #12]
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	43db      	mvns	r3, r3
 80033f2:	491e      	ldr	r1, [pc, #120]	; (800346c <HAL_GPIO_Init+0x2d0>)
 80033f4:	4013      	ands	r3, r2
 80033f6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003400:	2b00      	cmp	r3, #0
 8003402:	d006      	beq.n	8003412 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003404:	4b19      	ldr	r3, [pc, #100]	; (800346c <HAL_GPIO_Init+0x2d0>)
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	4918      	ldr	r1, [pc, #96]	; (800346c <HAL_GPIO_Init+0x2d0>)
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	4313      	orrs	r3, r2
 800340e:	604b      	str	r3, [r1, #4]
 8003410:	e006      	b.n	8003420 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003412:	4b16      	ldr	r3, [pc, #88]	; (800346c <HAL_GPIO_Init+0x2d0>)
 8003414:	685a      	ldr	r2, [r3, #4]
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	43db      	mvns	r3, r3
 800341a:	4914      	ldr	r1, [pc, #80]	; (800346c <HAL_GPIO_Init+0x2d0>)
 800341c:	4013      	ands	r3, r2
 800341e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003428:	2b00      	cmp	r3, #0
 800342a:	d021      	beq.n	8003470 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800342c:	4b0f      	ldr	r3, [pc, #60]	; (800346c <HAL_GPIO_Init+0x2d0>)
 800342e:	681a      	ldr	r2, [r3, #0]
 8003430:	490e      	ldr	r1, [pc, #56]	; (800346c <HAL_GPIO_Init+0x2d0>)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4313      	orrs	r3, r2
 8003436:	600b      	str	r3, [r1, #0]
 8003438:	e021      	b.n	800347e <HAL_GPIO_Init+0x2e2>
 800343a:	bf00      	nop
 800343c:	10320000 	.word	0x10320000
 8003440:	10310000 	.word	0x10310000
 8003444:	10220000 	.word	0x10220000
 8003448:	10210000 	.word	0x10210000
 800344c:	10120000 	.word	0x10120000
 8003450:	10110000 	.word	0x10110000
 8003454:	40021000 	.word	0x40021000
 8003458:	40010000 	.word	0x40010000
 800345c:	40010800 	.word	0x40010800
 8003460:	40010c00 	.word	0x40010c00
 8003464:	40011000 	.word	0x40011000
 8003468:	40011400 	.word	0x40011400
 800346c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003470:	4b0b      	ldr	r3, [pc, #44]	; (80034a0 <HAL_GPIO_Init+0x304>)
 8003472:	681a      	ldr	r2, [r3, #0]
 8003474:	69bb      	ldr	r3, [r7, #24]
 8003476:	43db      	mvns	r3, r3
 8003478:	4909      	ldr	r1, [pc, #36]	; (80034a0 <HAL_GPIO_Init+0x304>)
 800347a:	4013      	ands	r3, r2
 800347c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800347e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003480:	3301      	adds	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800348a:	fa22 f303 	lsr.w	r3, r2, r3
 800348e:	2b00      	cmp	r3, #0
 8003490:	f47f ae8e 	bne.w	80031b0 <HAL_GPIO_Init+0x14>
  }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	372c      	adds	r7, #44	; 0x2c
 800349a:	46bd      	mov	sp, r7
 800349c:	bc80      	pop	{r7}
 800349e:	4770      	bx	lr
 80034a0:	40010400 	.word	0x40010400

080034a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034a4:	b480      	push	{r7}
 80034a6:	b083      	sub	sp, #12
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	6078      	str	r0, [r7, #4]
 80034ac:	460b      	mov	r3, r1
 80034ae:	807b      	strh	r3, [r7, #2]
 80034b0:	4613      	mov	r3, r2
 80034b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034b4:	787b      	ldrb	r3, [r7, #1]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d003      	beq.n	80034c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034ba:	887a      	ldrh	r2, [r7, #2]
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80034c0:	e003      	b.n	80034ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80034c2:	887b      	ldrh	r3, [r7, #2]
 80034c4:	041a      	lsls	r2, r3, #16
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	611a      	str	r2, [r3, #16]
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bc80      	pop	{r7}
 80034d2:	4770      	bx	lr

080034d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b086      	sub	sp, #24
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e272      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8087 	beq.w	8003602 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034f4:	4b92      	ldr	r3, [pc, #584]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d00c      	beq.n	800351a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003500:	4b8f      	ldr	r3, [pc, #572]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 030c 	and.w	r3, r3, #12
 8003508:	2b08      	cmp	r3, #8
 800350a:	d112      	bne.n	8003532 <HAL_RCC_OscConfig+0x5e>
 800350c:	4b8c      	ldr	r3, [pc, #560]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003514:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003518:	d10b      	bne.n	8003532 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800351a:	4b89      	ldr	r3, [pc, #548]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d06c      	beq.n	8003600 <HAL_RCC_OscConfig+0x12c>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d168      	bne.n	8003600 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e24c      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353a:	d106      	bne.n	800354a <HAL_RCC_OscConfig+0x76>
 800353c:	4b80      	ldr	r3, [pc, #512]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a7f      	ldr	r2, [pc, #508]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003546:	6013      	str	r3, [r2, #0]
 8003548:	e02e      	b.n	80035a8 <HAL_RCC_OscConfig+0xd4>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d10c      	bne.n	800356c <HAL_RCC_OscConfig+0x98>
 8003552:	4b7b      	ldr	r3, [pc, #492]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a7a      	ldr	r2, [pc, #488]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003558:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800355c:	6013      	str	r3, [r2, #0]
 800355e:	4b78      	ldr	r3, [pc, #480]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a77      	ldr	r2, [pc, #476]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003564:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003568:	6013      	str	r3, [r2, #0]
 800356a:	e01d      	b.n	80035a8 <HAL_RCC_OscConfig+0xd4>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003574:	d10c      	bne.n	8003590 <HAL_RCC_OscConfig+0xbc>
 8003576:	4b72      	ldr	r3, [pc, #456]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a71      	ldr	r2, [pc, #452]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800357c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	4b6f      	ldr	r3, [pc, #444]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a6e      	ldr	r2, [pc, #440]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003588:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800358c:	6013      	str	r3, [r2, #0]
 800358e:	e00b      	b.n	80035a8 <HAL_RCC_OscConfig+0xd4>
 8003590:	4b6b      	ldr	r3, [pc, #428]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a6a      	ldr	r2, [pc, #424]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800359a:	6013      	str	r3, [r2, #0]
 800359c:	4b68      	ldr	r3, [pc, #416]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a67      	ldr	r2, [pc, #412]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80035a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80035a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d013      	beq.n	80035d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b0:	f7fe fe52 	bl	8002258 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035b6:	e008      	b.n	80035ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035b8:	f7fe fe4e 	bl	8002258 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	2b64      	cmp	r3, #100	; 0x64
 80035c4:	d901      	bls.n	80035ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e200      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ca:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d0f0      	beq.n	80035b8 <HAL_RCC_OscConfig+0xe4>
 80035d6:	e014      	b.n	8003602 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fe fe3e 	bl	8002258 <HAL_GetTick>
 80035dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035de:	e008      	b.n	80035f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e0:	f7fe fe3a 	bl	8002258 <HAL_GetTick>
 80035e4:	4602      	mov	r2, r0
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	1ad3      	subs	r3, r2, r3
 80035ea:	2b64      	cmp	r3, #100	; 0x64
 80035ec:	d901      	bls.n	80035f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80035ee:	2303      	movs	r3, #3
 80035f0:	e1ec      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f2:	4b53      	ldr	r3, [pc, #332]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1f0      	bne.n	80035e0 <HAL_RCC_OscConfig+0x10c>
 80035fe:	e000      	b.n	8003602 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d063      	beq.n	80036d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800360e:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	f003 030c 	and.w	r3, r3, #12
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00b      	beq.n	8003632 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800361a:	4b49      	ldr	r3, [pc, #292]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f003 030c 	and.w	r3, r3, #12
 8003622:	2b08      	cmp	r3, #8
 8003624:	d11c      	bne.n	8003660 <HAL_RCC_OscConfig+0x18c>
 8003626:	4b46      	ldr	r3, [pc, #280]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d116      	bne.n	8003660 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003632:	4b43      	ldr	r3, [pc, #268]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0302 	and.w	r3, r3, #2
 800363a:	2b00      	cmp	r3, #0
 800363c:	d005      	beq.n	800364a <HAL_RCC_OscConfig+0x176>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d001      	beq.n	800364a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003646:	2301      	movs	r3, #1
 8003648:	e1c0      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364a:	4b3d      	ldr	r3, [pc, #244]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	4939      	ldr	r1, [pc, #228]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800365a:	4313      	orrs	r3, r2
 800365c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800365e:	e03a      	b.n	80036d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	691b      	ldr	r3, [r3, #16]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d020      	beq.n	80036aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003668:	4b36      	ldr	r3, [pc, #216]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 800366a:	2201      	movs	r2, #1
 800366c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800366e:	f7fe fdf3 	bl	8002258 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003676:	f7fe fdef 	bl	8002258 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e1a1      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003688:	4b2d      	ldr	r3, [pc, #180]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0302 	and.w	r3, r3, #2
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003694:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	4927      	ldr	r1, [pc, #156]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80036a4:	4313      	orrs	r3, r2
 80036a6:	600b      	str	r3, [r1, #0]
 80036a8:	e015      	b.n	80036d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036aa:	4b26      	ldr	r3, [pc, #152]	; (8003744 <HAL_RCC_OscConfig+0x270>)
 80036ac:	2200      	movs	r2, #0
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe fdd2 	bl	8002258 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036b8:	f7fe fdce 	bl	8002258 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e180      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ca:	4b1d      	ldr	r3, [pc, #116]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 0308 	and.w	r3, r3, #8
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d03a      	beq.n	8003758 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d019      	beq.n	800371e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ea:	4b17      	ldr	r3, [pc, #92]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 80036ec:	2201      	movs	r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f0:	f7fe fdb2 	bl	8002258 <HAL_GetTick>
 80036f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036f8:	f7fe fdae 	bl	8002258 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e160      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370a:	4b0d      	ldr	r3, [pc, #52]	; (8003740 <HAL_RCC_OscConfig+0x26c>)
 800370c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d0f0      	beq.n	80036f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003716:	2001      	movs	r0, #1
 8003718:	f000 faba 	bl	8003c90 <RCC_Delay>
 800371c:	e01c      	b.n	8003758 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371e:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <HAL_RCC_OscConfig+0x274>)
 8003720:	2200      	movs	r2, #0
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003724:	f7fe fd98 	bl	8002258 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800372a:	e00f      	b.n	800374c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fd94 	bl	8002258 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d908      	bls.n	800374c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e146      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	42420000 	.word	0x42420000
 8003748:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800374c:	4b92      	ldr	r3, [pc, #584]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1e9      	bne.n	800372c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80a6 	beq.w	80038b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003766:	2300      	movs	r3, #0
 8003768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800376a:	4b8b      	ldr	r3, [pc, #556]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800376c:	69db      	ldr	r3, [r3, #28]
 800376e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10d      	bne.n	8003792 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003776:	4b88      	ldr	r3, [pc, #544]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003778:	69db      	ldr	r3, [r3, #28]
 800377a:	4a87      	ldr	r2, [pc, #540]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003780:	61d3      	str	r3, [r2, #28]
 8003782:	4b85      	ldr	r3, [pc, #532]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003784:	69db      	ldr	r3, [r3, #28]
 8003786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003792:	4b82      	ldr	r3, [pc, #520]	; (800399c <HAL_RCC_OscConfig+0x4c8>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d118      	bne.n	80037d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379e:	4b7f      	ldr	r3, [pc, #508]	; (800399c <HAL_RCC_OscConfig+0x4c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7e      	ldr	r2, [pc, #504]	; (800399c <HAL_RCC_OscConfig+0x4c8>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037aa:	f7fe fd55 	bl	8002258 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b2:	f7fe fd51 	bl	8002258 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b64      	cmp	r3, #100	; 0x64
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e103      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	4b75      	ldr	r3, [pc, #468]	; (800399c <HAL_RCC_OscConfig+0x4c8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x312>
 80037d8:	4b6f      	ldr	r3, [pc, #444]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037da:	6a1b      	ldr	r3, [r3, #32]
 80037dc:	4a6e      	ldr	r2, [pc, #440]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6213      	str	r3, [r2, #32]
 80037e4:	e02d      	b.n	8003842 <HAL_RCC_OscConfig+0x36e>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x334>
 80037ee:	4b6a      	ldr	r3, [pc, #424]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037f0:	6a1b      	ldr	r3, [r3, #32]
 80037f2:	4a69      	ldr	r2, [pc, #420]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	f023 0301 	bic.w	r3, r3, #1
 80037f8:	6213      	str	r3, [r2, #32]
 80037fa:	4b67      	ldr	r3, [pc, #412]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80037fc:	6a1b      	ldr	r3, [r3, #32]
 80037fe:	4a66      	ldr	r2, [pc, #408]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003800:	f023 0304 	bic.w	r3, r3, #4
 8003804:	6213      	str	r3, [r2, #32]
 8003806:	e01c      	b.n	8003842 <HAL_RCC_OscConfig+0x36e>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	2b05      	cmp	r3, #5
 800380e:	d10c      	bne.n	800382a <HAL_RCC_OscConfig+0x356>
 8003810:	4b61      	ldr	r3, [pc, #388]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	4a60      	ldr	r2, [pc, #384]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	f043 0304 	orr.w	r3, r3, #4
 800381a:	6213      	str	r3, [r2, #32]
 800381c:	4b5e      	ldr	r3, [pc, #376]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	4a5d      	ldr	r2, [pc, #372]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003822:	f043 0301 	orr.w	r3, r3, #1
 8003826:	6213      	str	r3, [r2, #32]
 8003828:	e00b      	b.n	8003842 <HAL_RCC_OscConfig+0x36e>
 800382a:	4b5b      	ldr	r3, [pc, #364]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800382c:	6a1b      	ldr	r3, [r3, #32]
 800382e:	4a5a      	ldr	r2, [pc, #360]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003830:	f023 0301 	bic.w	r3, r3, #1
 8003834:	6213      	str	r3, [r2, #32]
 8003836:	4b58      	ldr	r3, [pc, #352]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003838:	6a1b      	ldr	r3, [r3, #32]
 800383a:	4a57      	ldr	r2, [pc, #348]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800383c:	f023 0304 	bic.w	r3, r3, #4
 8003840:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d015      	beq.n	8003876 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800384a:	f7fe fd05 	bl	8002258 <HAL_GetTick>
 800384e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fe fd01 	bl	8002258 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e0b1      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003868:	4b4b      	ldr	r3, [pc, #300]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0ee      	beq.n	8003852 <HAL_RCC_OscConfig+0x37e>
 8003874:	e014      	b.n	80038a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003876:	f7fe fcef 	bl	8002258 <HAL_GetTick>
 800387a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800387c:	e00a      	b.n	8003894 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800387e:	f7fe fceb 	bl	8002258 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	f241 3288 	movw	r2, #5000	; 0x1388
 800388c:	4293      	cmp	r3, r2
 800388e:	d901      	bls.n	8003894 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e09b      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003894:	4b40      	ldr	r3, [pc, #256]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003896:	6a1b      	ldr	r3, [r3, #32]
 8003898:	f003 0302 	and.w	r3, r3, #2
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1ee      	bne.n	800387e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80038a0:	7dfb      	ldrb	r3, [r7, #23]
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d105      	bne.n	80038b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038a6:	4b3c      	ldr	r3, [pc, #240]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4a3b      	ldr	r2, [pc, #236]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80038ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	69db      	ldr	r3, [r3, #28]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	f000 8087 	beq.w	80039ca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80038bc:	4b36      	ldr	r3, [pc, #216]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 030c 	and.w	r3, r3, #12
 80038c4:	2b08      	cmp	r3, #8
 80038c6:	d061      	beq.n	800398c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	69db      	ldr	r3, [r3, #28]
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d146      	bne.n	800395e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b33      	ldr	r3, [pc, #204]	; (80039a0 <HAL_RCC_OscConfig+0x4cc>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038d6:	f7fe fcbf 	bl	8002258 <HAL_GetTick>
 80038da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038dc:	e008      	b.n	80038f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038de:	f7fe fcbb 	bl	8002258 <HAL_GetTick>
 80038e2:	4602      	mov	r2, r0
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	1ad3      	subs	r3, r2, r3
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d901      	bls.n	80038f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80038ec:	2303      	movs	r3, #3
 80038ee:	e06d      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80038f0:	4b29      	ldr	r3, [pc, #164]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d1f0      	bne.n	80038de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003904:	d108      	bne.n	8003918 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003906:	4b24      	ldr	r3, [pc, #144]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	4921      	ldr	r1, [pc, #132]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003914:	4313      	orrs	r3, r2
 8003916:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a19      	ldr	r1, [r3, #32]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003928:	430b      	orrs	r3, r1
 800392a:	491b      	ldr	r1, [pc, #108]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 800392c:	4313      	orrs	r3, r2
 800392e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003930:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <HAL_RCC_OscConfig+0x4cc>)
 8003932:	2201      	movs	r2, #1
 8003934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003936:	f7fe fc8f 	bl	8002258 <HAL_GetTick>
 800393a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800393c:	e008      	b.n	8003950 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800393e:	f7fe fc8b 	bl	8002258 <HAL_GetTick>
 8003942:	4602      	mov	r2, r0
 8003944:	693b      	ldr	r3, [r7, #16]
 8003946:	1ad3      	subs	r3, r2, r3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d901      	bls.n	8003950 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e03d      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003950:	4b11      	ldr	r3, [pc, #68]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d0f0      	beq.n	800393e <HAL_RCC_OscConfig+0x46a>
 800395c:	e035      	b.n	80039ca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <HAL_RCC_OscConfig+0x4cc>)
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003964:	f7fe fc78 	bl	8002258 <HAL_GetTick>
 8003968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800396a:	e008      	b.n	800397e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800396c:	f7fe fc74 	bl	8002258 <HAL_GetTick>
 8003970:	4602      	mov	r2, r0
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	2b02      	cmp	r3, #2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e026      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800397e:	4b06      	ldr	r3, [pc, #24]	; (8003998 <HAL_RCC_OscConfig+0x4c4>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d1f0      	bne.n	800396c <HAL_RCC_OscConfig+0x498>
 800398a:	e01e      	b.n	80039ca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d107      	bne.n	80039a4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e019      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
 8003998:	40021000 	.word	0x40021000
 800399c:	40007000 	.word	0x40007000
 80039a0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80039a4:	4b0b      	ldr	r3, [pc, #44]	; (80039d4 <HAL_RCC_OscConfig+0x500>)
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d106      	bne.n	80039c6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d001      	beq.n	80039ca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e000      	b.n	80039cc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3718      	adds	r7, #24
 80039d0:	46bd      	mov	sp, r7
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	40021000 	.word	0x40021000

080039d8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d101      	bne.n	80039ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0d0      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039ec:	4b6a      	ldr	r3, [pc, #424]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	683a      	ldr	r2, [r7, #0]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d910      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039fa:	4b67      	ldr	r3, [pc, #412]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f023 0207 	bic.w	r2, r3, #7
 8003a02:	4965      	ldr	r1, [pc, #404]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	4313      	orrs	r3, r2
 8003a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003a3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003a56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d040      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d115      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d107      	bne.n	8003aa6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a96:	4b41      	ldr	r3, [pc, #260]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d109      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	e073      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aa6:	4b3d      	ldr	r3, [pc, #244]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e06b      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ab6:	4b39      	ldr	r3, [pc, #228]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	4936      	ldr	r1, [pc, #216]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ac8:	f7fe fbc6 	bl	8002258 <HAL_GetTick>
 8003acc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	e00a      	b.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad0:	f7fe fbc2 	bl	8002258 <HAL_GetTick>
 8003ad4:	4602      	mov	r2, r0
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	1ad3      	subs	r3, r2, r3
 8003ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d901      	bls.n	8003ae6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e053      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae6:	4b2d      	ldr	r3, [pc, #180]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	f003 020c 	and.w	r2, r3, #12
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1eb      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003af8:	4b27      	ldr	r3, [pc, #156]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d210      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b24      	ldr	r3, [pc, #144]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 0207 	bic.w	r2, r3, #7
 8003b0e:	4922      	ldr	r1, [pc, #136]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCC_ClockConfig+0x1c0>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f821 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_ClockConfig+0x1c4>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	490a      	ldr	r1, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c8>)
 8003b78:	5ccb      	ldrb	r3, [r1, r3]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1cc>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1d0>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fe fb24 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40022000 	.word	0x40022000
 8003b9c:	40021000 	.word	0x40021000
 8003ba0:	0800995c 	.word	0x0800995c
 8003ba4:	20000004 	.word	0x20000004
 8003ba8:	20000008 	.word	0x20000008

08003bac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	617b      	str	r3, [r7, #20]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	2b04      	cmp	r3, #4
 8003bd4:	d002      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x30>
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d003      	beq.n	8003be2 <HAL_RCC_GetSysClockFreq+0x36>
 8003bda:	e027      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bdc:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bde:	613b      	str	r3, [r7, #16]
      break;
 8003be0:	e027      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	0c9b      	lsrs	r3, r3, #18
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	4a17      	ldr	r2, [pc, #92]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bec:	5cd3      	ldrb	r3, [r2, r3]
 8003bee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d010      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x94>)
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	0c5b      	lsrs	r3, r3, #17
 8003c00:	f003 0301 	and.w	r3, r3, #1
 8003c04:	4a11      	ldr	r2, [pc, #68]	; (8003c4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003c06:	5cd3      	ldrb	r3, [r2, r3]
 8003c08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a0d      	ldr	r2, [pc, #52]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c0e:	fb03 f202 	mul.w	r2, r3, r2
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e004      	b.n	8003c26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a0c      	ldr	r2, [pc, #48]	; (8003c50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	613b      	str	r3, [r7, #16]
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c2e:	613b      	str	r3, [r7, #16]
      break;
 8003c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c32:	693b      	ldr	r3, [r7, #16]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	371c      	adds	r7, #28
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	40021000 	.word	0x40021000
 8003c44:	007a1200 	.word	0x007a1200
 8003c48:	08009974 	.word	0x08009974
 8003c4c:	08009984 	.word	0x08009984
 8003c50:	003d0900 	.word	0x003d0900

08003c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c58:	4b02      	ldr	r3, [pc, #8]	; (8003c64 <HAL_RCC_GetHCLKFreq+0x10>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bc80      	pop	{r7}
 8003c62:	4770      	bx	lr
 8003c64:	20000004 	.word	0x20000004

08003c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c6c:	f7ff fff2 	bl	8003c54 <HAL_RCC_GetHCLKFreq>
 8003c70:	4602      	mov	r2, r0
 8003c72:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	0adb      	lsrs	r3, r3, #11
 8003c78:	f003 0307 	and.w	r3, r3, #7
 8003c7c:	4903      	ldr	r1, [pc, #12]	; (8003c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c7e:	5ccb      	ldrb	r3, [r1, r3]
 8003c80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	0800996c 	.word	0x0800996c

08003c90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003c98:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <RCC_Delay+0x34>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	; (8003cc8 <RCC_Delay+0x38>)
 8003c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca2:	0a5b      	lsrs	r3, r3, #9
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	fb02 f303 	mul.w	r3, r2, r3
 8003caa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003cac:	bf00      	nop
  }
  while (Delay --);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	1e5a      	subs	r2, r3, #1
 8003cb2:	60fa      	str	r2, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d1f9      	bne.n	8003cac <RCC_Delay+0x1c>
}
 8003cb8:	bf00      	nop
 8003cba:	bf00      	nop
 8003cbc:	3714      	adds	r7, #20
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bc80      	pop	{r7}
 8003cc2:	4770      	bx	lr
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	10624dd3 	.word	0x10624dd3

08003ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b086      	sub	sp, #24
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	613b      	str	r3, [r7, #16]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d07d      	beq.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cec:	4b4f      	ldr	r3, [pc, #316]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cee:	69db      	ldr	r3, [r3, #28]
 8003cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d10d      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	4a4b      	ldr	r2, [pc, #300]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d02:	61d3      	str	r3, [r2, #28]
 8003d04:	4b49      	ldr	r3, [pc, #292]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	69db      	ldr	r3, [r3, #28]
 8003d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d10:	2301      	movs	r3, #1
 8003d12:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d14:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d118      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d20:	4b43      	ldr	r3, [pc, #268]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a42      	ldr	r2, [pc, #264]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d2c:	f7fe fa94 	bl	8002258 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d32:	e008      	b.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d34:	f7fe fa90 	bl	8002258 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	2b64      	cmp	r3, #100	; 0x64
 8003d40:	d901      	bls.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003d42:	2303      	movs	r3, #3
 8003d44:	e06d      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d46:	4b3a      	ldr	r3, [pc, #232]	; (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d0f0      	beq.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d52:	4b36      	ldr	r3, [pc, #216]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d54:	6a1b      	ldr	r3, [r3, #32]
 8003d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d5a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d02e      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d6a:	68fa      	ldr	r2, [r7, #12]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d027      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d70:	4b2e      	ldr	r3, [pc, #184]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d78:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d7a:	4b2e      	ldr	r3, [pc, #184]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d80:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003d82:	2200      	movs	r2, #0
 8003d84:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003d86:	4a29      	ldr	r2, [pc, #164]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d014      	beq.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d96:	f7fe fa5f 	bl	8002258 <HAL_GetTick>
 8003d9a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d9c:	e00a      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d9e:	f7fe fa5b 	bl	8002258 <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e036      	b.n	8003e22 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003db4:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0ee      	beq.n	8003d9e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003dc0:	4b1a      	ldr	r3, [pc, #104]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dc2:	6a1b      	ldr	r3, [r3, #32]
 8003dc4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4917      	ldr	r1, [pc, #92]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003dd2:	7dfb      	ldrb	r3, [r7, #23]
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d105      	bne.n	8003de4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dd8:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dda:	69db      	ldr	r3, [r3, #28]
 8003ddc:	4a13      	ldr	r2, [pc, #76]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003de2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f003 0302 	and.w	r3, r3, #2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d008      	beq.n	8003e02 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003df0:	4b0e      	ldr	r3, [pc, #56]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	490b      	ldr	r1, [pc, #44]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d008      	beq.n	8003e20 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003e0e:	4b07      	ldr	r3, [pc, #28]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	4904      	ldr	r1, [pc, #16]	; (8003e2c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
 8003e2a:	bf00      	nop
 8003e2c:	40021000 	.word	0x40021000
 8003e30:	40007000 	.word	0x40007000
 8003e34:	42420440 	.word	0x42420440

08003e38 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003e40:	2300      	movs	r3, #0
 8003e42:	617b      	str	r3, [r7, #20]
 8003e44:	2300      	movs	r3, #0
 8003e46:	61fb      	str	r3, [r7, #28]
 8003e48:	2300      	movs	r3, #0
 8003e4a:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	2300      	movs	r3, #0
 8003e52:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2b10      	cmp	r3, #16
 8003e58:	d00a      	beq.n	8003e70 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b10      	cmp	r3, #16
 8003e5e:	f200 808a 	bhi.w	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d045      	beq.n	8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d075      	beq.n	8003f5a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003e6e:	e082      	b.n	8003f76 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003e70:	4b46      	ldr	r3, [pc, #280]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003e76:	4b45      	ldr	r3, [pc, #276]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d07b      	beq.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	0c9b      	lsrs	r3, r3, #18
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	4a41      	ldr	r2, [pc, #260]	; (8003f90 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003e8c:	5cd3      	ldrb	r3, [r2, r3]
 8003e8e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d015      	beq.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e9a:	4b3c      	ldr	r3, [pc, #240]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	0c5b      	lsrs	r3, r3, #17
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	4a3b      	ldr	r2, [pc, #236]	; (8003f94 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003ea6:	5cd3      	ldrb	r3, [r2, r3]
 8003ea8:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00d      	beq.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003eb4:	4a38      	ldr	r2, [pc, #224]	; (8003f98 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	fb02 f303 	mul.w	r3, r2, r3
 8003ec2:	61fb      	str	r3, [r7, #28]
 8003ec4:	e004      	b.n	8003ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ec6:	693b      	ldr	r3, [r7, #16]
 8003ec8:	4a34      	ldr	r2, [pc, #208]	; (8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003eca:	fb02 f303 	mul.w	r3, r2, r3
 8003ece:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003ed0:	4b2e      	ldr	r3, [pc, #184]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003edc:	d102      	bne.n	8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003ede:	69fb      	ldr	r3, [r7, #28]
 8003ee0:	61bb      	str	r3, [r7, #24]
      break;
 8003ee2:	e04a      	b.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003ee4:	69fb      	ldr	r3, [r7, #28]
 8003ee6:	005b      	lsls	r3, r3, #1
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	; (8003fa0 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003eea:	fba2 2303 	umull	r2, r3, r2, r3
 8003eee:	085b      	lsrs	r3, r3, #1
 8003ef0:	61bb      	str	r3, [r7, #24]
      break;
 8003ef2:	e042      	b.n	8003f7a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003ef4:	4b25      	ldr	r3, [pc, #148]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f00:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f04:	d108      	bne.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003f10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f14:	61bb      	str	r3, [r7, #24]
 8003f16:	e01f      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f22:	d109      	bne.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003f24:	4b19      	ldr	r3, [pc, #100]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 0302 	and.w	r3, r3, #2
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d003      	beq.n	8003f38 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003f30:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	e00f      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f42:	d11c      	bne.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f44:	4b11      	ldr	r3, [pc, #68]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d016      	beq.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003f50:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003f54:	61bb      	str	r3, [r7, #24]
      break;
 8003f56:	e012      	b.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003f58:	e011      	b.n	8003f7e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003f5a:	f7ff fe85 	bl	8003c68 <HAL_RCC_GetPCLK2Freq>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	4b0a      	ldr	r3, [pc, #40]	; (8003f8c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	0b9b      	lsrs	r3, r3, #14
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	61bb      	str	r3, [r7, #24]
      break;
 8003f74:	e004      	b.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f76:	bf00      	nop
 8003f78:	e002      	b.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f7a:	bf00      	nop
 8003f7c:	e000      	b.n	8003f80 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003f7e:	bf00      	nop
    }
  }
  return (frequency);
 8003f80:	69bb      	ldr	r3, [r7, #24]
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	40021000 	.word	0x40021000
 8003f90:	08009988 	.word	0x08009988
 8003f94:	08009998 	.word	0x08009998
 8003f98:	007a1200 	.word	0x007a1200
 8003f9c:	003d0900 	.word	0x003d0900
 8003fa0:	aaaaaaab 	.word	0xaaaaaaab

08003fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e041      	b.n	800403a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d106      	bne.n	8003fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f7fd fef8 	bl	8001dc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	3304      	adds	r3, #4
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4610      	mov	r0, r2
 8003fe4:	f000 fcc4 	bl	8004970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2201      	movs	r2, #1
 8003ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2201      	movs	r2, #1
 8004004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2201      	movs	r2, #1
 8004014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2201      	movs	r2, #1
 800401c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004038:	2300      	movs	r3, #0
}
 800403a:	4618      	mov	r0, r3
 800403c:	3708      	adds	r7, #8
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
	...

08004044 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b01      	cmp	r3, #1
 8004056:	d001      	beq.n	800405c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e032      	b.n	80040c2 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a18      	ldr	r2, [pc, #96]	; (80040cc <HAL_TIM_Base_Start+0x88>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00e      	beq.n	800408c <HAL_TIM_Base_Start+0x48>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004076:	d009      	beq.n	800408c <HAL_TIM_Base_Start+0x48>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a14      	ldr	r2, [pc, #80]	; (80040d0 <HAL_TIM_Base_Start+0x8c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d004      	beq.n	800408c <HAL_TIM_Base_Start+0x48>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a13      	ldr	r2, [pc, #76]	; (80040d4 <HAL_TIM_Base_Start+0x90>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d111      	bne.n	80040b0 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b06      	cmp	r3, #6
 800409c:	d010      	beq.n	80040c0 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f042 0201 	orr.w	r2, r2, #1
 80040ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ae:	e007      	b.n	80040c0 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f042 0201 	orr.w	r2, r2, #1
 80040be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bc80      	pop	{r7}
 80040ca:	4770      	bx	lr
 80040cc:	40012c00 	.word	0x40012c00
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800

080040d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d001      	beq.n	80040f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e03a      	b.n	8004166 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2202      	movs	r2, #2
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68da      	ldr	r2, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0201 	orr.w	r2, r2, #1
 8004106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a18      	ldr	r2, [pc, #96]	; (8004170 <HAL_TIM_Base_Start_IT+0x98>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d00e      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0x58>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800411a:	d009      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0x58>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a14      	ldr	r2, [pc, #80]	; (8004174 <HAL_TIM_Base_Start_IT+0x9c>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d004      	beq.n	8004130 <HAL_TIM_Base_Start_IT+0x58>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <HAL_TIM_Base_Start_IT+0xa0>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d111      	bne.n	8004154 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f003 0307 	and.w	r3, r3, #7
 800413a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b06      	cmp	r3, #6
 8004140:	d010      	beq.n	8004164 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f042 0201 	orr.w	r2, r2, #1
 8004150:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004152:	e007      	b.n	8004164 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f042 0201 	orr.w	r2, r2, #1
 8004162:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3714      	adds	r7, #20
 800416a:	46bd      	mov	sp, r7
 800416c:	bc80      	pop	{r7}
 800416e:	4770      	bx	lr
 8004170:	40012c00 	.word	0x40012c00
 8004174:	40000400 	.word	0x40000400
 8004178:	40000800 	.word	0x40000800

0800417c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d101      	bne.n	800418e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e041      	b.n	8004212 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004194:	b2db      	uxtb	r3, r3
 8004196:	2b00      	cmp	r3, #0
 8004198:	d106      	bne.n	80041a8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80041a2:	6878      	ldr	r0, [r7, #4]
 80041a4:	f000 f839 	bl	800421a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	3304      	adds	r3, #4
 80041b8:	4619      	mov	r1, r3
 80041ba:	4610      	mov	r0, r2
 80041bc:	f000 fbd8 	bl	8004970 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2201      	movs	r2, #1
 80041fc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2201      	movs	r2, #1
 8004204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2201      	movs	r2, #1
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3708      	adds	r7, #8
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}

0800421a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800421a:	b480      	push	{r7}
 800421c:	b083      	sub	sp, #12
 800421e:	af00      	add	r7, sp, #0
 8004220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	bc80      	pop	{r7}
 800422a:	4770      	bx	lr

0800422c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d109      	bne.n	8004250 <HAL_TIM_PWM_Start+0x24>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b01      	cmp	r3, #1
 8004246:	bf14      	ite	ne
 8004248:	2301      	movne	r3, #1
 800424a:	2300      	moveq	r3, #0
 800424c:	b2db      	uxtb	r3, r3
 800424e:	e022      	b.n	8004296 <HAL_TIM_PWM_Start+0x6a>
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	2b04      	cmp	r3, #4
 8004254:	d109      	bne.n	800426a <HAL_TIM_PWM_Start+0x3e>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800425c:	b2db      	uxtb	r3, r3
 800425e:	2b01      	cmp	r3, #1
 8004260:	bf14      	ite	ne
 8004262:	2301      	movne	r3, #1
 8004264:	2300      	moveq	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e015      	b.n	8004296 <HAL_TIM_PWM_Start+0x6a>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	2b08      	cmp	r3, #8
 800426e:	d109      	bne.n	8004284 <HAL_TIM_PWM_Start+0x58>
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004276:	b2db      	uxtb	r3, r3
 8004278:	2b01      	cmp	r3, #1
 800427a:	bf14      	ite	ne
 800427c:	2301      	movne	r3, #1
 800427e:	2300      	moveq	r3, #0
 8004280:	b2db      	uxtb	r3, r3
 8004282:	e008      	b.n	8004296 <HAL_TIM_PWM_Start+0x6a>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800428a:	b2db      	uxtb	r3, r3
 800428c:	2b01      	cmp	r3, #1
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e05e      	b.n	800435c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d104      	bne.n	80042ae <HAL_TIM_PWM_Start+0x82>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042ac:	e013      	b.n	80042d6 <HAL_TIM_PWM_Start+0xaa>
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2b04      	cmp	r3, #4
 80042b2:	d104      	bne.n	80042be <HAL_TIM_PWM_Start+0x92>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2202      	movs	r2, #2
 80042b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042bc:	e00b      	b.n	80042d6 <HAL_TIM_PWM_Start+0xaa>
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d104      	bne.n	80042ce <HAL_TIM_PWM_Start+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2202      	movs	r2, #2
 80042c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042cc:	e003      	b.n	80042d6 <HAL_TIM_PWM_Start+0xaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2202      	movs	r2, #2
 80042d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2201      	movs	r2, #1
 80042dc:	6839      	ldr	r1, [r7, #0]
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 fe57 	bl	8004f92 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a1e      	ldr	r2, [pc, #120]	; (8004364 <HAL_TIM_PWM_Start+0x138>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d107      	bne.n	80042fe <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a18      	ldr	r2, [pc, #96]	; (8004364 <HAL_TIM_PWM_Start+0x138>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00e      	beq.n	8004326 <HAL_TIM_PWM_Start+0xfa>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004310:	d009      	beq.n	8004326 <HAL_TIM_PWM_Start+0xfa>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a14      	ldr	r2, [pc, #80]	; (8004368 <HAL_TIM_PWM_Start+0x13c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d004      	beq.n	8004326 <HAL_TIM_PWM_Start+0xfa>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a12      	ldr	r2, [pc, #72]	; (800436c <HAL_TIM_PWM_Start+0x140>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d111      	bne.n	800434a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	2b06      	cmp	r3, #6
 8004336:	d010      	beq.n	800435a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f042 0201 	orr.w	r2, r2, #1
 8004346:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004348:	e007      	b.n	800435a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f042 0201 	orr.w	r2, r2, #1
 8004358:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800435a:	2300      	movs	r3, #0
}
 800435c:	4618      	mov	r0, r3
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}
 8004364:	40012c00 	.word	0x40012c00
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800

08004370 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b02      	cmp	r3, #2
 8004384:	d122      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d11b      	bne.n	80043cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f06f 0202 	mvn.w	r2, #2
 800439c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	f003 0303 	and.w	r3, r3, #3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d003      	beq.n	80043ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 fac1 	bl	800493a <HAL_TIM_IC_CaptureCallback>
 80043b8:	e005      	b.n	80043c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80043ba:	6878      	ldr	r0, [r7, #4]
 80043bc:	f000 fab4 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043c0:	6878      	ldr	r0, [r7, #4]
 80043c2:	f000 fac3 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	f003 0304 	and.w	r3, r3, #4
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d122      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f003 0304 	and.w	r3, r3, #4
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	d11b      	bne.n	8004420 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f06f 0204 	mvn.w	r2, #4
 80043f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2202      	movs	r2, #2
 80043f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	699b      	ldr	r3, [r3, #24]
 80043fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fa97 	bl	800493a <HAL_TIM_IC_CaptureCallback>
 800440c:	e005      	b.n	800441a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fa8a 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f000 fa99 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	d122      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b08      	cmp	r3, #8
 800443a:	d11b      	bne.n	8004474 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f06f 0208 	mvn.w	r2, #8
 8004444:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2204      	movs	r2, #4
 800444a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	69db      	ldr	r3, [r3, #28]
 8004452:	f003 0303 	and.w	r3, r3, #3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d003      	beq.n	8004462 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800445a:	6878      	ldr	r0, [r7, #4]
 800445c:	f000 fa6d 	bl	800493a <HAL_TIM_IC_CaptureCallback>
 8004460:	e005      	b.n	800446e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f000 fa60 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004468:	6878      	ldr	r0, [r7, #4]
 800446a:	f000 fa6f 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	f003 0310 	and.w	r3, r3, #16
 800447e:	2b10      	cmp	r3, #16
 8004480:	d122      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	f003 0310 	and.w	r3, r3, #16
 800448c:	2b10      	cmp	r3, #16
 800448e:	d11b      	bne.n	80044c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f06f 0210 	mvn.w	r2, #16
 8004498:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2208      	movs	r2, #8
 800449e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	69db      	ldr	r3, [r3, #28]
 80044a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d003      	beq.n	80044b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fa43 	bl	800493a <HAL_TIM_IC_CaptureCallback>
 80044b4:	e005      	b.n	80044c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fa36 	bl	8004928 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f000 fa45 	bl	800494c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	691b      	ldr	r3, [r3, #16]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d10e      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68db      	ldr	r3, [r3, #12]
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d107      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f06f 0201 	mvn.w	r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 fa11 	bl	8004916 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044fe:	2b80      	cmp	r3, #128	; 0x80
 8004500:	d10e      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b80      	cmp	r3, #128	; 0x80
 800450e:	d107      	bne.n	8004520 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004518:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 fe16 	bl	800514c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	691b      	ldr	r3, [r3, #16]
 8004526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800452a:	2b40      	cmp	r3, #64	; 0x40
 800452c:	d10e      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004538:	2b40      	cmp	r3, #64	; 0x40
 800453a:	d107      	bne.n	800454c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 fa09 	bl	800495e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	f003 0320 	and.w	r3, r3, #32
 8004556:	2b20      	cmp	r3, #32
 8004558:	d10e      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	f003 0320 	and.w	r3, r3, #32
 8004564:	2b20      	cmp	r3, #32
 8004566:	d107      	bne.n	8004578 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f06f 0220 	mvn.w	r2, #32
 8004570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fde1 	bl	800513a <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004578:	bf00      	nop
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800458c:	2300      	movs	r3, #0
 800458e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004596:	2b01      	cmp	r3, #1
 8004598:	d101      	bne.n	800459e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800459a:	2302      	movs	r3, #2
 800459c:	e0ae      	b.n	80046fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	f200 809f 	bhi.w	80046ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045e9 	.word	0x080045e9
 80045b8:	080046ed 	.word	0x080046ed
 80045bc:	080046ed 	.word	0x080046ed
 80045c0:	080046ed 	.word	0x080046ed
 80045c4:	08004629 	.word	0x08004629
 80045c8:	080046ed 	.word	0x080046ed
 80045cc:	080046ed 	.word	0x080046ed
 80045d0:	080046ed 	.word	0x080046ed
 80045d4:	0800466b 	.word	0x0800466b
 80045d8:	080046ed 	.word	0x080046ed
 80045dc:	080046ed 	.word	0x080046ed
 80045e0:	080046ed 	.word	0x080046ed
 80045e4:	080046ab 	.word	0x080046ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	68b9      	ldr	r1, [r7, #8]
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 fa20 	bl	8004a34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699a      	ldr	r2, [r3, #24]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f042 0208 	orr.w	r2, r2, #8
 8004602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0204 	bic.w	r2, r2, #4
 8004612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6999      	ldr	r1, [r3, #24]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	691a      	ldr	r2, [r3, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	430a      	orrs	r2, r1
 8004624:	619a      	str	r2, [r3, #24]
      break;
 8004626:	e064      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68b9      	ldr	r1, [r7, #8]
 800462e:	4618      	mov	r0, r3
 8004630:	f000 fa66 	bl	8004b00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6999      	ldr	r1, [r3, #24]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	021a      	lsls	r2, r3, #8
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	430a      	orrs	r2, r1
 8004666:	619a      	str	r2, [r3, #24]
      break;
 8004668:	e043      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	68b9      	ldr	r1, [r7, #8]
 8004670:	4618      	mov	r0, r3
 8004672:	f000 faaf 	bl	8004bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	69da      	ldr	r2, [r3, #28]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f042 0208 	orr.w	r2, r2, #8
 8004684:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	69da      	ldr	r2, [r3, #28]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f022 0204 	bic.w	r2, r2, #4
 8004694:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	69d9      	ldr	r1, [r3, #28]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	430a      	orrs	r2, r1
 80046a6:	61da      	str	r2, [r3, #28]
      break;
 80046a8:	e023      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68b9      	ldr	r1, [r7, #8]
 80046b0:	4618      	mov	r0, r3
 80046b2:	f000 faf9 	bl	8004ca8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	69da      	ldr	r2, [r3, #28]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	69da      	ldr	r2, [r3, #28]
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	69d9      	ldr	r1, [r3, #28]
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	021a      	lsls	r2, r3, #8
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	61da      	str	r2, [r3, #28]
      break;
 80046ea:	e002      	b.n	80046f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	75fb      	strb	r3, [r7, #23]
      break;
 80046f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3718      	adds	r7, #24
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b084      	sub	sp, #16
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800470e:	2300      	movs	r3, #0
 8004710:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_TIM_ConfigClockSource+0x1c>
 800471c:	2302      	movs	r3, #2
 800471e:	e0b4      	b.n	800488a <HAL_TIM_ConfigClockSource+0x186>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2202      	movs	r2, #2
 800472c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800473e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004746:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004758:	d03e      	beq.n	80047d8 <HAL_TIM_ConfigClockSource+0xd4>
 800475a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800475e:	f200 8087 	bhi.w	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004766:	f000 8086 	beq.w	8004876 <HAL_TIM_ConfigClockSource+0x172>
 800476a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800476e:	d87f      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004770:	2b70      	cmp	r3, #112	; 0x70
 8004772:	d01a      	beq.n	80047aa <HAL_TIM_ConfigClockSource+0xa6>
 8004774:	2b70      	cmp	r3, #112	; 0x70
 8004776:	d87b      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004778:	2b60      	cmp	r3, #96	; 0x60
 800477a:	d050      	beq.n	800481e <HAL_TIM_ConfigClockSource+0x11a>
 800477c:	2b60      	cmp	r3, #96	; 0x60
 800477e:	d877      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004780:	2b50      	cmp	r3, #80	; 0x50
 8004782:	d03c      	beq.n	80047fe <HAL_TIM_ConfigClockSource+0xfa>
 8004784:	2b50      	cmp	r3, #80	; 0x50
 8004786:	d873      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004788:	2b40      	cmp	r3, #64	; 0x40
 800478a:	d058      	beq.n	800483e <HAL_TIM_ConfigClockSource+0x13a>
 800478c:	2b40      	cmp	r3, #64	; 0x40
 800478e:	d86f      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004790:	2b30      	cmp	r3, #48	; 0x30
 8004792:	d064      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x15a>
 8004794:	2b30      	cmp	r3, #48	; 0x30
 8004796:	d86b      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 8004798:	2b20      	cmp	r3, #32
 800479a:	d060      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x15a>
 800479c:	2b20      	cmp	r3, #32
 800479e:	d867      	bhi.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d05c      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x15a>
 80047a4:	2b10      	cmp	r3, #16
 80047a6:	d05a      	beq.n	800485e <HAL_TIM_ConfigClockSource+0x15a>
 80047a8:	e062      	b.n	8004870 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047b2:	683b      	ldr	r3, [r7, #0]
 80047b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047ba:	f000 fbcb 	bl	8004f54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80047cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68ba      	ldr	r2, [r7, #8]
 80047d4:	609a      	str	r2, [r3, #8]
      break;
 80047d6:	e04f      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80047e8:	f000 fbb4 	bl	8004f54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	689a      	ldr	r2, [r3, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80047fa:	609a      	str	r2, [r3, #8]
      break;
 80047fc:	e03c      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800480a:	461a      	mov	r2, r3
 800480c:	f000 fb2b 	bl	8004e66 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2150      	movs	r1, #80	; 0x50
 8004816:	4618      	mov	r0, r3
 8004818:	f000 fb82 	bl	8004f20 <TIM_ITRx_SetConfig>
      break;
 800481c:	e02c      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800482a:	461a      	mov	r2, r3
 800482c:	f000 fb49 	bl	8004ec2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	2160      	movs	r1, #96	; 0x60
 8004836:	4618      	mov	r0, r3
 8004838:	f000 fb72 	bl	8004f20 <TIM_ITRx_SetConfig>
      break;
 800483c:	e01c      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800484a:	461a      	mov	r2, r3
 800484c:	f000 fb0b 	bl	8004e66 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2140      	movs	r1, #64	; 0x40
 8004856:	4618      	mov	r0, r3
 8004858:	f000 fb62 	bl	8004f20 <TIM_ITRx_SetConfig>
      break;
 800485c:	e00c      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	683b      	ldr	r3, [r7, #0]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4619      	mov	r1, r3
 8004868:	4610      	mov	r0, r2
 800486a:	f000 fb59 	bl	8004f20 <TIM_ITRx_SetConfig>
      break;
 800486e:	e003      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
      break;
 8004874:	e000      	b.n	8004878 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004876:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2201      	movs	r2, #1
 800487c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004888:	7bfb      	ldrb	r3, [r7, #15]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d101      	bne.n	80048aa <HAL_TIM_SlaveConfigSynchro+0x18>
 80048a6:	2302      	movs	r3, #2
 80048a8:	e031      	b.n	800490e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2202      	movs	r2, #2
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80048ba:	6839      	ldr	r1, [r7, #0]
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fa41 	bl	8004d44 <TIM_SlaveTimer_SetConfig>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d009      	beq.n	80048dc <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2201      	movs	r2, #1
 80048cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e018      	b.n	800490e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048ea:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048fa:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}

08004916 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004916:	b480      	push	{r7}
 8004918:	b083      	sub	sp, #12
 800491a:	af00      	add	r7, sp, #0
 800491c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	bc80      	pop	{r7}
 8004926:	4770      	bx	lr

08004928 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004928:	b480      	push	{r7}
 800492a:	b083      	sub	sp, #12
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004930:	bf00      	nop
 8004932:	370c      	adds	r7, #12
 8004934:	46bd      	mov	sp, r7
 8004936:	bc80      	pop	{r7}
 8004938:	4770      	bx	lr

0800493a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	bc80      	pop	{r7}
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	bc80      	pop	{r7}
 800495c:	4770      	bx	lr

0800495e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800495e:	b480      	push	{r7}
 8004960:	b083      	sub	sp, #12
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	bc80      	pop	{r7}
 800496e:	4770      	bx	lr

08004970 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a29      	ldr	r2, [pc, #164]	; (8004a28 <TIM_Base_SetConfig+0xb8>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x30>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x30>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a26      	ldr	r2, [pc, #152]	; (8004a2c <TIM_Base_SetConfig+0xbc>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x30>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a25      	ldr	r2, [pc, #148]	; (8004a30 <TIM_Base_SetConfig+0xc0>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a1c      	ldr	r2, [pc, #112]	; (8004a28 <TIM_Base_SetConfig+0xb8>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d00b      	beq.n	80049d2 <TIM_Base_SetConfig+0x62>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d007      	beq.n	80049d2 <TIM_Base_SetConfig+0x62>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a19      	ldr	r2, [pc, #100]	; (8004a2c <TIM_Base_SetConfig+0xbc>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d003      	beq.n	80049d2 <TIM_Base_SetConfig+0x62>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a18      	ldr	r2, [pc, #96]	; (8004a30 <TIM_Base_SetConfig+0xc0>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d108      	bne.n	80049e4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	68db      	ldr	r3, [r3, #12]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	4313      	orrs	r3, r2
 80049f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	689a      	ldr	r2, [r3, #8]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a07      	ldr	r2, [pc, #28]	; (8004a28 <TIM_Base_SetConfig+0xb8>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d103      	bne.n	8004a18 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	615a      	str	r2, [r3, #20]
}
 8004a1e:	bf00      	nop
 8004a20:	3714      	adds	r7, #20
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bc80      	pop	{r7}
 8004a26:	4770      	bx	lr
 8004a28:	40012c00 	.word	0x40012c00
 8004a2c:	40000400 	.word	0x40000400
 8004a30:	40000800 	.word	0x40000800

08004a34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b087      	sub	sp, #28
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a1b      	ldr	r3, [r3, #32]
 8004a48:	f023 0201 	bic.w	r2, r3, #1
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	699b      	ldr	r3, [r3, #24]
 8004a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f023 0303 	bic.w	r3, r3, #3
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	68fa      	ldr	r2, [r7, #12]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	f023 0302 	bic.w	r3, r3, #2
 8004a7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	697a      	ldr	r2, [r7, #20]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	4a1c      	ldr	r2, [pc, #112]	; (8004afc <TIM_OC1_SetConfig+0xc8>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d10c      	bne.n	8004aaa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f023 0308 	bic.w	r3, r3, #8
 8004a96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f023 0304 	bic.w	r3, r3, #4
 8004aa8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <TIM_OC1_SetConfig+0xc8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d111      	bne.n	8004ad6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004ab2:	693b      	ldr	r3, [r7, #16]
 8004ab4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ab8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68fa      	ldr	r2, [r7, #12]
 8004ae0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	621a      	str	r2, [r3, #32]
}
 8004af0:	bf00      	nop
 8004af2:	371c      	adds	r7, #28
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bc80      	pop	{r7}
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40012c00 	.word	0x40012c00

08004b00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b087      	sub	sp, #28
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6a1b      	ldr	r3, [r3, #32]
 8004b14:	f023 0210 	bic.w	r2, r3, #16
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	021b      	lsls	r3, r3, #8
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f023 0320 	bic.w	r3, r3, #32
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	4313      	orrs	r3, r2
 8004b56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	4a1d      	ldr	r2, [pc, #116]	; (8004bd0 <TIM_OC2_SetConfig+0xd0>)
 8004b5c:	4293      	cmp	r3, r2
 8004b5e:	d10d      	bne.n	8004b7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	68db      	ldr	r3, [r3, #12]
 8004b6c:	011b      	lsls	r3, r3, #4
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4313      	orrs	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a14      	ldr	r2, [pc, #80]	; (8004bd0 <TIM_OC2_SetConfig+0xd0>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d113      	bne.n	8004bac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bc80      	pop	{r7}
 8004bce:	4770      	bx	lr
 8004bd0:	40012c00 	.word	0x40012c00

08004bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b087      	sub	sp, #28
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a1b      	ldr	r3, [r3, #32]
 8004be2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a1b      	ldr	r3, [r3, #32]
 8004be8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	69db      	ldr	r3, [r3, #28]
 8004bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0303 	bic.w	r3, r3, #3
 8004c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	4313      	orrs	r3, r2
 8004c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	021b      	lsls	r3, r3, #8
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	4313      	orrs	r3, r2
 8004c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a1d      	ldr	r2, [pc, #116]	; (8004ca4 <TIM_OC3_SetConfig+0xd0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d10d      	bne.n	8004c4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	68db      	ldr	r3, [r3, #12]
 8004c3e:	021b      	lsls	r3, r3, #8
 8004c40:	697a      	ldr	r2, [r7, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	4a14      	ldr	r2, [pc, #80]	; (8004ca4 <TIM_OC3_SetConfig+0xd0>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d113      	bne.n	8004c7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	695b      	ldr	r3, [r3, #20]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	693a      	ldr	r2, [r7, #16]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	011b      	lsls	r3, r3, #4
 8004c78:	693a      	ldr	r2, [r7, #16]
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	685a      	ldr	r2, [r3, #4]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	697a      	ldr	r2, [r7, #20]
 8004c96:	621a      	str	r2, [r3, #32]
}
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bc80      	pop	{r7}
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40012c00 	.word	0x40012c00

08004ca8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a1b      	ldr	r3, [r3, #32]
 8004cb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a1b      	ldr	r3, [r3, #32]
 8004cbc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	021b      	lsls	r3, r3, #8
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004cf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	031b      	lsls	r3, r3, #12
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a0f      	ldr	r2, [pc, #60]	; (8004d40 <TIM_OC4_SetConfig+0x98>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d109      	bne.n	8004d1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	695b      	ldr	r3, [r3, #20]
 8004d14:	019b      	lsls	r3, r3, #6
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	693a      	ldr	r2, [r7, #16]
 8004d34:	621a      	str	r2, [r3, #32]
}
 8004d36:	bf00      	nop
 8004d38:	371c      	adds	r7, #28
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bc80      	pop	{r7}
 8004d3e:	4770      	bx	lr
 8004d40:	40012c00 	.word	0x40012c00

08004d44 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d4e:	2300      	movs	r3, #0
 8004d50:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d5a:	693b      	ldr	r3, [r7, #16]
 8004d5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d60:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	693a      	ldr	r2, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f023 0307 	bic.w	r3, r3, #7
 8004d72:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	2b70      	cmp	r3, #112	; 0x70
 8004d8c:	d01a      	beq.n	8004dc4 <TIM_SlaveTimer_SetConfig+0x80>
 8004d8e:	2b70      	cmp	r3, #112	; 0x70
 8004d90:	d860      	bhi.n	8004e54 <TIM_SlaveTimer_SetConfig+0x110>
 8004d92:	2b60      	cmp	r3, #96	; 0x60
 8004d94:	d054      	beq.n	8004e40 <TIM_SlaveTimer_SetConfig+0xfc>
 8004d96:	2b60      	cmp	r3, #96	; 0x60
 8004d98:	d85c      	bhi.n	8004e54 <TIM_SlaveTimer_SetConfig+0x110>
 8004d9a:	2b50      	cmp	r3, #80	; 0x50
 8004d9c:	d046      	beq.n	8004e2c <TIM_SlaveTimer_SetConfig+0xe8>
 8004d9e:	2b50      	cmp	r3, #80	; 0x50
 8004da0:	d858      	bhi.n	8004e54 <TIM_SlaveTimer_SetConfig+0x110>
 8004da2:	2b40      	cmp	r3, #64	; 0x40
 8004da4:	d019      	beq.n	8004dda <TIM_SlaveTimer_SetConfig+0x96>
 8004da6:	2b40      	cmp	r3, #64	; 0x40
 8004da8:	d854      	bhi.n	8004e54 <TIM_SlaveTimer_SetConfig+0x110>
 8004daa:	2b30      	cmp	r3, #48	; 0x30
 8004dac:	d055      	beq.n	8004e5a <TIM_SlaveTimer_SetConfig+0x116>
 8004dae:	2b30      	cmp	r3, #48	; 0x30
 8004db0:	d850      	bhi.n	8004e54 <TIM_SlaveTimer_SetConfig+0x110>
 8004db2:	2b20      	cmp	r3, #32
 8004db4:	d051      	beq.n	8004e5a <TIM_SlaveTimer_SetConfig+0x116>
 8004db6:	2b20      	cmp	r3, #32
 8004db8:	d84c      	bhi.n	8004e54 <TIM_SlaveTimer_SetConfig+0x110>
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d04d      	beq.n	8004e5a <TIM_SlaveTimer_SetConfig+0x116>
 8004dbe:	2b10      	cmp	r3, #16
 8004dc0:	d04b      	beq.n	8004e5a <TIM_SlaveTimer_SetConfig+0x116>
 8004dc2:	e047      	b.n	8004e54 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8004dd4:	f000 f8be 	bl	8004f54 <TIM_ETR_SetConfig>
      break;
 8004dd8:	e040      	b.n	8004e5c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	2b05      	cmp	r3, #5
 8004de0:	d101      	bne.n	8004de6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e03b      	b.n	8004e5e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	6a1a      	ldr	r2, [r3, #32]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 0201 	bic.w	r2, r2, #1
 8004dfc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e0c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	691b      	ldr	r3, [r3, #16]
 8004e12:	011b      	lsls	r3, r3, #4
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	621a      	str	r2, [r3, #32]
      break;
 8004e2a:	e017      	b.n	8004e5c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e38:	461a      	mov	r2, r3
 8004e3a:	f000 f814 	bl	8004e66 <TIM_TI1_ConfigInputStage>
      break;
 8004e3e:	e00d      	b.n	8004e5c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	f000 f838 	bl	8004ec2 <TIM_TI2_ConfigInputStage>
      break;
 8004e52:	e003      	b.n	8004e5c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	75fb      	strb	r3, [r7, #23]
      break;
 8004e58:	e000      	b.n	8004e5c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8004e5a:	bf00      	nop
  }

  return status;
 8004e5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}

08004e66 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b087      	sub	sp, #28
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	60f8      	str	r0, [r7, #12]
 8004e6e:	60b9      	str	r1, [r7, #8]
 8004e70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	6a1b      	ldr	r3, [r3, #32]
 8004e76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	f023 0201 	bic.w	r2, r3, #1
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	011b      	lsls	r3, r3, #4
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f023 030a 	bic.w	r3, r3, #10
 8004ea2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ea4:	697a      	ldr	r2, [r7, #20]
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	697a      	ldr	r2, [r7, #20]
 8004eb6:	621a      	str	r2, [r3, #32]
}
 8004eb8:	bf00      	nop
 8004eba:	371c      	adds	r7, #28
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bc80      	pop	{r7}
 8004ec0:	4770      	bx	lr

08004ec2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b087      	sub	sp, #28
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	60f8      	str	r0, [r7, #12]
 8004eca:	60b9      	str	r1, [r7, #8]
 8004ecc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	6a1b      	ldr	r3, [r3, #32]
 8004ed8:	f023 0210 	bic.w	r2, r3, #16
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004eec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	031b      	lsls	r3, r3, #12
 8004ef2:	693a      	ldr	r2, [r7, #16]
 8004ef4:	4313      	orrs	r3, r2
 8004ef6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004efe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	011b      	lsls	r3, r3, #4
 8004f04:	697a      	ldr	r2, [r7, #20]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	621a      	str	r2, [r3, #32]
}
 8004f16:	bf00      	nop
 8004f18:	371c      	adds	r7, #28
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bc80      	pop	{r7}
 8004f1e:	4770      	bx	lr

08004f20 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b085      	sub	sp, #20
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
 8004f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f36:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	f043 0307 	orr.w	r3, r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	609a      	str	r2, [r3, #8]
}
 8004f4a:	bf00      	nop
 8004f4c:	3714      	adds	r7, #20
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bc80      	pop	{r7}
 8004f52:	4770      	bx	lr

08004f54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
 8004f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	021a      	lsls	r2, r3, #8
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	431a      	orrs	r2, r3
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	697a      	ldr	r2, [r7, #20]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	697a      	ldr	r2, [r7, #20]
 8004f86:	609a      	str	r2, [r3, #8]
}
 8004f88:	bf00      	nop
 8004f8a:	371c      	adds	r7, #28
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr

08004f92 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f92:	b480      	push	{r7}
 8004f94:	b087      	sub	sp, #28
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	f003 031f 	and.w	r3, r3, #31
 8004fa4:	2201      	movs	r2, #1
 8004fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8004faa:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a1a      	ldr	r2, [r3, #32]
 8004fb0:	697b      	ldr	r3, [r7, #20]
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	401a      	ands	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	6879      	ldr	r1, [r7, #4]
 8004fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	621a      	str	r2, [r3, #32]
}
 8004fd0:	bf00      	nop
 8004fd2:	371c      	adds	r7, #28
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bc80      	pop	{r7}
 8004fd8:	4770      	bx	lr
	...

08004fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d101      	bne.n	8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ff0:	2302      	movs	r3, #2
 8004ff2:	e046      	b.n	8005082 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2202      	movs	r2, #2
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800501a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	4313      	orrs	r3, r2
 8005024:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a16      	ldr	r2, [pc, #88]	; (800508c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d00e      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005040:	d009      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	4a12      	ldr	r2, [pc, #72]	; (8005090 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d004      	beq.n	8005056 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a10      	ldr	r2, [pc, #64]	; (8005094 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10c      	bne.n	8005070 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800505c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	4313      	orrs	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2201      	movs	r2, #1
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3714      	adds	r7, #20
 8005086:	46bd      	mov	sp, r7
 8005088:	bc80      	pop	{r7}
 800508a:	4770      	bx	lr
 800508c:	40012c00 	.word	0x40012c00
 8005090:	40000400 	.word	0x40000400
 8005094:	40000800 	.word	0x40000800

08005098 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e03d      	b.n	8005130 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	689b      	ldr	r3, [r3, #8]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	69db      	ldr	r3, [r3, #28]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	bc80      	pop	{r7}
 8005138:	4770      	bx	lr

0800513a <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800513a:	b480      	push	{r7}
 800513c:	b083      	sub	sp, #12
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	bc80      	pop	{r7}
 800514a:	4770      	bx	lr

0800514c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	bc80      	pop	{r7}
 800515c:	4770      	bx	lr

0800515e <__cvt>:
 800515e:	2b00      	cmp	r3, #0
 8005160:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005164:	461f      	mov	r7, r3
 8005166:	bfbb      	ittet	lt
 8005168:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800516c:	461f      	movlt	r7, r3
 800516e:	2300      	movge	r3, #0
 8005170:	232d      	movlt	r3, #45	; 0x2d
 8005172:	b088      	sub	sp, #32
 8005174:	4614      	mov	r4, r2
 8005176:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005178:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800517a:	7013      	strb	r3, [r2, #0]
 800517c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800517e:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005182:	f023 0820 	bic.w	r8, r3, #32
 8005186:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800518a:	d005      	beq.n	8005198 <__cvt+0x3a>
 800518c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005190:	d100      	bne.n	8005194 <__cvt+0x36>
 8005192:	3501      	adds	r5, #1
 8005194:	2302      	movs	r3, #2
 8005196:	e000      	b.n	800519a <__cvt+0x3c>
 8005198:	2303      	movs	r3, #3
 800519a:	aa07      	add	r2, sp, #28
 800519c:	9204      	str	r2, [sp, #16]
 800519e:	aa06      	add	r2, sp, #24
 80051a0:	e9cd a202 	strd	sl, r2, [sp, #8]
 80051a4:	e9cd 3500 	strd	r3, r5, [sp]
 80051a8:	4622      	mov	r2, r4
 80051aa:	463b      	mov	r3, r7
 80051ac:	f001 f894 	bl	80062d8 <_dtoa_r>
 80051b0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80051b4:	4606      	mov	r6, r0
 80051b6:	d102      	bne.n	80051be <__cvt+0x60>
 80051b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051ba:	07db      	lsls	r3, r3, #31
 80051bc:	d522      	bpl.n	8005204 <__cvt+0xa6>
 80051be:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051c2:	eb06 0905 	add.w	r9, r6, r5
 80051c6:	d110      	bne.n	80051ea <__cvt+0x8c>
 80051c8:	7833      	ldrb	r3, [r6, #0]
 80051ca:	2b30      	cmp	r3, #48	; 0x30
 80051cc:	d10a      	bne.n	80051e4 <__cvt+0x86>
 80051ce:	2200      	movs	r2, #0
 80051d0:	2300      	movs	r3, #0
 80051d2:	4620      	mov	r0, r4
 80051d4:	4639      	mov	r1, r7
 80051d6:	f7fb fbe7 	bl	80009a8 <__aeabi_dcmpeq>
 80051da:	b918      	cbnz	r0, 80051e4 <__cvt+0x86>
 80051dc:	f1c5 0501 	rsb	r5, r5, #1
 80051e0:	f8ca 5000 	str.w	r5, [sl]
 80051e4:	f8da 3000 	ldr.w	r3, [sl]
 80051e8:	4499      	add	r9, r3
 80051ea:	2200      	movs	r2, #0
 80051ec:	2300      	movs	r3, #0
 80051ee:	4620      	mov	r0, r4
 80051f0:	4639      	mov	r1, r7
 80051f2:	f7fb fbd9 	bl	80009a8 <__aeabi_dcmpeq>
 80051f6:	b108      	cbz	r0, 80051fc <__cvt+0x9e>
 80051f8:	f8cd 901c 	str.w	r9, [sp, #28]
 80051fc:	2230      	movs	r2, #48	; 0x30
 80051fe:	9b07      	ldr	r3, [sp, #28]
 8005200:	454b      	cmp	r3, r9
 8005202:	d307      	bcc.n	8005214 <__cvt+0xb6>
 8005204:	4630      	mov	r0, r6
 8005206:	9b07      	ldr	r3, [sp, #28]
 8005208:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800520a:	1b9b      	subs	r3, r3, r6
 800520c:	6013      	str	r3, [r2, #0]
 800520e:	b008      	add	sp, #32
 8005210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005214:	1c59      	adds	r1, r3, #1
 8005216:	9107      	str	r1, [sp, #28]
 8005218:	701a      	strb	r2, [r3, #0]
 800521a:	e7f0      	b.n	80051fe <__cvt+0xa0>

0800521c <__exponent>:
 800521c:	4603      	mov	r3, r0
 800521e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005220:	2900      	cmp	r1, #0
 8005222:	f803 2b02 	strb.w	r2, [r3], #2
 8005226:	bfb6      	itet	lt
 8005228:	222d      	movlt	r2, #45	; 0x2d
 800522a:	222b      	movge	r2, #43	; 0x2b
 800522c:	4249      	neglt	r1, r1
 800522e:	2909      	cmp	r1, #9
 8005230:	7042      	strb	r2, [r0, #1]
 8005232:	dd2a      	ble.n	800528a <__exponent+0x6e>
 8005234:	f10d 0207 	add.w	r2, sp, #7
 8005238:	4617      	mov	r7, r2
 800523a:	260a      	movs	r6, #10
 800523c:	fb91 f5f6 	sdiv	r5, r1, r6
 8005240:	4694      	mov	ip, r2
 8005242:	fb06 1415 	mls	r4, r6, r5, r1
 8005246:	3430      	adds	r4, #48	; 0x30
 8005248:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800524c:	460c      	mov	r4, r1
 800524e:	2c63      	cmp	r4, #99	; 0x63
 8005250:	4629      	mov	r1, r5
 8005252:	f102 32ff 	add.w	r2, r2, #4294967295
 8005256:	dcf1      	bgt.n	800523c <__exponent+0x20>
 8005258:	3130      	adds	r1, #48	; 0x30
 800525a:	f1ac 0402 	sub.w	r4, ip, #2
 800525e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005262:	4622      	mov	r2, r4
 8005264:	1c41      	adds	r1, r0, #1
 8005266:	42ba      	cmp	r2, r7
 8005268:	d30a      	bcc.n	8005280 <__exponent+0x64>
 800526a:	f10d 0209 	add.w	r2, sp, #9
 800526e:	eba2 020c 	sub.w	r2, r2, ip
 8005272:	42bc      	cmp	r4, r7
 8005274:	bf88      	it	hi
 8005276:	2200      	movhi	r2, #0
 8005278:	4413      	add	r3, r2
 800527a:	1a18      	subs	r0, r3, r0
 800527c:	b003      	add	sp, #12
 800527e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005280:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005284:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005288:	e7ed      	b.n	8005266 <__exponent+0x4a>
 800528a:	2330      	movs	r3, #48	; 0x30
 800528c:	3130      	adds	r1, #48	; 0x30
 800528e:	7083      	strb	r3, [r0, #2]
 8005290:	70c1      	strb	r1, [r0, #3]
 8005292:	1d03      	adds	r3, r0, #4
 8005294:	e7f1      	b.n	800527a <__exponent+0x5e>
	...

08005298 <_printf_float>:
 8005298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800529c:	b091      	sub	sp, #68	; 0x44
 800529e:	460c      	mov	r4, r1
 80052a0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80052a4:	4616      	mov	r6, r2
 80052a6:	461f      	mov	r7, r3
 80052a8:	4605      	mov	r5, r0
 80052aa:	f000 ff01 	bl	80060b0 <_localeconv_r>
 80052ae:	6803      	ldr	r3, [r0, #0]
 80052b0:	4618      	mov	r0, r3
 80052b2:	9309      	str	r3, [sp, #36]	; 0x24
 80052b4:	f7fa ff4c 	bl	8000150 <strlen>
 80052b8:	2300      	movs	r3, #0
 80052ba:	930e      	str	r3, [sp, #56]	; 0x38
 80052bc:	f8d8 3000 	ldr.w	r3, [r8]
 80052c0:	900a      	str	r0, [sp, #40]	; 0x28
 80052c2:	3307      	adds	r3, #7
 80052c4:	f023 0307 	bic.w	r3, r3, #7
 80052c8:	f103 0208 	add.w	r2, r3, #8
 80052cc:	f894 9018 	ldrb.w	r9, [r4, #24]
 80052d0:	f8d4 b000 	ldr.w	fp, [r4]
 80052d4:	f8c8 2000 	str.w	r2, [r8]
 80052d8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80052dc:	4652      	mov	r2, sl
 80052de:	4643      	mov	r3, r8
 80052e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80052e4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80052e8:	930b      	str	r3, [sp, #44]	; 0x2c
 80052ea:	f04f 32ff 	mov.w	r2, #4294967295
 80052ee:	4650      	mov	r0, sl
 80052f0:	4b9c      	ldr	r3, [pc, #624]	; (8005564 <_printf_float+0x2cc>)
 80052f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052f4:	f7fb fb8a 	bl	8000a0c <__aeabi_dcmpun>
 80052f8:	bb70      	cbnz	r0, 8005358 <_printf_float+0xc0>
 80052fa:	f04f 32ff 	mov.w	r2, #4294967295
 80052fe:	4650      	mov	r0, sl
 8005300:	4b98      	ldr	r3, [pc, #608]	; (8005564 <_printf_float+0x2cc>)
 8005302:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005304:	f7fb fb64 	bl	80009d0 <__aeabi_dcmple>
 8005308:	bb30      	cbnz	r0, 8005358 <_printf_float+0xc0>
 800530a:	2200      	movs	r2, #0
 800530c:	2300      	movs	r3, #0
 800530e:	4650      	mov	r0, sl
 8005310:	4641      	mov	r1, r8
 8005312:	f7fb fb53 	bl	80009bc <__aeabi_dcmplt>
 8005316:	b110      	cbz	r0, 800531e <_printf_float+0x86>
 8005318:	232d      	movs	r3, #45	; 0x2d
 800531a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800531e:	4a92      	ldr	r2, [pc, #584]	; (8005568 <_printf_float+0x2d0>)
 8005320:	4b92      	ldr	r3, [pc, #584]	; (800556c <_printf_float+0x2d4>)
 8005322:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005326:	bf94      	ite	ls
 8005328:	4690      	movls	r8, r2
 800532a:	4698      	movhi	r8, r3
 800532c:	2303      	movs	r3, #3
 800532e:	f04f 0a00 	mov.w	sl, #0
 8005332:	6123      	str	r3, [r4, #16]
 8005334:	f02b 0304 	bic.w	r3, fp, #4
 8005338:	6023      	str	r3, [r4, #0]
 800533a:	4633      	mov	r3, r6
 800533c:	4621      	mov	r1, r4
 800533e:	4628      	mov	r0, r5
 8005340:	9700      	str	r7, [sp, #0]
 8005342:	aa0f      	add	r2, sp, #60	; 0x3c
 8005344:	f000 f9d6 	bl	80056f4 <_printf_common>
 8005348:	3001      	adds	r0, #1
 800534a:	f040 8090 	bne.w	800546e <_printf_float+0x1d6>
 800534e:	f04f 30ff 	mov.w	r0, #4294967295
 8005352:	b011      	add	sp, #68	; 0x44
 8005354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005358:	4652      	mov	r2, sl
 800535a:	4643      	mov	r3, r8
 800535c:	4650      	mov	r0, sl
 800535e:	4641      	mov	r1, r8
 8005360:	f7fb fb54 	bl	8000a0c <__aeabi_dcmpun>
 8005364:	b148      	cbz	r0, 800537a <_printf_float+0xe2>
 8005366:	f1b8 0f00 	cmp.w	r8, #0
 800536a:	bfb8      	it	lt
 800536c:	232d      	movlt	r3, #45	; 0x2d
 800536e:	4a80      	ldr	r2, [pc, #512]	; (8005570 <_printf_float+0x2d8>)
 8005370:	bfb8      	it	lt
 8005372:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005376:	4b7f      	ldr	r3, [pc, #508]	; (8005574 <_printf_float+0x2dc>)
 8005378:	e7d3      	b.n	8005322 <_printf_float+0x8a>
 800537a:	6863      	ldr	r3, [r4, #4]
 800537c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8005380:	1c5a      	adds	r2, r3, #1
 8005382:	d142      	bne.n	800540a <_printf_float+0x172>
 8005384:	2306      	movs	r3, #6
 8005386:	6063      	str	r3, [r4, #4]
 8005388:	2200      	movs	r2, #0
 800538a:	9206      	str	r2, [sp, #24]
 800538c:	aa0e      	add	r2, sp, #56	; 0x38
 800538e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8005392:	aa0d      	add	r2, sp, #52	; 0x34
 8005394:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8005398:	9203      	str	r2, [sp, #12]
 800539a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800539e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80053a2:	6023      	str	r3, [r4, #0]
 80053a4:	6863      	ldr	r3, [r4, #4]
 80053a6:	4652      	mov	r2, sl
 80053a8:	9300      	str	r3, [sp, #0]
 80053aa:	4628      	mov	r0, r5
 80053ac:	4643      	mov	r3, r8
 80053ae:	910b      	str	r1, [sp, #44]	; 0x2c
 80053b0:	f7ff fed5 	bl	800515e <__cvt>
 80053b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053b6:	4680      	mov	r8, r0
 80053b8:	2947      	cmp	r1, #71	; 0x47
 80053ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80053bc:	d108      	bne.n	80053d0 <_printf_float+0x138>
 80053be:	1cc8      	adds	r0, r1, #3
 80053c0:	db02      	blt.n	80053c8 <_printf_float+0x130>
 80053c2:	6863      	ldr	r3, [r4, #4]
 80053c4:	4299      	cmp	r1, r3
 80053c6:	dd40      	ble.n	800544a <_printf_float+0x1b2>
 80053c8:	f1a9 0902 	sub.w	r9, r9, #2
 80053cc:	fa5f f989 	uxtb.w	r9, r9
 80053d0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80053d4:	d81f      	bhi.n	8005416 <_printf_float+0x17e>
 80053d6:	464a      	mov	r2, r9
 80053d8:	3901      	subs	r1, #1
 80053da:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80053de:	910d      	str	r1, [sp, #52]	; 0x34
 80053e0:	f7ff ff1c 	bl	800521c <__exponent>
 80053e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80053e6:	4682      	mov	sl, r0
 80053e8:	1813      	adds	r3, r2, r0
 80053ea:	2a01      	cmp	r2, #1
 80053ec:	6123      	str	r3, [r4, #16]
 80053ee:	dc02      	bgt.n	80053f6 <_printf_float+0x15e>
 80053f0:	6822      	ldr	r2, [r4, #0]
 80053f2:	07d2      	lsls	r2, r2, #31
 80053f4:	d501      	bpl.n	80053fa <_printf_float+0x162>
 80053f6:	3301      	adds	r3, #1
 80053f8:	6123      	str	r3, [r4, #16]
 80053fa:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d09b      	beq.n	800533a <_printf_float+0xa2>
 8005402:	232d      	movs	r3, #45	; 0x2d
 8005404:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005408:	e797      	b.n	800533a <_printf_float+0xa2>
 800540a:	2947      	cmp	r1, #71	; 0x47
 800540c:	d1bc      	bne.n	8005388 <_printf_float+0xf0>
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1ba      	bne.n	8005388 <_printf_float+0xf0>
 8005412:	2301      	movs	r3, #1
 8005414:	e7b7      	b.n	8005386 <_printf_float+0xee>
 8005416:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800541a:	d118      	bne.n	800544e <_printf_float+0x1b6>
 800541c:	2900      	cmp	r1, #0
 800541e:	6863      	ldr	r3, [r4, #4]
 8005420:	dd0b      	ble.n	800543a <_printf_float+0x1a2>
 8005422:	6121      	str	r1, [r4, #16]
 8005424:	b913      	cbnz	r3, 800542c <_printf_float+0x194>
 8005426:	6822      	ldr	r2, [r4, #0]
 8005428:	07d0      	lsls	r0, r2, #31
 800542a:	d502      	bpl.n	8005432 <_printf_float+0x19a>
 800542c:	3301      	adds	r3, #1
 800542e:	440b      	add	r3, r1
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	f04f 0a00 	mov.w	sl, #0
 8005436:	65a1      	str	r1, [r4, #88]	; 0x58
 8005438:	e7df      	b.n	80053fa <_printf_float+0x162>
 800543a:	b913      	cbnz	r3, 8005442 <_printf_float+0x1aa>
 800543c:	6822      	ldr	r2, [r4, #0]
 800543e:	07d2      	lsls	r2, r2, #31
 8005440:	d501      	bpl.n	8005446 <_printf_float+0x1ae>
 8005442:	3302      	adds	r3, #2
 8005444:	e7f4      	b.n	8005430 <_printf_float+0x198>
 8005446:	2301      	movs	r3, #1
 8005448:	e7f2      	b.n	8005430 <_printf_float+0x198>
 800544a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800544e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005450:	4299      	cmp	r1, r3
 8005452:	db05      	blt.n	8005460 <_printf_float+0x1c8>
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	6121      	str	r1, [r4, #16]
 8005458:	07d8      	lsls	r0, r3, #31
 800545a:	d5ea      	bpl.n	8005432 <_printf_float+0x19a>
 800545c:	1c4b      	adds	r3, r1, #1
 800545e:	e7e7      	b.n	8005430 <_printf_float+0x198>
 8005460:	2900      	cmp	r1, #0
 8005462:	bfcc      	ite	gt
 8005464:	2201      	movgt	r2, #1
 8005466:	f1c1 0202 	rsble	r2, r1, #2
 800546a:	4413      	add	r3, r2
 800546c:	e7e0      	b.n	8005430 <_printf_float+0x198>
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	055a      	lsls	r2, r3, #21
 8005472:	d407      	bmi.n	8005484 <_printf_float+0x1ec>
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	4642      	mov	r2, r8
 8005478:	4631      	mov	r1, r6
 800547a:	4628      	mov	r0, r5
 800547c:	47b8      	blx	r7
 800547e:	3001      	adds	r0, #1
 8005480:	d12b      	bne.n	80054da <_printf_float+0x242>
 8005482:	e764      	b.n	800534e <_printf_float+0xb6>
 8005484:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005488:	f240 80dd 	bls.w	8005646 <_printf_float+0x3ae>
 800548c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005490:	2200      	movs	r2, #0
 8005492:	2300      	movs	r3, #0
 8005494:	f7fb fa88 	bl	80009a8 <__aeabi_dcmpeq>
 8005498:	2800      	cmp	r0, #0
 800549a:	d033      	beq.n	8005504 <_printf_float+0x26c>
 800549c:	2301      	movs	r3, #1
 800549e:	4631      	mov	r1, r6
 80054a0:	4628      	mov	r0, r5
 80054a2:	4a35      	ldr	r2, [pc, #212]	; (8005578 <_printf_float+0x2e0>)
 80054a4:	47b8      	blx	r7
 80054a6:	3001      	adds	r0, #1
 80054a8:	f43f af51 	beq.w	800534e <_printf_float+0xb6>
 80054ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80054b0:	429a      	cmp	r2, r3
 80054b2:	db02      	blt.n	80054ba <_printf_float+0x222>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	07d8      	lsls	r0, r3, #31
 80054b8:	d50f      	bpl.n	80054da <_printf_float+0x242>
 80054ba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80054be:	4631      	mov	r1, r6
 80054c0:	4628      	mov	r0, r5
 80054c2:	47b8      	blx	r7
 80054c4:	3001      	adds	r0, #1
 80054c6:	f43f af42 	beq.w	800534e <_printf_float+0xb6>
 80054ca:	f04f 0800 	mov.w	r8, #0
 80054ce:	f104 091a 	add.w	r9, r4, #26
 80054d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054d4:	3b01      	subs	r3, #1
 80054d6:	4543      	cmp	r3, r8
 80054d8:	dc09      	bgt.n	80054ee <_printf_float+0x256>
 80054da:	6823      	ldr	r3, [r4, #0]
 80054dc:	079b      	lsls	r3, r3, #30
 80054de:	f100 8104 	bmi.w	80056ea <_printf_float+0x452>
 80054e2:	68e0      	ldr	r0, [r4, #12]
 80054e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80054e6:	4298      	cmp	r0, r3
 80054e8:	bfb8      	it	lt
 80054ea:	4618      	movlt	r0, r3
 80054ec:	e731      	b.n	8005352 <_printf_float+0xba>
 80054ee:	2301      	movs	r3, #1
 80054f0:	464a      	mov	r2, r9
 80054f2:	4631      	mov	r1, r6
 80054f4:	4628      	mov	r0, r5
 80054f6:	47b8      	blx	r7
 80054f8:	3001      	adds	r0, #1
 80054fa:	f43f af28 	beq.w	800534e <_printf_float+0xb6>
 80054fe:	f108 0801 	add.w	r8, r8, #1
 8005502:	e7e6      	b.n	80054d2 <_printf_float+0x23a>
 8005504:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005506:	2b00      	cmp	r3, #0
 8005508:	dc38      	bgt.n	800557c <_printf_float+0x2e4>
 800550a:	2301      	movs	r3, #1
 800550c:	4631      	mov	r1, r6
 800550e:	4628      	mov	r0, r5
 8005510:	4a19      	ldr	r2, [pc, #100]	; (8005578 <_printf_float+0x2e0>)
 8005512:	47b8      	blx	r7
 8005514:	3001      	adds	r0, #1
 8005516:	f43f af1a 	beq.w	800534e <_printf_float+0xb6>
 800551a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800551e:	4313      	orrs	r3, r2
 8005520:	d102      	bne.n	8005528 <_printf_float+0x290>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	07d9      	lsls	r1, r3, #31
 8005526:	d5d8      	bpl.n	80054da <_printf_float+0x242>
 8005528:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800552c:	4631      	mov	r1, r6
 800552e:	4628      	mov	r0, r5
 8005530:	47b8      	blx	r7
 8005532:	3001      	adds	r0, #1
 8005534:	f43f af0b 	beq.w	800534e <_printf_float+0xb6>
 8005538:	f04f 0900 	mov.w	r9, #0
 800553c:	f104 0a1a 	add.w	sl, r4, #26
 8005540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005542:	425b      	negs	r3, r3
 8005544:	454b      	cmp	r3, r9
 8005546:	dc01      	bgt.n	800554c <_printf_float+0x2b4>
 8005548:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800554a:	e794      	b.n	8005476 <_printf_float+0x1de>
 800554c:	2301      	movs	r3, #1
 800554e:	4652      	mov	r2, sl
 8005550:	4631      	mov	r1, r6
 8005552:	4628      	mov	r0, r5
 8005554:	47b8      	blx	r7
 8005556:	3001      	adds	r0, #1
 8005558:	f43f aef9 	beq.w	800534e <_printf_float+0xb6>
 800555c:	f109 0901 	add.w	r9, r9, #1
 8005560:	e7ee      	b.n	8005540 <_printf_float+0x2a8>
 8005562:	bf00      	nop
 8005564:	7fefffff 	.word	0x7fefffff
 8005568:	0800999a 	.word	0x0800999a
 800556c:	0800999e 	.word	0x0800999e
 8005570:	080099a2 	.word	0x080099a2
 8005574:	080099a6 	.word	0x080099a6
 8005578:	080099aa 	.word	0x080099aa
 800557c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800557e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005580:	429a      	cmp	r2, r3
 8005582:	bfa8      	it	ge
 8005584:	461a      	movge	r2, r3
 8005586:	2a00      	cmp	r2, #0
 8005588:	4691      	mov	r9, r2
 800558a:	dc37      	bgt.n	80055fc <_printf_float+0x364>
 800558c:	f04f 0b00 	mov.w	fp, #0
 8005590:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005594:	f104 021a 	add.w	r2, r4, #26
 8005598:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800559c:	ebaa 0309 	sub.w	r3, sl, r9
 80055a0:	455b      	cmp	r3, fp
 80055a2:	dc33      	bgt.n	800560c <_printf_float+0x374>
 80055a4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055a8:	429a      	cmp	r2, r3
 80055aa:	db3b      	blt.n	8005624 <_printf_float+0x38c>
 80055ac:	6823      	ldr	r3, [r4, #0]
 80055ae:	07da      	lsls	r2, r3, #31
 80055b0:	d438      	bmi.n	8005624 <_printf_float+0x38c>
 80055b2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80055b6:	eba2 0903 	sub.w	r9, r2, r3
 80055ba:	eba2 020a 	sub.w	r2, r2, sl
 80055be:	4591      	cmp	r9, r2
 80055c0:	bfa8      	it	ge
 80055c2:	4691      	movge	r9, r2
 80055c4:	f1b9 0f00 	cmp.w	r9, #0
 80055c8:	dc34      	bgt.n	8005634 <_printf_float+0x39c>
 80055ca:	f04f 0800 	mov.w	r8, #0
 80055ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055d2:	f104 0a1a 	add.w	sl, r4, #26
 80055d6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80055da:	1a9b      	subs	r3, r3, r2
 80055dc:	eba3 0309 	sub.w	r3, r3, r9
 80055e0:	4543      	cmp	r3, r8
 80055e2:	f77f af7a 	ble.w	80054da <_printf_float+0x242>
 80055e6:	2301      	movs	r3, #1
 80055e8:	4652      	mov	r2, sl
 80055ea:	4631      	mov	r1, r6
 80055ec:	4628      	mov	r0, r5
 80055ee:	47b8      	blx	r7
 80055f0:	3001      	adds	r0, #1
 80055f2:	f43f aeac 	beq.w	800534e <_printf_float+0xb6>
 80055f6:	f108 0801 	add.w	r8, r8, #1
 80055fa:	e7ec      	b.n	80055d6 <_printf_float+0x33e>
 80055fc:	4613      	mov	r3, r2
 80055fe:	4631      	mov	r1, r6
 8005600:	4642      	mov	r2, r8
 8005602:	4628      	mov	r0, r5
 8005604:	47b8      	blx	r7
 8005606:	3001      	adds	r0, #1
 8005608:	d1c0      	bne.n	800558c <_printf_float+0x2f4>
 800560a:	e6a0      	b.n	800534e <_printf_float+0xb6>
 800560c:	2301      	movs	r3, #1
 800560e:	4631      	mov	r1, r6
 8005610:	4628      	mov	r0, r5
 8005612:	920b      	str	r2, [sp, #44]	; 0x2c
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f ae99 	beq.w	800534e <_printf_float+0xb6>
 800561c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800561e:	f10b 0b01 	add.w	fp, fp, #1
 8005622:	e7b9      	b.n	8005598 <_printf_float+0x300>
 8005624:	4631      	mov	r1, r6
 8005626:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800562a:	4628      	mov	r0, r5
 800562c:	47b8      	blx	r7
 800562e:	3001      	adds	r0, #1
 8005630:	d1bf      	bne.n	80055b2 <_printf_float+0x31a>
 8005632:	e68c      	b.n	800534e <_printf_float+0xb6>
 8005634:	464b      	mov	r3, r9
 8005636:	4631      	mov	r1, r6
 8005638:	4628      	mov	r0, r5
 800563a:	eb08 020a 	add.w	r2, r8, sl
 800563e:	47b8      	blx	r7
 8005640:	3001      	adds	r0, #1
 8005642:	d1c2      	bne.n	80055ca <_printf_float+0x332>
 8005644:	e683      	b.n	800534e <_printf_float+0xb6>
 8005646:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005648:	2a01      	cmp	r2, #1
 800564a:	dc01      	bgt.n	8005650 <_printf_float+0x3b8>
 800564c:	07db      	lsls	r3, r3, #31
 800564e:	d539      	bpl.n	80056c4 <_printf_float+0x42c>
 8005650:	2301      	movs	r3, #1
 8005652:	4642      	mov	r2, r8
 8005654:	4631      	mov	r1, r6
 8005656:	4628      	mov	r0, r5
 8005658:	47b8      	blx	r7
 800565a:	3001      	adds	r0, #1
 800565c:	f43f ae77 	beq.w	800534e <_printf_float+0xb6>
 8005660:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005664:	4631      	mov	r1, r6
 8005666:	4628      	mov	r0, r5
 8005668:	47b8      	blx	r7
 800566a:	3001      	adds	r0, #1
 800566c:	f43f ae6f 	beq.w	800534e <_printf_float+0xb6>
 8005670:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005674:	2200      	movs	r2, #0
 8005676:	2300      	movs	r3, #0
 8005678:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800567c:	f7fb f994 	bl	80009a8 <__aeabi_dcmpeq>
 8005680:	b9d8      	cbnz	r0, 80056ba <_printf_float+0x422>
 8005682:	f109 33ff 	add.w	r3, r9, #4294967295
 8005686:	f108 0201 	add.w	r2, r8, #1
 800568a:	4631      	mov	r1, r6
 800568c:	4628      	mov	r0, r5
 800568e:	47b8      	blx	r7
 8005690:	3001      	adds	r0, #1
 8005692:	d10e      	bne.n	80056b2 <_printf_float+0x41a>
 8005694:	e65b      	b.n	800534e <_printf_float+0xb6>
 8005696:	2301      	movs	r3, #1
 8005698:	464a      	mov	r2, r9
 800569a:	4631      	mov	r1, r6
 800569c:	4628      	mov	r0, r5
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	f43f ae54 	beq.w	800534e <_printf_float+0xb6>
 80056a6:	f108 0801 	add.w	r8, r8, #1
 80056aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056ac:	3b01      	subs	r3, #1
 80056ae:	4543      	cmp	r3, r8
 80056b0:	dcf1      	bgt.n	8005696 <_printf_float+0x3fe>
 80056b2:	4653      	mov	r3, sl
 80056b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80056b8:	e6de      	b.n	8005478 <_printf_float+0x1e0>
 80056ba:	f04f 0800 	mov.w	r8, #0
 80056be:	f104 091a 	add.w	r9, r4, #26
 80056c2:	e7f2      	b.n	80056aa <_printf_float+0x412>
 80056c4:	2301      	movs	r3, #1
 80056c6:	4642      	mov	r2, r8
 80056c8:	e7df      	b.n	800568a <_printf_float+0x3f2>
 80056ca:	2301      	movs	r3, #1
 80056cc:	464a      	mov	r2, r9
 80056ce:	4631      	mov	r1, r6
 80056d0:	4628      	mov	r0, r5
 80056d2:	47b8      	blx	r7
 80056d4:	3001      	adds	r0, #1
 80056d6:	f43f ae3a 	beq.w	800534e <_printf_float+0xb6>
 80056da:	f108 0801 	add.w	r8, r8, #1
 80056de:	68e3      	ldr	r3, [r4, #12]
 80056e0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80056e2:	1a5b      	subs	r3, r3, r1
 80056e4:	4543      	cmp	r3, r8
 80056e6:	dcf0      	bgt.n	80056ca <_printf_float+0x432>
 80056e8:	e6fb      	b.n	80054e2 <_printf_float+0x24a>
 80056ea:	f04f 0800 	mov.w	r8, #0
 80056ee:	f104 0919 	add.w	r9, r4, #25
 80056f2:	e7f4      	b.n	80056de <_printf_float+0x446>

080056f4 <_printf_common>:
 80056f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056f8:	4616      	mov	r6, r2
 80056fa:	4699      	mov	r9, r3
 80056fc:	688a      	ldr	r2, [r1, #8]
 80056fe:	690b      	ldr	r3, [r1, #16]
 8005700:	4607      	mov	r7, r0
 8005702:	4293      	cmp	r3, r2
 8005704:	bfb8      	it	lt
 8005706:	4613      	movlt	r3, r2
 8005708:	6033      	str	r3, [r6, #0]
 800570a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800570e:	460c      	mov	r4, r1
 8005710:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005714:	b10a      	cbz	r2, 800571a <_printf_common+0x26>
 8005716:	3301      	adds	r3, #1
 8005718:	6033      	str	r3, [r6, #0]
 800571a:	6823      	ldr	r3, [r4, #0]
 800571c:	0699      	lsls	r1, r3, #26
 800571e:	bf42      	ittt	mi
 8005720:	6833      	ldrmi	r3, [r6, #0]
 8005722:	3302      	addmi	r3, #2
 8005724:	6033      	strmi	r3, [r6, #0]
 8005726:	6825      	ldr	r5, [r4, #0]
 8005728:	f015 0506 	ands.w	r5, r5, #6
 800572c:	d106      	bne.n	800573c <_printf_common+0x48>
 800572e:	f104 0a19 	add.w	sl, r4, #25
 8005732:	68e3      	ldr	r3, [r4, #12]
 8005734:	6832      	ldr	r2, [r6, #0]
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	42ab      	cmp	r3, r5
 800573a:	dc2b      	bgt.n	8005794 <_printf_common+0xa0>
 800573c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005740:	1e13      	subs	r3, r2, #0
 8005742:	6822      	ldr	r2, [r4, #0]
 8005744:	bf18      	it	ne
 8005746:	2301      	movne	r3, #1
 8005748:	0692      	lsls	r2, r2, #26
 800574a:	d430      	bmi.n	80057ae <_printf_common+0xba>
 800574c:	4649      	mov	r1, r9
 800574e:	4638      	mov	r0, r7
 8005750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005754:	47c0      	blx	r8
 8005756:	3001      	adds	r0, #1
 8005758:	d023      	beq.n	80057a2 <_printf_common+0xae>
 800575a:	6823      	ldr	r3, [r4, #0]
 800575c:	6922      	ldr	r2, [r4, #16]
 800575e:	f003 0306 	and.w	r3, r3, #6
 8005762:	2b04      	cmp	r3, #4
 8005764:	bf14      	ite	ne
 8005766:	2500      	movne	r5, #0
 8005768:	6833      	ldreq	r3, [r6, #0]
 800576a:	f04f 0600 	mov.w	r6, #0
 800576e:	bf08      	it	eq
 8005770:	68e5      	ldreq	r5, [r4, #12]
 8005772:	f104 041a 	add.w	r4, r4, #26
 8005776:	bf08      	it	eq
 8005778:	1aed      	subeq	r5, r5, r3
 800577a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800577e:	bf08      	it	eq
 8005780:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005784:	4293      	cmp	r3, r2
 8005786:	bfc4      	itt	gt
 8005788:	1a9b      	subgt	r3, r3, r2
 800578a:	18ed      	addgt	r5, r5, r3
 800578c:	42b5      	cmp	r5, r6
 800578e:	d11a      	bne.n	80057c6 <_printf_common+0xd2>
 8005790:	2000      	movs	r0, #0
 8005792:	e008      	b.n	80057a6 <_printf_common+0xb2>
 8005794:	2301      	movs	r3, #1
 8005796:	4652      	mov	r2, sl
 8005798:	4649      	mov	r1, r9
 800579a:	4638      	mov	r0, r7
 800579c:	47c0      	blx	r8
 800579e:	3001      	adds	r0, #1
 80057a0:	d103      	bne.n	80057aa <_printf_common+0xb6>
 80057a2:	f04f 30ff 	mov.w	r0, #4294967295
 80057a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057aa:	3501      	adds	r5, #1
 80057ac:	e7c1      	b.n	8005732 <_printf_common+0x3e>
 80057ae:	2030      	movs	r0, #48	; 0x30
 80057b0:	18e1      	adds	r1, r4, r3
 80057b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057b6:	1c5a      	adds	r2, r3, #1
 80057b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057bc:	4422      	add	r2, r4
 80057be:	3302      	adds	r3, #2
 80057c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057c4:	e7c2      	b.n	800574c <_printf_common+0x58>
 80057c6:	2301      	movs	r3, #1
 80057c8:	4622      	mov	r2, r4
 80057ca:	4649      	mov	r1, r9
 80057cc:	4638      	mov	r0, r7
 80057ce:	47c0      	blx	r8
 80057d0:	3001      	adds	r0, #1
 80057d2:	d0e6      	beq.n	80057a2 <_printf_common+0xae>
 80057d4:	3601      	adds	r6, #1
 80057d6:	e7d9      	b.n	800578c <_printf_common+0x98>

080057d8 <_printf_i>:
 80057d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057dc:	7e0f      	ldrb	r7, [r1, #24]
 80057de:	4691      	mov	r9, r2
 80057e0:	2f78      	cmp	r7, #120	; 0x78
 80057e2:	4680      	mov	r8, r0
 80057e4:	460c      	mov	r4, r1
 80057e6:	469a      	mov	sl, r3
 80057e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ee:	d807      	bhi.n	8005800 <_printf_i+0x28>
 80057f0:	2f62      	cmp	r7, #98	; 0x62
 80057f2:	d80a      	bhi.n	800580a <_printf_i+0x32>
 80057f4:	2f00      	cmp	r7, #0
 80057f6:	f000 80d5 	beq.w	80059a4 <_printf_i+0x1cc>
 80057fa:	2f58      	cmp	r7, #88	; 0x58
 80057fc:	f000 80c1 	beq.w	8005982 <_printf_i+0x1aa>
 8005800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005808:	e03a      	b.n	8005880 <_printf_i+0xa8>
 800580a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800580e:	2b15      	cmp	r3, #21
 8005810:	d8f6      	bhi.n	8005800 <_printf_i+0x28>
 8005812:	a101      	add	r1, pc, #4	; (adr r1, 8005818 <_printf_i+0x40>)
 8005814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005818:	08005871 	.word	0x08005871
 800581c:	08005885 	.word	0x08005885
 8005820:	08005801 	.word	0x08005801
 8005824:	08005801 	.word	0x08005801
 8005828:	08005801 	.word	0x08005801
 800582c:	08005801 	.word	0x08005801
 8005830:	08005885 	.word	0x08005885
 8005834:	08005801 	.word	0x08005801
 8005838:	08005801 	.word	0x08005801
 800583c:	08005801 	.word	0x08005801
 8005840:	08005801 	.word	0x08005801
 8005844:	0800598b 	.word	0x0800598b
 8005848:	080058b1 	.word	0x080058b1
 800584c:	08005945 	.word	0x08005945
 8005850:	08005801 	.word	0x08005801
 8005854:	08005801 	.word	0x08005801
 8005858:	080059ad 	.word	0x080059ad
 800585c:	08005801 	.word	0x08005801
 8005860:	080058b1 	.word	0x080058b1
 8005864:	08005801 	.word	0x08005801
 8005868:	08005801 	.word	0x08005801
 800586c:	0800594d 	.word	0x0800594d
 8005870:	682b      	ldr	r3, [r5, #0]
 8005872:	1d1a      	adds	r2, r3, #4
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	602a      	str	r2, [r5, #0]
 8005878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800587c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005880:	2301      	movs	r3, #1
 8005882:	e0a0      	b.n	80059c6 <_printf_i+0x1ee>
 8005884:	6820      	ldr	r0, [r4, #0]
 8005886:	682b      	ldr	r3, [r5, #0]
 8005888:	0607      	lsls	r7, r0, #24
 800588a:	f103 0104 	add.w	r1, r3, #4
 800588e:	6029      	str	r1, [r5, #0]
 8005890:	d501      	bpl.n	8005896 <_printf_i+0xbe>
 8005892:	681e      	ldr	r6, [r3, #0]
 8005894:	e003      	b.n	800589e <_printf_i+0xc6>
 8005896:	0646      	lsls	r6, r0, #25
 8005898:	d5fb      	bpl.n	8005892 <_printf_i+0xba>
 800589a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800589e:	2e00      	cmp	r6, #0
 80058a0:	da03      	bge.n	80058aa <_printf_i+0xd2>
 80058a2:	232d      	movs	r3, #45	; 0x2d
 80058a4:	4276      	negs	r6, r6
 80058a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058aa:	230a      	movs	r3, #10
 80058ac:	4859      	ldr	r0, [pc, #356]	; (8005a14 <_printf_i+0x23c>)
 80058ae:	e012      	b.n	80058d6 <_printf_i+0xfe>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	6820      	ldr	r0, [r4, #0]
 80058b4:	1d19      	adds	r1, r3, #4
 80058b6:	6029      	str	r1, [r5, #0]
 80058b8:	0605      	lsls	r5, r0, #24
 80058ba:	d501      	bpl.n	80058c0 <_printf_i+0xe8>
 80058bc:	681e      	ldr	r6, [r3, #0]
 80058be:	e002      	b.n	80058c6 <_printf_i+0xee>
 80058c0:	0641      	lsls	r1, r0, #25
 80058c2:	d5fb      	bpl.n	80058bc <_printf_i+0xe4>
 80058c4:	881e      	ldrh	r6, [r3, #0]
 80058c6:	2f6f      	cmp	r7, #111	; 0x6f
 80058c8:	bf0c      	ite	eq
 80058ca:	2308      	moveq	r3, #8
 80058cc:	230a      	movne	r3, #10
 80058ce:	4851      	ldr	r0, [pc, #324]	; (8005a14 <_printf_i+0x23c>)
 80058d0:	2100      	movs	r1, #0
 80058d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058d6:	6865      	ldr	r5, [r4, #4]
 80058d8:	2d00      	cmp	r5, #0
 80058da:	bfa8      	it	ge
 80058dc:	6821      	ldrge	r1, [r4, #0]
 80058de:	60a5      	str	r5, [r4, #8]
 80058e0:	bfa4      	itt	ge
 80058e2:	f021 0104 	bicge.w	r1, r1, #4
 80058e6:	6021      	strge	r1, [r4, #0]
 80058e8:	b90e      	cbnz	r6, 80058ee <_printf_i+0x116>
 80058ea:	2d00      	cmp	r5, #0
 80058ec:	d04b      	beq.n	8005986 <_printf_i+0x1ae>
 80058ee:	4615      	mov	r5, r2
 80058f0:	fbb6 f1f3 	udiv	r1, r6, r3
 80058f4:	fb03 6711 	mls	r7, r3, r1, r6
 80058f8:	5dc7      	ldrb	r7, [r0, r7]
 80058fa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058fe:	4637      	mov	r7, r6
 8005900:	42bb      	cmp	r3, r7
 8005902:	460e      	mov	r6, r1
 8005904:	d9f4      	bls.n	80058f0 <_printf_i+0x118>
 8005906:	2b08      	cmp	r3, #8
 8005908:	d10b      	bne.n	8005922 <_printf_i+0x14a>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	07de      	lsls	r6, r3, #31
 800590e:	d508      	bpl.n	8005922 <_printf_i+0x14a>
 8005910:	6923      	ldr	r3, [r4, #16]
 8005912:	6861      	ldr	r1, [r4, #4]
 8005914:	4299      	cmp	r1, r3
 8005916:	bfde      	ittt	le
 8005918:	2330      	movle	r3, #48	; 0x30
 800591a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800591e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005922:	1b52      	subs	r2, r2, r5
 8005924:	6122      	str	r2, [r4, #16]
 8005926:	464b      	mov	r3, r9
 8005928:	4621      	mov	r1, r4
 800592a:	4640      	mov	r0, r8
 800592c:	f8cd a000 	str.w	sl, [sp]
 8005930:	aa03      	add	r2, sp, #12
 8005932:	f7ff fedf 	bl	80056f4 <_printf_common>
 8005936:	3001      	adds	r0, #1
 8005938:	d14a      	bne.n	80059d0 <_printf_i+0x1f8>
 800593a:	f04f 30ff 	mov.w	r0, #4294967295
 800593e:	b004      	add	sp, #16
 8005940:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005944:	6823      	ldr	r3, [r4, #0]
 8005946:	f043 0320 	orr.w	r3, r3, #32
 800594a:	6023      	str	r3, [r4, #0]
 800594c:	2778      	movs	r7, #120	; 0x78
 800594e:	4832      	ldr	r0, [pc, #200]	; (8005a18 <_printf_i+0x240>)
 8005950:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005954:	6823      	ldr	r3, [r4, #0]
 8005956:	6829      	ldr	r1, [r5, #0]
 8005958:	061f      	lsls	r7, r3, #24
 800595a:	f851 6b04 	ldr.w	r6, [r1], #4
 800595e:	d402      	bmi.n	8005966 <_printf_i+0x18e>
 8005960:	065f      	lsls	r7, r3, #25
 8005962:	bf48      	it	mi
 8005964:	b2b6      	uxthmi	r6, r6
 8005966:	07df      	lsls	r7, r3, #31
 8005968:	bf48      	it	mi
 800596a:	f043 0320 	orrmi.w	r3, r3, #32
 800596e:	6029      	str	r1, [r5, #0]
 8005970:	bf48      	it	mi
 8005972:	6023      	strmi	r3, [r4, #0]
 8005974:	b91e      	cbnz	r6, 800597e <_printf_i+0x1a6>
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	f023 0320 	bic.w	r3, r3, #32
 800597c:	6023      	str	r3, [r4, #0]
 800597e:	2310      	movs	r3, #16
 8005980:	e7a6      	b.n	80058d0 <_printf_i+0xf8>
 8005982:	4824      	ldr	r0, [pc, #144]	; (8005a14 <_printf_i+0x23c>)
 8005984:	e7e4      	b.n	8005950 <_printf_i+0x178>
 8005986:	4615      	mov	r5, r2
 8005988:	e7bd      	b.n	8005906 <_printf_i+0x12e>
 800598a:	682b      	ldr	r3, [r5, #0]
 800598c:	6826      	ldr	r6, [r4, #0]
 800598e:	1d18      	adds	r0, r3, #4
 8005990:	6961      	ldr	r1, [r4, #20]
 8005992:	6028      	str	r0, [r5, #0]
 8005994:	0635      	lsls	r5, r6, #24
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	d501      	bpl.n	800599e <_printf_i+0x1c6>
 800599a:	6019      	str	r1, [r3, #0]
 800599c:	e002      	b.n	80059a4 <_printf_i+0x1cc>
 800599e:	0670      	lsls	r0, r6, #25
 80059a0:	d5fb      	bpl.n	800599a <_printf_i+0x1c2>
 80059a2:	8019      	strh	r1, [r3, #0]
 80059a4:	2300      	movs	r3, #0
 80059a6:	4615      	mov	r5, r2
 80059a8:	6123      	str	r3, [r4, #16]
 80059aa:	e7bc      	b.n	8005926 <_printf_i+0x14e>
 80059ac:	682b      	ldr	r3, [r5, #0]
 80059ae:	2100      	movs	r1, #0
 80059b0:	1d1a      	adds	r2, r3, #4
 80059b2:	602a      	str	r2, [r5, #0]
 80059b4:	681d      	ldr	r5, [r3, #0]
 80059b6:	6862      	ldr	r2, [r4, #4]
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 fbef 	bl	800619c <memchr>
 80059be:	b108      	cbz	r0, 80059c4 <_printf_i+0x1ec>
 80059c0:	1b40      	subs	r0, r0, r5
 80059c2:	6060      	str	r0, [r4, #4]
 80059c4:	6863      	ldr	r3, [r4, #4]
 80059c6:	6123      	str	r3, [r4, #16]
 80059c8:	2300      	movs	r3, #0
 80059ca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059ce:	e7aa      	b.n	8005926 <_printf_i+0x14e>
 80059d0:	462a      	mov	r2, r5
 80059d2:	4649      	mov	r1, r9
 80059d4:	4640      	mov	r0, r8
 80059d6:	6923      	ldr	r3, [r4, #16]
 80059d8:	47d0      	blx	sl
 80059da:	3001      	adds	r0, #1
 80059dc:	d0ad      	beq.n	800593a <_printf_i+0x162>
 80059de:	6823      	ldr	r3, [r4, #0]
 80059e0:	079b      	lsls	r3, r3, #30
 80059e2:	d413      	bmi.n	8005a0c <_printf_i+0x234>
 80059e4:	68e0      	ldr	r0, [r4, #12]
 80059e6:	9b03      	ldr	r3, [sp, #12]
 80059e8:	4298      	cmp	r0, r3
 80059ea:	bfb8      	it	lt
 80059ec:	4618      	movlt	r0, r3
 80059ee:	e7a6      	b.n	800593e <_printf_i+0x166>
 80059f0:	2301      	movs	r3, #1
 80059f2:	4632      	mov	r2, r6
 80059f4:	4649      	mov	r1, r9
 80059f6:	4640      	mov	r0, r8
 80059f8:	47d0      	blx	sl
 80059fa:	3001      	adds	r0, #1
 80059fc:	d09d      	beq.n	800593a <_printf_i+0x162>
 80059fe:	3501      	adds	r5, #1
 8005a00:	68e3      	ldr	r3, [r4, #12]
 8005a02:	9903      	ldr	r1, [sp, #12]
 8005a04:	1a5b      	subs	r3, r3, r1
 8005a06:	42ab      	cmp	r3, r5
 8005a08:	dcf2      	bgt.n	80059f0 <_printf_i+0x218>
 8005a0a:	e7eb      	b.n	80059e4 <_printf_i+0x20c>
 8005a0c:	2500      	movs	r5, #0
 8005a0e:	f104 0619 	add.w	r6, r4, #25
 8005a12:	e7f5      	b.n	8005a00 <_printf_i+0x228>
 8005a14:	080099ac 	.word	0x080099ac
 8005a18:	080099bd 	.word	0x080099bd

08005a1c <_scanf_float>:
 8005a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a20:	b087      	sub	sp, #28
 8005a22:	9303      	str	r3, [sp, #12]
 8005a24:	688b      	ldr	r3, [r1, #8]
 8005a26:	4617      	mov	r7, r2
 8005a28:	1e5a      	subs	r2, r3, #1
 8005a2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005a2e:	bf85      	ittet	hi
 8005a30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005a34:	195b      	addhi	r3, r3, r5
 8005a36:	2300      	movls	r3, #0
 8005a38:	9302      	strhi	r3, [sp, #8]
 8005a3a:	bf88      	it	hi
 8005a3c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005a40:	468b      	mov	fp, r1
 8005a42:	f04f 0500 	mov.w	r5, #0
 8005a46:	bf8c      	ite	hi
 8005a48:	608b      	strhi	r3, [r1, #8]
 8005a4a:	9302      	strls	r3, [sp, #8]
 8005a4c:	680b      	ldr	r3, [r1, #0]
 8005a4e:	4680      	mov	r8, r0
 8005a50:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005a54:	f84b 3b1c 	str.w	r3, [fp], #28
 8005a58:	460c      	mov	r4, r1
 8005a5a:	465e      	mov	r6, fp
 8005a5c:	46aa      	mov	sl, r5
 8005a5e:	46a9      	mov	r9, r5
 8005a60:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005a64:	9501      	str	r5, [sp, #4]
 8005a66:	68a2      	ldr	r2, [r4, #8]
 8005a68:	b152      	cbz	r2, 8005a80 <_scanf_float+0x64>
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	2b4e      	cmp	r3, #78	; 0x4e
 8005a70:	d864      	bhi.n	8005b3c <_scanf_float+0x120>
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d83c      	bhi.n	8005af0 <_scanf_float+0xd4>
 8005a76:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005a7a:	b2c8      	uxtb	r0, r1
 8005a7c:	280e      	cmp	r0, #14
 8005a7e:	d93a      	bls.n	8005af6 <_scanf_float+0xda>
 8005a80:	f1b9 0f00 	cmp.w	r9, #0
 8005a84:	d003      	beq.n	8005a8e <_scanf_float+0x72>
 8005a86:	6823      	ldr	r3, [r4, #0]
 8005a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a8c:	6023      	str	r3, [r4, #0]
 8005a8e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005a92:	f1ba 0f01 	cmp.w	sl, #1
 8005a96:	f200 8113 	bhi.w	8005cc0 <_scanf_float+0x2a4>
 8005a9a:	455e      	cmp	r6, fp
 8005a9c:	f200 8105 	bhi.w	8005caa <_scanf_float+0x28e>
 8005aa0:	2501      	movs	r5, #1
 8005aa2:	4628      	mov	r0, r5
 8005aa4:	b007      	add	sp, #28
 8005aa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aaa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005aae:	2a0d      	cmp	r2, #13
 8005ab0:	d8e6      	bhi.n	8005a80 <_scanf_float+0x64>
 8005ab2:	a101      	add	r1, pc, #4	; (adr r1, 8005ab8 <_scanf_float+0x9c>)
 8005ab4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005ab8:	08005bf7 	.word	0x08005bf7
 8005abc:	08005a81 	.word	0x08005a81
 8005ac0:	08005a81 	.word	0x08005a81
 8005ac4:	08005a81 	.word	0x08005a81
 8005ac8:	08005c57 	.word	0x08005c57
 8005acc:	08005c2f 	.word	0x08005c2f
 8005ad0:	08005a81 	.word	0x08005a81
 8005ad4:	08005a81 	.word	0x08005a81
 8005ad8:	08005c05 	.word	0x08005c05
 8005adc:	08005a81 	.word	0x08005a81
 8005ae0:	08005a81 	.word	0x08005a81
 8005ae4:	08005a81 	.word	0x08005a81
 8005ae8:	08005a81 	.word	0x08005a81
 8005aec:	08005bbd 	.word	0x08005bbd
 8005af0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005af4:	e7db      	b.n	8005aae <_scanf_float+0x92>
 8005af6:	290e      	cmp	r1, #14
 8005af8:	d8c2      	bhi.n	8005a80 <_scanf_float+0x64>
 8005afa:	a001      	add	r0, pc, #4	; (adr r0, 8005b00 <_scanf_float+0xe4>)
 8005afc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005b00:	08005baf 	.word	0x08005baf
 8005b04:	08005a81 	.word	0x08005a81
 8005b08:	08005baf 	.word	0x08005baf
 8005b0c:	08005c43 	.word	0x08005c43
 8005b10:	08005a81 	.word	0x08005a81
 8005b14:	08005b5d 	.word	0x08005b5d
 8005b18:	08005b99 	.word	0x08005b99
 8005b1c:	08005b99 	.word	0x08005b99
 8005b20:	08005b99 	.word	0x08005b99
 8005b24:	08005b99 	.word	0x08005b99
 8005b28:	08005b99 	.word	0x08005b99
 8005b2c:	08005b99 	.word	0x08005b99
 8005b30:	08005b99 	.word	0x08005b99
 8005b34:	08005b99 	.word	0x08005b99
 8005b38:	08005b99 	.word	0x08005b99
 8005b3c:	2b6e      	cmp	r3, #110	; 0x6e
 8005b3e:	d809      	bhi.n	8005b54 <_scanf_float+0x138>
 8005b40:	2b60      	cmp	r3, #96	; 0x60
 8005b42:	d8b2      	bhi.n	8005aaa <_scanf_float+0x8e>
 8005b44:	2b54      	cmp	r3, #84	; 0x54
 8005b46:	d077      	beq.n	8005c38 <_scanf_float+0x21c>
 8005b48:	2b59      	cmp	r3, #89	; 0x59
 8005b4a:	d199      	bne.n	8005a80 <_scanf_float+0x64>
 8005b4c:	2d07      	cmp	r5, #7
 8005b4e:	d197      	bne.n	8005a80 <_scanf_float+0x64>
 8005b50:	2508      	movs	r5, #8
 8005b52:	e029      	b.n	8005ba8 <_scanf_float+0x18c>
 8005b54:	2b74      	cmp	r3, #116	; 0x74
 8005b56:	d06f      	beq.n	8005c38 <_scanf_float+0x21c>
 8005b58:	2b79      	cmp	r3, #121	; 0x79
 8005b5a:	e7f6      	b.n	8005b4a <_scanf_float+0x12e>
 8005b5c:	6821      	ldr	r1, [r4, #0]
 8005b5e:	05c8      	lsls	r0, r1, #23
 8005b60:	d51a      	bpl.n	8005b98 <_scanf_float+0x17c>
 8005b62:	9b02      	ldr	r3, [sp, #8]
 8005b64:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005b68:	6021      	str	r1, [r4, #0]
 8005b6a:	f109 0901 	add.w	r9, r9, #1
 8005b6e:	b11b      	cbz	r3, 8005b78 <_scanf_float+0x15c>
 8005b70:	3b01      	subs	r3, #1
 8005b72:	3201      	adds	r2, #1
 8005b74:	9302      	str	r3, [sp, #8]
 8005b76:	60a2      	str	r2, [r4, #8]
 8005b78:	68a3      	ldr	r3, [r4, #8]
 8005b7a:	3b01      	subs	r3, #1
 8005b7c:	60a3      	str	r3, [r4, #8]
 8005b7e:	6923      	ldr	r3, [r4, #16]
 8005b80:	3301      	adds	r3, #1
 8005b82:	6123      	str	r3, [r4, #16]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	607b      	str	r3, [r7, #4]
 8005b8c:	f340 8084 	ble.w	8005c98 <_scanf_float+0x27c>
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	3301      	adds	r3, #1
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	e766      	b.n	8005a66 <_scanf_float+0x4a>
 8005b98:	eb1a 0f05 	cmn.w	sl, r5
 8005b9c:	f47f af70 	bne.w	8005a80 <_scanf_float+0x64>
 8005ba0:	6822      	ldr	r2, [r4, #0]
 8005ba2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005ba6:	6022      	str	r2, [r4, #0]
 8005ba8:	f806 3b01 	strb.w	r3, [r6], #1
 8005bac:	e7e4      	b.n	8005b78 <_scanf_float+0x15c>
 8005bae:	6822      	ldr	r2, [r4, #0]
 8005bb0:	0610      	lsls	r0, r2, #24
 8005bb2:	f57f af65 	bpl.w	8005a80 <_scanf_float+0x64>
 8005bb6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bba:	e7f4      	b.n	8005ba6 <_scanf_float+0x18a>
 8005bbc:	f1ba 0f00 	cmp.w	sl, #0
 8005bc0:	d10e      	bne.n	8005be0 <_scanf_float+0x1c4>
 8005bc2:	f1b9 0f00 	cmp.w	r9, #0
 8005bc6:	d10e      	bne.n	8005be6 <_scanf_float+0x1ca>
 8005bc8:	6822      	ldr	r2, [r4, #0]
 8005bca:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005bce:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005bd2:	d108      	bne.n	8005be6 <_scanf_float+0x1ca>
 8005bd4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005bd8:	f04f 0a01 	mov.w	sl, #1
 8005bdc:	6022      	str	r2, [r4, #0]
 8005bde:	e7e3      	b.n	8005ba8 <_scanf_float+0x18c>
 8005be0:	f1ba 0f02 	cmp.w	sl, #2
 8005be4:	d055      	beq.n	8005c92 <_scanf_float+0x276>
 8005be6:	2d01      	cmp	r5, #1
 8005be8:	d002      	beq.n	8005bf0 <_scanf_float+0x1d4>
 8005bea:	2d04      	cmp	r5, #4
 8005bec:	f47f af48 	bne.w	8005a80 <_scanf_float+0x64>
 8005bf0:	3501      	adds	r5, #1
 8005bf2:	b2ed      	uxtb	r5, r5
 8005bf4:	e7d8      	b.n	8005ba8 <_scanf_float+0x18c>
 8005bf6:	f1ba 0f01 	cmp.w	sl, #1
 8005bfa:	f47f af41 	bne.w	8005a80 <_scanf_float+0x64>
 8005bfe:	f04f 0a02 	mov.w	sl, #2
 8005c02:	e7d1      	b.n	8005ba8 <_scanf_float+0x18c>
 8005c04:	b97d      	cbnz	r5, 8005c26 <_scanf_float+0x20a>
 8005c06:	f1b9 0f00 	cmp.w	r9, #0
 8005c0a:	f47f af3c 	bne.w	8005a86 <_scanf_float+0x6a>
 8005c0e:	6822      	ldr	r2, [r4, #0]
 8005c10:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005c14:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005c18:	f47f af39 	bne.w	8005a8e <_scanf_float+0x72>
 8005c1c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c20:	2501      	movs	r5, #1
 8005c22:	6022      	str	r2, [r4, #0]
 8005c24:	e7c0      	b.n	8005ba8 <_scanf_float+0x18c>
 8005c26:	2d03      	cmp	r5, #3
 8005c28:	d0e2      	beq.n	8005bf0 <_scanf_float+0x1d4>
 8005c2a:	2d05      	cmp	r5, #5
 8005c2c:	e7de      	b.n	8005bec <_scanf_float+0x1d0>
 8005c2e:	2d02      	cmp	r5, #2
 8005c30:	f47f af26 	bne.w	8005a80 <_scanf_float+0x64>
 8005c34:	2503      	movs	r5, #3
 8005c36:	e7b7      	b.n	8005ba8 <_scanf_float+0x18c>
 8005c38:	2d06      	cmp	r5, #6
 8005c3a:	f47f af21 	bne.w	8005a80 <_scanf_float+0x64>
 8005c3e:	2507      	movs	r5, #7
 8005c40:	e7b2      	b.n	8005ba8 <_scanf_float+0x18c>
 8005c42:	6822      	ldr	r2, [r4, #0]
 8005c44:	0591      	lsls	r1, r2, #22
 8005c46:	f57f af1b 	bpl.w	8005a80 <_scanf_float+0x64>
 8005c4a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005c4e:	6022      	str	r2, [r4, #0]
 8005c50:	f8cd 9004 	str.w	r9, [sp, #4]
 8005c54:	e7a8      	b.n	8005ba8 <_scanf_float+0x18c>
 8005c56:	6822      	ldr	r2, [r4, #0]
 8005c58:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005c5c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005c60:	d006      	beq.n	8005c70 <_scanf_float+0x254>
 8005c62:	0550      	lsls	r0, r2, #21
 8005c64:	f57f af0c 	bpl.w	8005a80 <_scanf_float+0x64>
 8005c68:	f1b9 0f00 	cmp.w	r9, #0
 8005c6c:	f43f af0f 	beq.w	8005a8e <_scanf_float+0x72>
 8005c70:	0591      	lsls	r1, r2, #22
 8005c72:	bf58      	it	pl
 8005c74:	9901      	ldrpl	r1, [sp, #4]
 8005c76:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005c7a:	bf58      	it	pl
 8005c7c:	eba9 0101 	subpl.w	r1, r9, r1
 8005c80:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005c84:	f04f 0900 	mov.w	r9, #0
 8005c88:	bf58      	it	pl
 8005c8a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005c8e:	6022      	str	r2, [r4, #0]
 8005c90:	e78a      	b.n	8005ba8 <_scanf_float+0x18c>
 8005c92:	f04f 0a03 	mov.w	sl, #3
 8005c96:	e787      	b.n	8005ba8 <_scanf_float+0x18c>
 8005c98:	4639      	mov	r1, r7
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ca0:	4798      	blx	r3
 8005ca2:	2800      	cmp	r0, #0
 8005ca4:	f43f aedf 	beq.w	8005a66 <_scanf_float+0x4a>
 8005ca8:	e6ea      	b.n	8005a80 <_scanf_float+0x64>
 8005caa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cae:	463a      	mov	r2, r7
 8005cb0:	4640      	mov	r0, r8
 8005cb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cb6:	4798      	blx	r3
 8005cb8:	6923      	ldr	r3, [r4, #16]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	6123      	str	r3, [r4, #16]
 8005cbe:	e6ec      	b.n	8005a9a <_scanf_float+0x7e>
 8005cc0:	1e6b      	subs	r3, r5, #1
 8005cc2:	2b06      	cmp	r3, #6
 8005cc4:	d825      	bhi.n	8005d12 <_scanf_float+0x2f6>
 8005cc6:	2d02      	cmp	r5, #2
 8005cc8:	d836      	bhi.n	8005d38 <_scanf_float+0x31c>
 8005cca:	455e      	cmp	r6, fp
 8005ccc:	f67f aee8 	bls.w	8005aa0 <_scanf_float+0x84>
 8005cd0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cd4:	463a      	mov	r2, r7
 8005cd6:	4640      	mov	r0, r8
 8005cd8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005cdc:	4798      	blx	r3
 8005cde:	6923      	ldr	r3, [r4, #16]
 8005ce0:	3b01      	subs	r3, #1
 8005ce2:	6123      	str	r3, [r4, #16]
 8005ce4:	e7f1      	b.n	8005cca <_scanf_float+0x2ae>
 8005ce6:	9802      	ldr	r0, [sp, #8]
 8005ce8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005cec:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005cf0:	463a      	mov	r2, r7
 8005cf2:	9002      	str	r0, [sp, #8]
 8005cf4:	4640      	mov	r0, r8
 8005cf6:	4798      	blx	r3
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	6123      	str	r3, [r4, #16]
 8005cfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005d02:	fa5f fa8a 	uxtb.w	sl, sl
 8005d06:	f1ba 0f02 	cmp.w	sl, #2
 8005d0a:	d1ec      	bne.n	8005ce6 <_scanf_float+0x2ca>
 8005d0c:	3d03      	subs	r5, #3
 8005d0e:	b2ed      	uxtb	r5, r5
 8005d10:	1b76      	subs	r6, r6, r5
 8005d12:	6823      	ldr	r3, [r4, #0]
 8005d14:	05da      	lsls	r2, r3, #23
 8005d16:	d52f      	bpl.n	8005d78 <_scanf_float+0x35c>
 8005d18:	055b      	lsls	r3, r3, #21
 8005d1a:	d510      	bpl.n	8005d3e <_scanf_float+0x322>
 8005d1c:	455e      	cmp	r6, fp
 8005d1e:	f67f aebf 	bls.w	8005aa0 <_scanf_float+0x84>
 8005d22:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d26:	463a      	mov	r2, r7
 8005d28:	4640      	mov	r0, r8
 8005d2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005d2e:	4798      	blx	r3
 8005d30:	6923      	ldr	r3, [r4, #16]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	e7f1      	b.n	8005d1c <_scanf_float+0x300>
 8005d38:	46aa      	mov	sl, r5
 8005d3a:	9602      	str	r6, [sp, #8]
 8005d3c:	e7df      	b.n	8005cfe <_scanf_float+0x2e2>
 8005d3e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005d42:	6923      	ldr	r3, [r4, #16]
 8005d44:	2965      	cmp	r1, #101	; 0x65
 8005d46:	f103 33ff 	add.w	r3, r3, #4294967295
 8005d4a:	f106 35ff 	add.w	r5, r6, #4294967295
 8005d4e:	6123      	str	r3, [r4, #16]
 8005d50:	d00c      	beq.n	8005d6c <_scanf_float+0x350>
 8005d52:	2945      	cmp	r1, #69	; 0x45
 8005d54:	d00a      	beq.n	8005d6c <_scanf_float+0x350>
 8005d56:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d5a:	463a      	mov	r2, r7
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	4798      	blx	r3
 8005d60:	6923      	ldr	r3, [r4, #16]
 8005d62:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	1eb5      	subs	r5, r6, #2
 8005d6a:	6123      	str	r3, [r4, #16]
 8005d6c:	463a      	mov	r2, r7
 8005d6e:	4640      	mov	r0, r8
 8005d70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005d74:	4798      	blx	r3
 8005d76:	462e      	mov	r6, r5
 8005d78:	6825      	ldr	r5, [r4, #0]
 8005d7a:	f015 0510 	ands.w	r5, r5, #16
 8005d7e:	d155      	bne.n	8005e2c <_scanf_float+0x410>
 8005d80:	7035      	strb	r5, [r6, #0]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005d88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8c:	d11d      	bne.n	8005dca <_scanf_float+0x3ae>
 8005d8e:	9b01      	ldr	r3, [sp, #4]
 8005d90:	454b      	cmp	r3, r9
 8005d92:	eba3 0209 	sub.w	r2, r3, r9
 8005d96:	d125      	bne.n	8005de4 <_scanf_float+0x3c8>
 8005d98:	2200      	movs	r2, #0
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	4640      	mov	r0, r8
 8005d9e:	f002 fc2f 	bl	8008600 <_strtod_r>
 8005da2:	9b03      	ldr	r3, [sp, #12]
 8005da4:	f8d4 c000 	ldr.w	ip, [r4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f01c 0f02 	tst.w	ip, #2
 8005dae:	4606      	mov	r6, r0
 8005db0:	460f      	mov	r7, r1
 8005db2:	f103 0204 	add.w	r2, r3, #4
 8005db6:	d020      	beq.n	8005dfa <_scanf_float+0x3de>
 8005db8:	9903      	ldr	r1, [sp, #12]
 8005dba:	600a      	str	r2, [r1, #0]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	e9c3 6700 	strd	r6, r7, [r3]
 8005dc2:	68e3      	ldr	r3, [r4, #12]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	60e3      	str	r3, [r4, #12]
 8005dc8:	e66b      	b.n	8005aa2 <_scanf_float+0x86>
 8005dca:	9b04      	ldr	r3, [sp, #16]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d0e3      	beq.n	8005d98 <_scanf_float+0x37c>
 8005dd0:	9905      	ldr	r1, [sp, #20]
 8005dd2:	230a      	movs	r3, #10
 8005dd4:	462a      	mov	r2, r5
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	3101      	adds	r1, #1
 8005dda:	f002 fc95 	bl	8008708 <_strtol_r>
 8005dde:	9b04      	ldr	r3, [sp, #16]
 8005de0:	9e05      	ldr	r6, [sp, #20]
 8005de2:	1ac2      	subs	r2, r0, r3
 8005de4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005de8:	429e      	cmp	r6, r3
 8005dea:	bf28      	it	cs
 8005dec:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005df0:	4630      	mov	r0, r6
 8005df2:	490f      	ldr	r1, [pc, #60]	; (8005e30 <_scanf_float+0x414>)
 8005df4:	f000 f8d0 	bl	8005f98 <siprintf>
 8005df8:	e7ce      	b.n	8005d98 <_scanf_float+0x37c>
 8005dfa:	f01c 0f04 	tst.w	ip, #4
 8005dfe:	d1db      	bne.n	8005db8 <_scanf_float+0x39c>
 8005e00:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8005e04:	f8cc 2000 	str.w	r2, [ip]
 8005e08:	f8d3 8000 	ldr.w	r8, [r3]
 8005e0c:	4602      	mov	r2, r0
 8005e0e:	460b      	mov	r3, r1
 8005e10:	f7fa fdfc 	bl	8000a0c <__aeabi_dcmpun>
 8005e14:	b128      	cbz	r0, 8005e22 <_scanf_float+0x406>
 8005e16:	4807      	ldr	r0, [pc, #28]	; (8005e34 <_scanf_float+0x418>)
 8005e18:	f000 f9ce 	bl	80061b8 <nanf>
 8005e1c:	f8c8 0000 	str.w	r0, [r8]
 8005e20:	e7cf      	b.n	8005dc2 <_scanf_float+0x3a6>
 8005e22:	4630      	mov	r0, r6
 8005e24:	4639      	mov	r1, r7
 8005e26:	f7fa fe4f 	bl	8000ac8 <__aeabi_d2f>
 8005e2a:	e7f7      	b.n	8005e1c <_scanf_float+0x400>
 8005e2c:	2500      	movs	r5, #0
 8005e2e:	e638      	b.n	8005aa2 <_scanf_float+0x86>
 8005e30:	080099ce 	.word	0x080099ce
 8005e34:	08009d65 	.word	0x08009d65

08005e38 <std>:
 8005e38:	2300      	movs	r3, #0
 8005e3a:	b510      	push	{r4, lr}
 8005e3c:	4604      	mov	r4, r0
 8005e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8005e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e46:	6083      	str	r3, [r0, #8]
 8005e48:	8181      	strh	r1, [r0, #12]
 8005e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8005e4c:	81c2      	strh	r2, [r0, #14]
 8005e4e:	6183      	str	r3, [r0, #24]
 8005e50:	4619      	mov	r1, r3
 8005e52:	2208      	movs	r2, #8
 8005e54:	305c      	adds	r0, #92	; 0x5c
 8005e56:	f000 f923 	bl	80060a0 <memset>
 8005e5a:	4b05      	ldr	r3, [pc, #20]	; (8005e70 <std+0x38>)
 8005e5c:	6224      	str	r4, [r4, #32]
 8005e5e:	6263      	str	r3, [r4, #36]	; 0x24
 8005e60:	4b04      	ldr	r3, [pc, #16]	; (8005e74 <std+0x3c>)
 8005e62:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e64:	4b04      	ldr	r3, [pc, #16]	; (8005e78 <std+0x40>)
 8005e66:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e68:	4b04      	ldr	r3, [pc, #16]	; (8005e7c <std+0x44>)
 8005e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	bf00      	nop
 8005e70:	08005fd9 	.word	0x08005fd9
 8005e74:	08005ffb 	.word	0x08005ffb
 8005e78:	08006033 	.word	0x08006033
 8005e7c:	08006057 	.word	0x08006057

08005e80 <stdio_exit_handler>:
 8005e80:	4a02      	ldr	r2, [pc, #8]	; (8005e8c <stdio_exit_handler+0xc>)
 8005e82:	4903      	ldr	r1, [pc, #12]	; (8005e90 <stdio_exit_handler+0x10>)
 8005e84:	4803      	ldr	r0, [pc, #12]	; (8005e94 <stdio_exit_handler+0x14>)
 8005e86:	f000 b869 	b.w	8005f5c <_fwalk_sglue>
 8005e8a:	bf00      	nop
 8005e8c:	20000010 	.word	0x20000010
 8005e90:	08008ac1 	.word	0x08008ac1
 8005e94:	2000001c 	.word	0x2000001c

08005e98 <cleanup_stdio>:
 8005e98:	6841      	ldr	r1, [r0, #4]
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <cleanup_stdio+0x34>)
 8005e9c:	b510      	push	{r4, lr}
 8005e9e:	4299      	cmp	r1, r3
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	d001      	beq.n	8005ea8 <cleanup_stdio+0x10>
 8005ea4:	f002 fe0c 	bl	8008ac0 <_fflush_r>
 8005ea8:	68a1      	ldr	r1, [r4, #8]
 8005eaa:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <cleanup_stdio+0x38>)
 8005eac:	4299      	cmp	r1, r3
 8005eae:	d002      	beq.n	8005eb6 <cleanup_stdio+0x1e>
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f002 fe05 	bl	8008ac0 <_fflush_r>
 8005eb6:	68e1      	ldr	r1, [r4, #12]
 8005eb8:	4b06      	ldr	r3, [pc, #24]	; (8005ed4 <cleanup_stdio+0x3c>)
 8005eba:	4299      	cmp	r1, r3
 8005ebc:	d004      	beq.n	8005ec8 <cleanup_stdio+0x30>
 8005ebe:	4620      	mov	r0, r4
 8005ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ec4:	f002 bdfc 	b.w	8008ac0 <_fflush_r>
 8005ec8:	bd10      	pop	{r4, pc}
 8005eca:	bf00      	nop
 8005ecc:	200003a4 	.word	0x200003a4
 8005ed0:	2000040c 	.word	0x2000040c
 8005ed4:	20000474 	.word	0x20000474

08005ed8 <global_stdio_init.part.0>:
 8005ed8:	b510      	push	{r4, lr}
 8005eda:	4b0b      	ldr	r3, [pc, #44]	; (8005f08 <global_stdio_init.part.0+0x30>)
 8005edc:	4c0b      	ldr	r4, [pc, #44]	; (8005f0c <global_stdio_init.part.0+0x34>)
 8005ede:	4a0c      	ldr	r2, [pc, #48]	; (8005f10 <global_stdio_init.part.0+0x38>)
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	601a      	str	r2, [r3, #0]
 8005ee4:	2104      	movs	r1, #4
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f7ff ffa6 	bl	8005e38 <std>
 8005eec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	2109      	movs	r1, #9
 8005ef4:	f7ff ffa0 	bl	8005e38 <std>
 8005ef8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005efc:	2202      	movs	r2, #2
 8005efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f02:	2112      	movs	r1, #18
 8005f04:	f7ff bf98 	b.w	8005e38 <std>
 8005f08:	200004dc 	.word	0x200004dc
 8005f0c:	200003a4 	.word	0x200003a4
 8005f10:	08005e81 	.word	0x08005e81

08005f14 <__sfp_lock_acquire>:
 8005f14:	4801      	ldr	r0, [pc, #4]	; (8005f1c <__sfp_lock_acquire+0x8>)
 8005f16:	f000 b93f 	b.w	8006198 <__retarget_lock_acquire_recursive>
 8005f1a:	bf00      	nop
 8005f1c:	200004e5 	.word	0x200004e5

08005f20 <__sfp_lock_release>:
 8005f20:	4801      	ldr	r0, [pc, #4]	; (8005f28 <__sfp_lock_release+0x8>)
 8005f22:	f000 b93a 	b.w	800619a <__retarget_lock_release_recursive>
 8005f26:	bf00      	nop
 8005f28:	200004e5 	.word	0x200004e5

08005f2c <__sinit>:
 8005f2c:	b510      	push	{r4, lr}
 8005f2e:	4604      	mov	r4, r0
 8005f30:	f7ff fff0 	bl	8005f14 <__sfp_lock_acquire>
 8005f34:	6a23      	ldr	r3, [r4, #32]
 8005f36:	b11b      	cbz	r3, 8005f40 <__sinit+0x14>
 8005f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f3c:	f7ff bff0 	b.w	8005f20 <__sfp_lock_release>
 8005f40:	4b04      	ldr	r3, [pc, #16]	; (8005f54 <__sinit+0x28>)
 8005f42:	6223      	str	r3, [r4, #32]
 8005f44:	4b04      	ldr	r3, [pc, #16]	; (8005f58 <__sinit+0x2c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d1f5      	bne.n	8005f38 <__sinit+0xc>
 8005f4c:	f7ff ffc4 	bl	8005ed8 <global_stdio_init.part.0>
 8005f50:	e7f2      	b.n	8005f38 <__sinit+0xc>
 8005f52:	bf00      	nop
 8005f54:	08005e99 	.word	0x08005e99
 8005f58:	200004dc 	.word	0x200004dc

08005f5c <_fwalk_sglue>:
 8005f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f60:	4607      	mov	r7, r0
 8005f62:	4688      	mov	r8, r1
 8005f64:	4614      	mov	r4, r2
 8005f66:	2600      	movs	r6, #0
 8005f68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f6c:	f1b9 0901 	subs.w	r9, r9, #1
 8005f70:	d505      	bpl.n	8005f7e <_fwalk_sglue+0x22>
 8005f72:	6824      	ldr	r4, [r4, #0]
 8005f74:	2c00      	cmp	r4, #0
 8005f76:	d1f7      	bne.n	8005f68 <_fwalk_sglue+0xc>
 8005f78:	4630      	mov	r0, r6
 8005f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f7e:	89ab      	ldrh	r3, [r5, #12]
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d907      	bls.n	8005f94 <_fwalk_sglue+0x38>
 8005f84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f88:	3301      	adds	r3, #1
 8005f8a:	d003      	beq.n	8005f94 <_fwalk_sglue+0x38>
 8005f8c:	4629      	mov	r1, r5
 8005f8e:	4638      	mov	r0, r7
 8005f90:	47c0      	blx	r8
 8005f92:	4306      	orrs	r6, r0
 8005f94:	3568      	adds	r5, #104	; 0x68
 8005f96:	e7e9      	b.n	8005f6c <_fwalk_sglue+0x10>

08005f98 <siprintf>:
 8005f98:	b40e      	push	{r1, r2, r3}
 8005f9a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005f9e:	b500      	push	{lr}
 8005fa0:	b09c      	sub	sp, #112	; 0x70
 8005fa2:	ab1d      	add	r3, sp, #116	; 0x74
 8005fa4:	9002      	str	r0, [sp, #8]
 8005fa6:	9006      	str	r0, [sp, #24]
 8005fa8:	9107      	str	r1, [sp, #28]
 8005faa:	9104      	str	r1, [sp, #16]
 8005fac:	4808      	ldr	r0, [pc, #32]	; (8005fd0 <siprintf+0x38>)
 8005fae:	4909      	ldr	r1, [pc, #36]	; (8005fd4 <siprintf+0x3c>)
 8005fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fb4:	9105      	str	r1, [sp, #20]
 8005fb6:	6800      	ldr	r0, [r0, #0]
 8005fb8:	a902      	add	r1, sp, #8
 8005fba:	9301      	str	r3, [sp, #4]
 8005fbc:	f002 fc00 	bl	80087c0 <_svfiprintf_r>
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	9b02      	ldr	r3, [sp, #8]
 8005fc4:	701a      	strb	r2, [r3, #0]
 8005fc6:	b01c      	add	sp, #112	; 0x70
 8005fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fcc:	b003      	add	sp, #12
 8005fce:	4770      	bx	lr
 8005fd0:	20000068 	.word	0x20000068
 8005fd4:	ffff0208 	.word	0xffff0208

08005fd8 <__sread>:
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	460c      	mov	r4, r1
 8005fdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fe0:	f000 f88c 	bl	80060fc <_read_r>
 8005fe4:	2800      	cmp	r0, #0
 8005fe6:	bfab      	itete	ge
 8005fe8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005fea:	89a3      	ldrhlt	r3, [r4, #12]
 8005fec:	181b      	addge	r3, r3, r0
 8005fee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005ff2:	bfac      	ite	ge
 8005ff4:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ff6:	81a3      	strhlt	r3, [r4, #12]
 8005ff8:	bd10      	pop	{r4, pc}

08005ffa <__swrite>:
 8005ffa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ffe:	461f      	mov	r7, r3
 8006000:	898b      	ldrh	r3, [r1, #12]
 8006002:	4605      	mov	r5, r0
 8006004:	05db      	lsls	r3, r3, #23
 8006006:	460c      	mov	r4, r1
 8006008:	4616      	mov	r6, r2
 800600a:	d505      	bpl.n	8006018 <__swrite+0x1e>
 800600c:	2302      	movs	r3, #2
 800600e:	2200      	movs	r2, #0
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	f000 f860 	bl	80060d8 <_lseek_r>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	4632      	mov	r2, r6
 800601c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006020:	81a3      	strh	r3, [r4, #12]
 8006022:	4628      	mov	r0, r5
 8006024:	463b      	mov	r3, r7
 8006026:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800602a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800602e:	f000 b877 	b.w	8006120 <_write_r>

08006032 <__sseek>:
 8006032:	b510      	push	{r4, lr}
 8006034:	460c      	mov	r4, r1
 8006036:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800603a:	f000 f84d 	bl	80060d8 <_lseek_r>
 800603e:	1c43      	adds	r3, r0, #1
 8006040:	89a3      	ldrh	r3, [r4, #12]
 8006042:	bf15      	itete	ne
 8006044:	6560      	strne	r0, [r4, #84]	; 0x54
 8006046:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800604a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800604e:	81a3      	strheq	r3, [r4, #12]
 8006050:	bf18      	it	ne
 8006052:	81a3      	strhne	r3, [r4, #12]
 8006054:	bd10      	pop	{r4, pc}

08006056 <__sclose>:
 8006056:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800605a:	f000 b82d 	b.w	80060b8 <_close_r>
	...

08006060 <_vsiprintf_r>:
 8006060:	b500      	push	{lr}
 8006062:	b09b      	sub	sp, #108	; 0x6c
 8006064:	9100      	str	r1, [sp, #0]
 8006066:	9104      	str	r1, [sp, #16]
 8006068:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800606c:	9105      	str	r1, [sp, #20]
 800606e:	9102      	str	r1, [sp, #8]
 8006070:	4905      	ldr	r1, [pc, #20]	; (8006088 <_vsiprintf_r+0x28>)
 8006072:	9103      	str	r1, [sp, #12]
 8006074:	4669      	mov	r1, sp
 8006076:	f002 fba3 	bl	80087c0 <_svfiprintf_r>
 800607a:	2200      	movs	r2, #0
 800607c:	9b00      	ldr	r3, [sp, #0]
 800607e:	701a      	strb	r2, [r3, #0]
 8006080:	b01b      	add	sp, #108	; 0x6c
 8006082:	f85d fb04 	ldr.w	pc, [sp], #4
 8006086:	bf00      	nop
 8006088:	ffff0208 	.word	0xffff0208

0800608c <vsiprintf>:
 800608c:	4613      	mov	r3, r2
 800608e:	460a      	mov	r2, r1
 8006090:	4601      	mov	r1, r0
 8006092:	4802      	ldr	r0, [pc, #8]	; (800609c <vsiprintf+0x10>)
 8006094:	6800      	ldr	r0, [r0, #0]
 8006096:	f7ff bfe3 	b.w	8006060 <_vsiprintf_r>
 800609a:	bf00      	nop
 800609c:	20000068 	.word	0x20000068

080060a0 <memset>:
 80060a0:	4603      	mov	r3, r0
 80060a2:	4402      	add	r2, r0
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d100      	bne.n	80060aa <memset+0xa>
 80060a8:	4770      	bx	lr
 80060aa:	f803 1b01 	strb.w	r1, [r3], #1
 80060ae:	e7f9      	b.n	80060a4 <memset+0x4>

080060b0 <_localeconv_r>:
 80060b0:	4800      	ldr	r0, [pc, #0]	; (80060b4 <_localeconv_r+0x4>)
 80060b2:	4770      	bx	lr
 80060b4:	2000015c 	.word	0x2000015c

080060b8 <_close_r>:
 80060b8:	b538      	push	{r3, r4, r5, lr}
 80060ba:	2300      	movs	r3, #0
 80060bc:	4d05      	ldr	r5, [pc, #20]	; (80060d4 <_close_r+0x1c>)
 80060be:	4604      	mov	r4, r0
 80060c0:	4608      	mov	r0, r1
 80060c2:	602b      	str	r3, [r5, #0]
 80060c4:	f7fb ffde 	bl	8002084 <_close>
 80060c8:	1c43      	adds	r3, r0, #1
 80060ca:	d102      	bne.n	80060d2 <_close_r+0x1a>
 80060cc:	682b      	ldr	r3, [r5, #0]
 80060ce:	b103      	cbz	r3, 80060d2 <_close_r+0x1a>
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	bd38      	pop	{r3, r4, r5, pc}
 80060d4:	200004e0 	.word	0x200004e0

080060d8 <_lseek_r>:
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4604      	mov	r4, r0
 80060dc:	4608      	mov	r0, r1
 80060de:	4611      	mov	r1, r2
 80060e0:	2200      	movs	r2, #0
 80060e2:	4d05      	ldr	r5, [pc, #20]	; (80060f8 <_lseek_r+0x20>)
 80060e4:	602a      	str	r2, [r5, #0]
 80060e6:	461a      	mov	r2, r3
 80060e8:	f7fb fff0 	bl	80020cc <_lseek>
 80060ec:	1c43      	adds	r3, r0, #1
 80060ee:	d102      	bne.n	80060f6 <_lseek_r+0x1e>
 80060f0:	682b      	ldr	r3, [r5, #0]
 80060f2:	b103      	cbz	r3, 80060f6 <_lseek_r+0x1e>
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	bd38      	pop	{r3, r4, r5, pc}
 80060f8:	200004e0 	.word	0x200004e0

080060fc <_read_r>:
 80060fc:	b538      	push	{r3, r4, r5, lr}
 80060fe:	4604      	mov	r4, r0
 8006100:	4608      	mov	r0, r1
 8006102:	4611      	mov	r1, r2
 8006104:	2200      	movs	r2, #0
 8006106:	4d05      	ldr	r5, [pc, #20]	; (800611c <_read_r+0x20>)
 8006108:	602a      	str	r2, [r5, #0]
 800610a:	461a      	mov	r2, r3
 800610c:	f7fb ff81 	bl	8002012 <_read>
 8006110:	1c43      	adds	r3, r0, #1
 8006112:	d102      	bne.n	800611a <_read_r+0x1e>
 8006114:	682b      	ldr	r3, [r5, #0]
 8006116:	b103      	cbz	r3, 800611a <_read_r+0x1e>
 8006118:	6023      	str	r3, [r4, #0]
 800611a:	bd38      	pop	{r3, r4, r5, pc}
 800611c:	200004e0 	.word	0x200004e0

08006120 <_write_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4604      	mov	r4, r0
 8006124:	4608      	mov	r0, r1
 8006126:	4611      	mov	r1, r2
 8006128:	2200      	movs	r2, #0
 800612a:	4d05      	ldr	r5, [pc, #20]	; (8006140 <_write_r+0x20>)
 800612c:	602a      	str	r2, [r5, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	f7fb ff8c 	bl	800204c <_write>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d102      	bne.n	800613e <_write_r+0x1e>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	b103      	cbz	r3, 800613e <_write_r+0x1e>
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	bd38      	pop	{r3, r4, r5, pc}
 8006140:	200004e0 	.word	0x200004e0

08006144 <__errno>:
 8006144:	4b01      	ldr	r3, [pc, #4]	; (800614c <__errno+0x8>)
 8006146:	6818      	ldr	r0, [r3, #0]
 8006148:	4770      	bx	lr
 800614a:	bf00      	nop
 800614c:	20000068 	.word	0x20000068

08006150 <__libc_init_array>:
 8006150:	b570      	push	{r4, r5, r6, lr}
 8006152:	2600      	movs	r6, #0
 8006154:	4d0c      	ldr	r5, [pc, #48]	; (8006188 <__libc_init_array+0x38>)
 8006156:	4c0d      	ldr	r4, [pc, #52]	; (800618c <__libc_init_array+0x3c>)
 8006158:	1b64      	subs	r4, r4, r5
 800615a:	10a4      	asrs	r4, r4, #2
 800615c:	42a6      	cmp	r6, r4
 800615e:	d109      	bne.n	8006174 <__libc_init_array+0x24>
 8006160:	f003 fbc0 	bl	80098e4 <_init>
 8006164:	2600      	movs	r6, #0
 8006166:	4d0a      	ldr	r5, [pc, #40]	; (8006190 <__libc_init_array+0x40>)
 8006168:	4c0a      	ldr	r4, [pc, #40]	; (8006194 <__libc_init_array+0x44>)
 800616a:	1b64      	subs	r4, r4, r5
 800616c:	10a4      	asrs	r4, r4, #2
 800616e:	42a6      	cmp	r6, r4
 8006170:	d105      	bne.n	800617e <__libc_init_array+0x2e>
 8006172:	bd70      	pop	{r4, r5, r6, pc}
 8006174:	f855 3b04 	ldr.w	r3, [r5], #4
 8006178:	4798      	blx	r3
 800617a:	3601      	adds	r6, #1
 800617c:	e7ee      	b.n	800615c <__libc_init_array+0xc>
 800617e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006182:	4798      	blx	r3
 8006184:	3601      	adds	r6, #1
 8006186:	e7f2      	b.n	800616e <__libc_init_array+0x1e>
 8006188:	08009dc8 	.word	0x08009dc8
 800618c:	08009dc8 	.word	0x08009dc8
 8006190:	08009dc8 	.word	0x08009dc8
 8006194:	08009dcc 	.word	0x08009dcc

08006198 <__retarget_lock_acquire_recursive>:
 8006198:	4770      	bx	lr

0800619a <__retarget_lock_release_recursive>:
 800619a:	4770      	bx	lr

0800619c <memchr>:
 800619c:	4603      	mov	r3, r0
 800619e:	b510      	push	{r4, lr}
 80061a0:	b2c9      	uxtb	r1, r1
 80061a2:	4402      	add	r2, r0
 80061a4:	4293      	cmp	r3, r2
 80061a6:	4618      	mov	r0, r3
 80061a8:	d101      	bne.n	80061ae <memchr+0x12>
 80061aa:	2000      	movs	r0, #0
 80061ac:	e003      	b.n	80061b6 <memchr+0x1a>
 80061ae:	7804      	ldrb	r4, [r0, #0]
 80061b0:	3301      	adds	r3, #1
 80061b2:	428c      	cmp	r4, r1
 80061b4:	d1f6      	bne.n	80061a4 <memchr+0x8>
 80061b6:	bd10      	pop	{r4, pc}

080061b8 <nanf>:
 80061b8:	4800      	ldr	r0, [pc, #0]	; (80061bc <nanf+0x4>)
 80061ba:	4770      	bx	lr
 80061bc:	7fc00000 	.word	0x7fc00000

080061c0 <quorem>:
 80061c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061c4:	6903      	ldr	r3, [r0, #16]
 80061c6:	690c      	ldr	r4, [r1, #16]
 80061c8:	4607      	mov	r7, r0
 80061ca:	42a3      	cmp	r3, r4
 80061cc:	db7f      	blt.n	80062ce <quorem+0x10e>
 80061ce:	3c01      	subs	r4, #1
 80061d0:	f100 0514 	add.w	r5, r0, #20
 80061d4:	f101 0814 	add.w	r8, r1, #20
 80061d8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80061dc:	9301      	str	r3, [sp, #4]
 80061de:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80061e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80061e6:	3301      	adds	r3, #1
 80061e8:	429a      	cmp	r2, r3
 80061ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80061ee:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80061f2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80061f6:	d331      	bcc.n	800625c <quorem+0x9c>
 80061f8:	f04f 0e00 	mov.w	lr, #0
 80061fc:	4640      	mov	r0, r8
 80061fe:	46ac      	mov	ip, r5
 8006200:	46f2      	mov	sl, lr
 8006202:	f850 2b04 	ldr.w	r2, [r0], #4
 8006206:	b293      	uxth	r3, r2
 8006208:	fb06 e303 	mla	r3, r6, r3, lr
 800620c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006210:	0c1a      	lsrs	r2, r3, #16
 8006212:	b29b      	uxth	r3, r3
 8006214:	fb06 220e 	mla	r2, r6, lr, r2
 8006218:	ebaa 0303 	sub.w	r3, sl, r3
 800621c:	f8dc a000 	ldr.w	sl, [ip]
 8006220:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006224:	fa1f fa8a 	uxth.w	sl, sl
 8006228:	4453      	add	r3, sl
 800622a:	f8dc a000 	ldr.w	sl, [ip]
 800622e:	b292      	uxth	r2, r2
 8006230:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006234:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006238:	b29b      	uxth	r3, r3
 800623a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800623e:	4581      	cmp	r9, r0
 8006240:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006244:	f84c 3b04 	str.w	r3, [ip], #4
 8006248:	d2db      	bcs.n	8006202 <quorem+0x42>
 800624a:	f855 300b 	ldr.w	r3, [r5, fp]
 800624e:	b92b      	cbnz	r3, 800625c <quorem+0x9c>
 8006250:	9b01      	ldr	r3, [sp, #4]
 8006252:	3b04      	subs	r3, #4
 8006254:	429d      	cmp	r5, r3
 8006256:	461a      	mov	r2, r3
 8006258:	d32d      	bcc.n	80062b6 <quorem+0xf6>
 800625a:	613c      	str	r4, [r7, #16]
 800625c:	4638      	mov	r0, r7
 800625e:	f001 f9df 	bl	8007620 <__mcmp>
 8006262:	2800      	cmp	r0, #0
 8006264:	db23      	blt.n	80062ae <quorem+0xee>
 8006266:	4629      	mov	r1, r5
 8006268:	2000      	movs	r0, #0
 800626a:	3601      	adds	r6, #1
 800626c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006270:	f8d1 c000 	ldr.w	ip, [r1]
 8006274:	b293      	uxth	r3, r2
 8006276:	1ac3      	subs	r3, r0, r3
 8006278:	0c12      	lsrs	r2, r2, #16
 800627a:	fa1f f08c 	uxth.w	r0, ip
 800627e:	4403      	add	r3, r0
 8006280:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006284:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006288:	b29b      	uxth	r3, r3
 800628a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800628e:	45c1      	cmp	r9, r8
 8006290:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006294:	f841 3b04 	str.w	r3, [r1], #4
 8006298:	d2e8      	bcs.n	800626c <quorem+0xac>
 800629a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800629e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062a2:	b922      	cbnz	r2, 80062ae <quorem+0xee>
 80062a4:	3b04      	subs	r3, #4
 80062a6:	429d      	cmp	r5, r3
 80062a8:	461a      	mov	r2, r3
 80062aa:	d30a      	bcc.n	80062c2 <quorem+0x102>
 80062ac:	613c      	str	r4, [r7, #16]
 80062ae:	4630      	mov	r0, r6
 80062b0:	b003      	add	sp, #12
 80062b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b6:	6812      	ldr	r2, [r2, #0]
 80062b8:	3b04      	subs	r3, #4
 80062ba:	2a00      	cmp	r2, #0
 80062bc:	d1cd      	bne.n	800625a <quorem+0x9a>
 80062be:	3c01      	subs	r4, #1
 80062c0:	e7c8      	b.n	8006254 <quorem+0x94>
 80062c2:	6812      	ldr	r2, [r2, #0]
 80062c4:	3b04      	subs	r3, #4
 80062c6:	2a00      	cmp	r2, #0
 80062c8:	d1f0      	bne.n	80062ac <quorem+0xec>
 80062ca:	3c01      	subs	r4, #1
 80062cc:	e7eb      	b.n	80062a6 <quorem+0xe6>
 80062ce:	2000      	movs	r0, #0
 80062d0:	e7ee      	b.n	80062b0 <quorem+0xf0>
 80062d2:	0000      	movs	r0, r0
 80062d4:	0000      	movs	r0, r0
	...

080062d8 <_dtoa_r>:
 80062d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062dc:	4616      	mov	r6, r2
 80062de:	461f      	mov	r7, r3
 80062e0:	69c4      	ldr	r4, [r0, #28]
 80062e2:	b099      	sub	sp, #100	; 0x64
 80062e4:	4605      	mov	r5, r0
 80062e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80062ea:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 80062ee:	b974      	cbnz	r4, 800630e <_dtoa_r+0x36>
 80062f0:	2010      	movs	r0, #16
 80062f2:	f000 fe1d 	bl	8006f30 <malloc>
 80062f6:	4602      	mov	r2, r0
 80062f8:	61e8      	str	r0, [r5, #28]
 80062fa:	b920      	cbnz	r0, 8006306 <_dtoa_r+0x2e>
 80062fc:	21ef      	movs	r1, #239	; 0xef
 80062fe:	4bac      	ldr	r3, [pc, #688]	; (80065b0 <_dtoa_r+0x2d8>)
 8006300:	48ac      	ldr	r0, [pc, #688]	; (80065b4 <_dtoa_r+0x2dc>)
 8006302:	f002 fc55 	bl	8008bb0 <__assert_func>
 8006306:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800630a:	6004      	str	r4, [r0, #0]
 800630c:	60c4      	str	r4, [r0, #12]
 800630e:	69eb      	ldr	r3, [r5, #28]
 8006310:	6819      	ldr	r1, [r3, #0]
 8006312:	b151      	cbz	r1, 800632a <_dtoa_r+0x52>
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	2301      	movs	r3, #1
 8006318:	4093      	lsls	r3, r2
 800631a:	604a      	str	r2, [r1, #4]
 800631c:	608b      	str	r3, [r1, #8]
 800631e:	4628      	mov	r0, r5
 8006320:	f000 fefa 	bl	8007118 <_Bfree>
 8006324:	2200      	movs	r2, #0
 8006326:	69eb      	ldr	r3, [r5, #28]
 8006328:	601a      	str	r2, [r3, #0]
 800632a:	1e3b      	subs	r3, r7, #0
 800632c:	bfaf      	iteee	ge
 800632e:	2300      	movge	r3, #0
 8006330:	2201      	movlt	r2, #1
 8006332:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006336:	9305      	strlt	r3, [sp, #20]
 8006338:	bfa8      	it	ge
 800633a:	f8c8 3000 	strge.w	r3, [r8]
 800633e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006342:	4b9d      	ldr	r3, [pc, #628]	; (80065b8 <_dtoa_r+0x2e0>)
 8006344:	bfb8      	it	lt
 8006346:	f8c8 2000 	strlt.w	r2, [r8]
 800634a:	ea33 0309 	bics.w	r3, r3, r9
 800634e:	d119      	bne.n	8006384 <_dtoa_r+0xac>
 8006350:	f242 730f 	movw	r3, #9999	; 0x270f
 8006354:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006356:	6013      	str	r3, [r2, #0]
 8006358:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800635c:	4333      	orrs	r3, r6
 800635e:	f000 8589 	beq.w	8006e74 <_dtoa_r+0xb9c>
 8006362:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006364:	b953      	cbnz	r3, 800637c <_dtoa_r+0xa4>
 8006366:	4b95      	ldr	r3, [pc, #596]	; (80065bc <_dtoa_r+0x2e4>)
 8006368:	e023      	b.n	80063b2 <_dtoa_r+0xda>
 800636a:	4b95      	ldr	r3, [pc, #596]	; (80065c0 <_dtoa_r+0x2e8>)
 800636c:	9303      	str	r3, [sp, #12]
 800636e:	3308      	adds	r3, #8
 8006370:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006372:	6013      	str	r3, [r2, #0]
 8006374:	9803      	ldr	r0, [sp, #12]
 8006376:	b019      	add	sp, #100	; 0x64
 8006378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800637c:	4b8f      	ldr	r3, [pc, #572]	; (80065bc <_dtoa_r+0x2e4>)
 800637e:	9303      	str	r3, [sp, #12]
 8006380:	3303      	adds	r3, #3
 8006382:	e7f5      	b.n	8006370 <_dtoa_r+0x98>
 8006384:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006388:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800638c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006390:	2200      	movs	r2, #0
 8006392:	2300      	movs	r3, #0
 8006394:	f7fa fb08 	bl	80009a8 <__aeabi_dcmpeq>
 8006398:	4680      	mov	r8, r0
 800639a:	b160      	cbz	r0, 80063b6 <_dtoa_r+0xde>
 800639c:	2301      	movs	r3, #1
 800639e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80063a0:	6013      	str	r3, [r2, #0]
 80063a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f000 8562 	beq.w	8006e6e <_dtoa_r+0xb96>
 80063aa:	4b86      	ldr	r3, [pc, #536]	; (80065c4 <_dtoa_r+0x2ec>)
 80063ac:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	3b01      	subs	r3, #1
 80063b2:	9303      	str	r3, [sp, #12]
 80063b4:	e7de      	b.n	8006374 <_dtoa_r+0x9c>
 80063b6:	ab16      	add	r3, sp, #88	; 0x58
 80063b8:	9301      	str	r3, [sp, #4]
 80063ba:	ab17      	add	r3, sp, #92	; 0x5c
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	4628      	mov	r0, r5
 80063c0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80063c4:	f001 fa3c 	bl	8007840 <__d2b>
 80063c8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80063cc:	4682      	mov	sl, r0
 80063ce:	2c00      	cmp	r4, #0
 80063d0:	d07e      	beq.n	80064d0 <_dtoa_r+0x1f8>
 80063d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80063d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80063d8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80063dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80063e0:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80063e4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80063e8:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 80063ec:	4619      	mov	r1, r3
 80063ee:	2200      	movs	r2, #0
 80063f0:	4b75      	ldr	r3, [pc, #468]	; (80065c8 <_dtoa_r+0x2f0>)
 80063f2:	f7f9 feb9 	bl	8000168 <__aeabi_dsub>
 80063f6:	a368      	add	r3, pc, #416	; (adr r3, 8006598 <_dtoa_r+0x2c0>)
 80063f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063fc:	f7fa f86c 	bl	80004d8 <__aeabi_dmul>
 8006400:	a367      	add	r3, pc, #412	; (adr r3, 80065a0 <_dtoa_r+0x2c8>)
 8006402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006406:	f7f9 feb1 	bl	800016c <__adddf3>
 800640a:	4606      	mov	r6, r0
 800640c:	4620      	mov	r0, r4
 800640e:	460f      	mov	r7, r1
 8006410:	f7f9 fff8 	bl	8000404 <__aeabi_i2d>
 8006414:	a364      	add	r3, pc, #400	; (adr r3, 80065a8 <_dtoa_r+0x2d0>)
 8006416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641a:	f7fa f85d 	bl	80004d8 <__aeabi_dmul>
 800641e:	4602      	mov	r2, r0
 8006420:	460b      	mov	r3, r1
 8006422:	4630      	mov	r0, r6
 8006424:	4639      	mov	r1, r7
 8006426:	f7f9 fea1 	bl	800016c <__adddf3>
 800642a:	4606      	mov	r6, r0
 800642c:	460f      	mov	r7, r1
 800642e:	f7fa fb03 	bl	8000a38 <__aeabi_d2iz>
 8006432:	2200      	movs	r2, #0
 8006434:	4683      	mov	fp, r0
 8006436:	2300      	movs	r3, #0
 8006438:	4630      	mov	r0, r6
 800643a:	4639      	mov	r1, r7
 800643c:	f7fa fabe 	bl	80009bc <__aeabi_dcmplt>
 8006440:	b148      	cbz	r0, 8006456 <_dtoa_r+0x17e>
 8006442:	4658      	mov	r0, fp
 8006444:	f7f9 ffde 	bl	8000404 <__aeabi_i2d>
 8006448:	4632      	mov	r2, r6
 800644a:	463b      	mov	r3, r7
 800644c:	f7fa faac 	bl	80009a8 <__aeabi_dcmpeq>
 8006450:	b908      	cbnz	r0, 8006456 <_dtoa_r+0x17e>
 8006452:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006456:	f1bb 0f16 	cmp.w	fp, #22
 800645a:	d857      	bhi.n	800650c <_dtoa_r+0x234>
 800645c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006460:	4b5a      	ldr	r3, [pc, #360]	; (80065cc <_dtoa_r+0x2f4>)
 8006462:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	f7fa faa7 	bl	80009bc <__aeabi_dcmplt>
 800646e:	2800      	cmp	r0, #0
 8006470:	d04e      	beq.n	8006510 <_dtoa_r+0x238>
 8006472:	2300      	movs	r3, #0
 8006474:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006478:	930f      	str	r3, [sp, #60]	; 0x3c
 800647a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800647c:	1b1b      	subs	r3, r3, r4
 800647e:	1e5a      	subs	r2, r3, #1
 8006480:	bf46      	itte	mi
 8006482:	f1c3 0901 	rsbmi	r9, r3, #1
 8006486:	2300      	movmi	r3, #0
 8006488:	f04f 0900 	movpl.w	r9, #0
 800648c:	9209      	str	r2, [sp, #36]	; 0x24
 800648e:	bf48      	it	mi
 8006490:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006492:	f1bb 0f00 	cmp.w	fp, #0
 8006496:	db3d      	blt.n	8006514 <_dtoa_r+0x23c>
 8006498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800649a:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800649e:	445b      	add	r3, fp
 80064a0:	9309      	str	r3, [sp, #36]	; 0x24
 80064a2:	2300      	movs	r3, #0
 80064a4:	930a      	str	r3, [sp, #40]	; 0x28
 80064a6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064a8:	2b09      	cmp	r3, #9
 80064aa:	d867      	bhi.n	800657c <_dtoa_r+0x2a4>
 80064ac:	2b05      	cmp	r3, #5
 80064ae:	bfc4      	itt	gt
 80064b0:	3b04      	subgt	r3, #4
 80064b2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80064b4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80064b6:	bfc8      	it	gt
 80064b8:	2400      	movgt	r4, #0
 80064ba:	f1a3 0302 	sub.w	r3, r3, #2
 80064be:	bfd8      	it	le
 80064c0:	2401      	movle	r4, #1
 80064c2:	2b03      	cmp	r3, #3
 80064c4:	f200 8086 	bhi.w	80065d4 <_dtoa_r+0x2fc>
 80064c8:	e8df f003 	tbb	[pc, r3]
 80064cc:	5637392c 	.word	0x5637392c
 80064d0:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 80064d4:	441c      	add	r4, r3
 80064d6:	f204 4332 	addw	r3, r4, #1074	; 0x432
 80064da:	2b20      	cmp	r3, #32
 80064dc:	bfc1      	itttt	gt
 80064de:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80064e2:	fa09 f903 	lslgt.w	r9, r9, r3
 80064e6:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 80064ea:	fa26 f303 	lsrgt.w	r3, r6, r3
 80064ee:	bfd6      	itet	le
 80064f0:	f1c3 0320 	rsble	r3, r3, #32
 80064f4:	ea49 0003 	orrgt.w	r0, r9, r3
 80064f8:	fa06 f003 	lslle.w	r0, r6, r3
 80064fc:	f7f9 ff72 	bl	80003e4 <__aeabi_ui2d>
 8006500:	2201      	movs	r2, #1
 8006502:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006506:	3c01      	subs	r4, #1
 8006508:	9213      	str	r2, [sp, #76]	; 0x4c
 800650a:	e76f      	b.n	80063ec <_dtoa_r+0x114>
 800650c:	2301      	movs	r3, #1
 800650e:	e7b3      	b.n	8006478 <_dtoa_r+0x1a0>
 8006510:	900f      	str	r0, [sp, #60]	; 0x3c
 8006512:	e7b2      	b.n	800647a <_dtoa_r+0x1a2>
 8006514:	f1cb 0300 	rsb	r3, fp, #0
 8006518:	930a      	str	r3, [sp, #40]	; 0x28
 800651a:	2300      	movs	r3, #0
 800651c:	eba9 090b 	sub.w	r9, r9, fp
 8006520:	930e      	str	r3, [sp, #56]	; 0x38
 8006522:	e7c0      	b.n	80064a6 <_dtoa_r+0x1ce>
 8006524:	2300      	movs	r3, #0
 8006526:	930b      	str	r3, [sp, #44]	; 0x2c
 8006528:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800652a:	2b00      	cmp	r3, #0
 800652c:	dc55      	bgt.n	80065da <_dtoa_r+0x302>
 800652e:	2301      	movs	r3, #1
 8006530:	461a      	mov	r2, r3
 8006532:	9306      	str	r3, [sp, #24]
 8006534:	9308      	str	r3, [sp, #32]
 8006536:	9223      	str	r2, [sp, #140]	; 0x8c
 8006538:	e00b      	b.n	8006552 <_dtoa_r+0x27a>
 800653a:	2301      	movs	r3, #1
 800653c:	e7f3      	b.n	8006526 <_dtoa_r+0x24e>
 800653e:	2300      	movs	r3, #0
 8006540:	930b      	str	r3, [sp, #44]	; 0x2c
 8006542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006544:	445b      	add	r3, fp
 8006546:	9306      	str	r3, [sp, #24]
 8006548:	3301      	adds	r3, #1
 800654a:	2b01      	cmp	r3, #1
 800654c:	9308      	str	r3, [sp, #32]
 800654e:	bfb8      	it	lt
 8006550:	2301      	movlt	r3, #1
 8006552:	2100      	movs	r1, #0
 8006554:	2204      	movs	r2, #4
 8006556:	69e8      	ldr	r0, [r5, #28]
 8006558:	f102 0614 	add.w	r6, r2, #20
 800655c:	429e      	cmp	r6, r3
 800655e:	d940      	bls.n	80065e2 <_dtoa_r+0x30a>
 8006560:	6041      	str	r1, [r0, #4]
 8006562:	4628      	mov	r0, r5
 8006564:	f000 fd98 	bl	8007098 <_Balloc>
 8006568:	9003      	str	r0, [sp, #12]
 800656a:	2800      	cmp	r0, #0
 800656c:	d13c      	bne.n	80065e8 <_dtoa_r+0x310>
 800656e:	4602      	mov	r2, r0
 8006570:	f240 11af 	movw	r1, #431	; 0x1af
 8006574:	4b16      	ldr	r3, [pc, #88]	; (80065d0 <_dtoa_r+0x2f8>)
 8006576:	e6c3      	b.n	8006300 <_dtoa_r+0x28>
 8006578:	2301      	movs	r3, #1
 800657a:	e7e1      	b.n	8006540 <_dtoa_r+0x268>
 800657c:	2401      	movs	r4, #1
 800657e:	2300      	movs	r3, #0
 8006580:	940b      	str	r4, [sp, #44]	; 0x2c
 8006582:	9322      	str	r3, [sp, #136]	; 0x88
 8006584:	f04f 33ff 	mov.w	r3, #4294967295
 8006588:	2200      	movs	r2, #0
 800658a:	9306      	str	r3, [sp, #24]
 800658c:	9308      	str	r3, [sp, #32]
 800658e:	2312      	movs	r3, #18
 8006590:	e7d1      	b.n	8006536 <_dtoa_r+0x25e>
 8006592:	bf00      	nop
 8006594:	f3af 8000 	nop.w
 8006598:	636f4361 	.word	0x636f4361
 800659c:	3fd287a7 	.word	0x3fd287a7
 80065a0:	8b60c8b3 	.word	0x8b60c8b3
 80065a4:	3fc68a28 	.word	0x3fc68a28
 80065a8:	509f79fb 	.word	0x509f79fb
 80065ac:	3fd34413 	.word	0x3fd34413
 80065b0:	080099e0 	.word	0x080099e0
 80065b4:	080099f7 	.word	0x080099f7
 80065b8:	7ff00000 	.word	0x7ff00000
 80065bc:	080099dc 	.word	0x080099dc
 80065c0:	080099d3 	.word	0x080099d3
 80065c4:	080099ab 	.word	0x080099ab
 80065c8:	3ff80000 	.word	0x3ff80000
 80065cc:	08009ae8 	.word	0x08009ae8
 80065d0:	08009a4f 	.word	0x08009a4f
 80065d4:	2301      	movs	r3, #1
 80065d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80065d8:	e7d4      	b.n	8006584 <_dtoa_r+0x2ac>
 80065da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80065dc:	9306      	str	r3, [sp, #24]
 80065de:	9308      	str	r3, [sp, #32]
 80065e0:	e7b7      	b.n	8006552 <_dtoa_r+0x27a>
 80065e2:	3101      	adds	r1, #1
 80065e4:	0052      	lsls	r2, r2, #1
 80065e6:	e7b7      	b.n	8006558 <_dtoa_r+0x280>
 80065e8:	69eb      	ldr	r3, [r5, #28]
 80065ea:	9a03      	ldr	r2, [sp, #12]
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	9b08      	ldr	r3, [sp, #32]
 80065f0:	2b0e      	cmp	r3, #14
 80065f2:	f200 80a8 	bhi.w	8006746 <_dtoa_r+0x46e>
 80065f6:	2c00      	cmp	r4, #0
 80065f8:	f000 80a5 	beq.w	8006746 <_dtoa_r+0x46e>
 80065fc:	f1bb 0f00 	cmp.w	fp, #0
 8006600:	dd34      	ble.n	800666c <_dtoa_r+0x394>
 8006602:	4b9a      	ldr	r3, [pc, #616]	; (800686c <_dtoa_r+0x594>)
 8006604:	f00b 020f 	and.w	r2, fp, #15
 8006608:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800660c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006610:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006614:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006618:	ea4f 142b 	mov.w	r4, fp, asr #4
 800661c:	d016      	beq.n	800664c <_dtoa_r+0x374>
 800661e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006622:	4b93      	ldr	r3, [pc, #588]	; (8006870 <_dtoa_r+0x598>)
 8006624:	2703      	movs	r7, #3
 8006626:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800662a:	f7fa f87f 	bl	800072c <__aeabi_ddiv>
 800662e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006632:	f004 040f 	and.w	r4, r4, #15
 8006636:	4e8e      	ldr	r6, [pc, #568]	; (8006870 <_dtoa_r+0x598>)
 8006638:	b954      	cbnz	r4, 8006650 <_dtoa_r+0x378>
 800663a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800663e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006642:	f7fa f873 	bl	800072c <__aeabi_ddiv>
 8006646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800664a:	e029      	b.n	80066a0 <_dtoa_r+0x3c8>
 800664c:	2702      	movs	r7, #2
 800664e:	e7f2      	b.n	8006636 <_dtoa_r+0x35e>
 8006650:	07e1      	lsls	r1, r4, #31
 8006652:	d508      	bpl.n	8006666 <_dtoa_r+0x38e>
 8006654:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006658:	e9d6 2300 	ldrd	r2, r3, [r6]
 800665c:	f7f9 ff3c 	bl	80004d8 <__aeabi_dmul>
 8006660:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006664:	3701      	adds	r7, #1
 8006666:	1064      	asrs	r4, r4, #1
 8006668:	3608      	adds	r6, #8
 800666a:	e7e5      	b.n	8006638 <_dtoa_r+0x360>
 800666c:	f000 80a5 	beq.w	80067ba <_dtoa_r+0x4e2>
 8006670:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006674:	f1cb 0400 	rsb	r4, fp, #0
 8006678:	4b7c      	ldr	r3, [pc, #496]	; (800686c <_dtoa_r+0x594>)
 800667a:	f004 020f 	and.w	r2, r4, #15
 800667e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006686:	f7f9 ff27 	bl	80004d8 <__aeabi_dmul>
 800668a:	2702      	movs	r7, #2
 800668c:	2300      	movs	r3, #0
 800668e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006692:	4e77      	ldr	r6, [pc, #476]	; (8006870 <_dtoa_r+0x598>)
 8006694:	1124      	asrs	r4, r4, #4
 8006696:	2c00      	cmp	r4, #0
 8006698:	f040 8084 	bne.w	80067a4 <_dtoa_r+0x4cc>
 800669c:	2b00      	cmp	r3, #0
 800669e:	d1d2      	bne.n	8006646 <_dtoa_r+0x36e>
 80066a0:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80066a4:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80066a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	f000 8087 	beq.w	80067be <_dtoa_r+0x4e6>
 80066b0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066b4:	2200      	movs	r2, #0
 80066b6:	4b6f      	ldr	r3, [pc, #444]	; (8006874 <_dtoa_r+0x59c>)
 80066b8:	f7fa f980 	bl	80009bc <__aeabi_dcmplt>
 80066bc:	2800      	cmp	r0, #0
 80066be:	d07e      	beq.n	80067be <_dtoa_r+0x4e6>
 80066c0:	9b08      	ldr	r3, [sp, #32]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d07b      	beq.n	80067be <_dtoa_r+0x4e6>
 80066c6:	9b06      	ldr	r3, [sp, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	dd38      	ble.n	800673e <_dtoa_r+0x466>
 80066cc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80066d0:	2200      	movs	r2, #0
 80066d2:	4b69      	ldr	r3, [pc, #420]	; (8006878 <_dtoa_r+0x5a0>)
 80066d4:	f7f9 ff00 	bl	80004d8 <__aeabi_dmul>
 80066d8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80066dc:	9c06      	ldr	r4, [sp, #24]
 80066de:	f10b 38ff 	add.w	r8, fp, #4294967295
 80066e2:	3701      	adds	r7, #1
 80066e4:	4638      	mov	r0, r7
 80066e6:	f7f9 fe8d 	bl	8000404 <__aeabi_i2d>
 80066ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ee:	f7f9 fef3 	bl	80004d8 <__aeabi_dmul>
 80066f2:	2200      	movs	r2, #0
 80066f4:	4b61      	ldr	r3, [pc, #388]	; (800687c <_dtoa_r+0x5a4>)
 80066f6:	f7f9 fd39 	bl	800016c <__adddf3>
 80066fa:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80066fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006702:	9611      	str	r6, [sp, #68]	; 0x44
 8006704:	2c00      	cmp	r4, #0
 8006706:	d15d      	bne.n	80067c4 <_dtoa_r+0x4ec>
 8006708:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800670c:	2200      	movs	r2, #0
 800670e:	4b5c      	ldr	r3, [pc, #368]	; (8006880 <_dtoa_r+0x5a8>)
 8006710:	f7f9 fd2a 	bl	8000168 <__aeabi_dsub>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800671c:	4633      	mov	r3, r6
 800671e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006720:	f7fa f96a 	bl	80009f8 <__aeabi_dcmpgt>
 8006724:	2800      	cmp	r0, #0
 8006726:	f040 8295 	bne.w	8006c54 <_dtoa_r+0x97c>
 800672a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800672e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006730:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006734:	f7fa f942 	bl	80009bc <__aeabi_dcmplt>
 8006738:	2800      	cmp	r0, #0
 800673a:	f040 8289 	bne.w	8006c50 <_dtoa_r+0x978>
 800673e:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8006742:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006746:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006748:	2b00      	cmp	r3, #0
 800674a:	f2c0 8151 	blt.w	80069f0 <_dtoa_r+0x718>
 800674e:	f1bb 0f0e 	cmp.w	fp, #14
 8006752:	f300 814d 	bgt.w	80069f0 <_dtoa_r+0x718>
 8006756:	4b45      	ldr	r3, [pc, #276]	; (800686c <_dtoa_r+0x594>)
 8006758:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800675c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006760:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8006764:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006766:	2b00      	cmp	r3, #0
 8006768:	f280 80da 	bge.w	8006920 <_dtoa_r+0x648>
 800676c:	9b08      	ldr	r3, [sp, #32]
 800676e:	2b00      	cmp	r3, #0
 8006770:	f300 80d6 	bgt.w	8006920 <_dtoa_r+0x648>
 8006774:	f040 826b 	bne.w	8006c4e <_dtoa_r+0x976>
 8006778:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800677c:	2200      	movs	r2, #0
 800677e:	4b40      	ldr	r3, [pc, #256]	; (8006880 <_dtoa_r+0x5a8>)
 8006780:	f7f9 feaa 	bl	80004d8 <__aeabi_dmul>
 8006784:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006788:	f7fa f92c 	bl	80009e4 <__aeabi_dcmpge>
 800678c:	9c08      	ldr	r4, [sp, #32]
 800678e:	4626      	mov	r6, r4
 8006790:	2800      	cmp	r0, #0
 8006792:	f040 8241 	bne.w	8006c18 <_dtoa_r+0x940>
 8006796:	2331      	movs	r3, #49	; 0x31
 8006798:	9f03      	ldr	r7, [sp, #12]
 800679a:	f10b 0b01 	add.w	fp, fp, #1
 800679e:	f807 3b01 	strb.w	r3, [r7], #1
 80067a2:	e23d      	b.n	8006c20 <_dtoa_r+0x948>
 80067a4:	07e2      	lsls	r2, r4, #31
 80067a6:	d505      	bpl.n	80067b4 <_dtoa_r+0x4dc>
 80067a8:	e9d6 2300 	ldrd	r2, r3, [r6]
 80067ac:	f7f9 fe94 	bl	80004d8 <__aeabi_dmul>
 80067b0:	2301      	movs	r3, #1
 80067b2:	3701      	adds	r7, #1
 80067b4:	1064      	asrs	r4, r4, #1
 80067b6:	3608      	adds	r6, #8
 80067b8:	e76d      	b.n	8006696 <_dtoa_r+0x3be>
 80067ba:	2702      	movs	r7, #2
 80067bc:	e770      	b.n	80066a0 <_dtoa_r+0x3c8>
 80067be:	46d8      	mov	r8, fp
 80067c0:	9c08      	ldr	r4, [sp, #32]
 80067c2:	e78f      	b.n	80066e4 <_dtoa_r+0x40c>
 80067c4:	9903      	ldr	r1, [sp, #12]
 80067c6:	4b29      	ldr	r3, [pc, #164]	; (800686c <_dtoa_r+0x594>)
 80067c8:	4421      	add	r1, r4
 80067ca:	9112      	str	r1, [sp, #72]	; 0x48
 80067cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80067ce:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80067d2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80067d6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80067da:	2900      	cmp	r1, #0
 80067dc:	d054      	beq.n	8006888 <_dtoa_r+0x5b0>
 80067de:	2000      	movs	r0, #0
 80067e0:	4928      	ldr	r1, [pc, #160]	; (8006884 <_dtoa_r+0x5ac>)
 80067e2:	f7f9 ffa3 	bl	800072c <__aeabi_ddiv>
 80067e6:	463b      	mov	r3, r7
 80067e8:	4632      	mov	r2, r6
 80067ea:	f7f9 fcbd 	bl	8000168 <__aeabi_dsub>
 80067ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80067f2:	9f03      	ldr	r7, [sp, #12]
 80067f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80067f8:	f7fa f91e 	bl	8000a38 <__aeabi_d2iz>
 80067fc:	4604      	mov	r4, r0
 80067fe:	f7f9 fe01 	bl	8000404 <__aeabi_i2d>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800680a:	f7f9 fcad 	bl	8000168 <__aeabi_dsub>
 800680e:	4602      	mov	r2, r0
 8006810:	460b      	mov	r3, r1
 8006812:	3430      	adds	r4, #48	; 0x30
 8006814:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006818:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800681c:	f807 4b01 	strb.w	r4, [r7], #1
 8006820:	f7fa f8cc 	bl	80009bc <__aeabi_dcmplt>
 8006824:	2800      	cmp	r0, #0
 8006826:	d173      	bne.n	8006910 <_dtoa_r+0x638>
 8006828:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800682c:	2000      	movs	r0, #0
 800682e:	4911      	ldr	r1, [pc, #68]	; (8006874 <_dtoa_r+0x59c>)
 8006830:	f7f9 fc9a 	bl	8000168 <__aeabi_dsub>
 8006834:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006838:	f7fa f8c0 	bl	80009bc <__aeabi_dcmplt>
 800683c:	2800      	cmp	r0, #0
 800683e:	f040 80b6 	bne.w	80069ae <_dtoa_r+0x6d6>
 8006842:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006844:	429f      	cmp	r7, r3
 8006846:	f43f af7a 	beq.w	800673e <_dtoa_r+0x466>
 800684a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800684e:	2200      	movs	r2, #0
 8006850:	4b09      	ldr	r3, [pc, #36]	; (8006878 <_dtoa_r+0x5a0>)
 8006852:	f7f9 fe41 	bl	80004d8 <__aeabi_dmul>
 8006856:	2200      	movs	r2, #0
 8006858:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800685c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006860:	4b05      	ldr	r3, [pc, #20]	; (8006878 <_dtoa_r+0x5a0>)
 8006862:	f7f9 fe39 	bl	80004d8 <__aeabi_dmul>
 8006866:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800686a:	e7c3      	b.n	80067f4 <_dtoa_r+0x51c>
 800686c:	08009ae8 	.word	0x08009ae8
 8006870:	08009ac0 	.word	0x08009ac0
 8006874:	3ff00000 	.word	0x3ff00000
 8006878:	40240000 	.word	0x40240000
 800687c:	401c0000 	.word	0x401c0000
 8006880:	40140000 	.word	0x40140000
 8006884:	3fe00000 	.word	0x3fe00000
 8006888:	4630      	mov	r0, r6
 800688a:	4639      	mov	r1, r7
 800688c:	f7f9 fe24 	bl	80004d8 <__aeabi_dmul>
 8006890:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006892:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006896:	9c03      	ldr	r4, [sp, #12]
 8006898:	9314      	str	r3, [sp, #80]	; 0x50
 800689a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800689e:	f7fa f8cb 	bl	8000a38 <__aeabi_d2iz>
 80068a2:	9015      	str	r0, [sp, #84]	; 0x54
 80068a4:	f7f9 fdae 	bl	8000404 <__aeabi_i2d>
 80068a8:	4602      	mov	r2, r0
 80068aa:	460b      	mov	r3, r1
 80068ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80068b0:	f7f9 fc5a 	bl	8000168 <__aeabi_dsub>
 80068b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80068b6:	4606      	mov	r6, r0
 80068b8:	3330      	adds	r3, #48	; 0x30
 80068ba:	f804 3b01 	strb.w	r3, [r4], #1
 80068be:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80068c0:	460f      	mov	r7, r1
 80068c2:	429c      	cmp	r4, r3
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	d124      	bne.n	8006914 <_dtoa_r+0x63c>
 80068ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80068ce:	4baf      	ldr	r3, [pc, #700]	; (8006b8c <_dtoa_r+0x8b4>)
 80068d0:	f7f9 fc4c 	bl	800016c <__adddf3>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4630      	mov	r0, r6
 80068da:	4639      	mov	r1, r7
 80068dc:	f7fa f88c 	bl	80009f8 <__aeabi_dcmpgt>
 80068e0:	2800      	cmp	r0, #0
 80068e2:	d163      	bne.n	80069ac <_dtoa_r+0x6d4>
 80068e4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80068e8:	2000      	movs	r0, #0
 80068ea:	49a8      	ldr	r1, [pc, #672]	; (8006b8c <_dtoa_r+0x8b4>)
 80068ec:	f7f9 fc3c 	bl	8000168 <__aeabi_dsub>
 80068f0:	4602      	mov	r2, r0
 80068f2:	460b      	mov	r3, r1
 80068f4:	4630      	mov	r0, r6
 80068f6:	4639      	mov	r1, r7
 80068f8:	f7fa f860 	bl	80009bc <__aeabi_dcmplt>
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f43f af1e 	beq.w	800673e <_dtoa_r+0x466>
 8006902:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006904:	1e7b      	subs	r3, r7, #1
 8006906:	9314      	str	r3, [sp, #80]	; 0x50
 8006908:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800690c:	2b30      	cmp	r3, #48	; 0x30
 800690e:	d0f8      	beq.n	8006902 <_dtoa_r+0x62a>
 8006910:	46c3      	mov	fp, r8
 8006912:	e03b      	b.n	800698c <_dtoa_r+0x6b4>
 8006914:	4b9e      	ldr	r3, [pc, #632]	; (8006b90 <_dtoa_r+0x8b8>)
 8006916:	f7f9 fddf 	bl	80004d8 <__aeabi_dmul>
 800691a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800691e:	e7bc      	b.n	800689a <_dtoa_r+0x5c2>
 8006920:	9f03      	ldr	r7, [sp, #12]
 8006922:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8006926:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800692a:	4640      	mov	r0, r8
 800692c:	4649      	mov	r1, r9
 800692e:	f7f9 fefd 	bl	800072c <__aeabi_ddiv>
 8006932:	f7fa f881 	bl	8000a38 <__aeabi_d2iz>
 8006936:	4604      	mov	r4, r0
 8006938:	f7f9 fd64 	bl	8000404 <__aeabi_i2d>
 800693c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006940:	f7f9 fdca 	bl	80004d8 <__aeabi_dmul>
 8006944:	4602      	mov	r2, r0
 8006946:	460b      	mov	r3, r1
 8006948:	4640      	mov	r0, r8
 800694a:	4649      	mov	r1, r9
 800694c:	f7f9 fc0c 	bl	8000168 <__aeabi_dsub>
 8006950:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8006954:	f807 6b01 	strb.w	r6, [r7], #1
 8006958:	9e03      	ldr	r6, [sp, #12]
 800695a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800695e:	1bbe      	subs	r6, r7, r6
 8006960:	45b4      	cmp	ip, r6
 8006962:	4602      	mov	r2, r0
 8006964:	460b      	mov	r3, r1
 8006966:	d136      	bne.n	80069d6 <_dtoa_r+0x6fe>
 8006968:	f7f9 fc00 	bl	800016c <__adddf3>
 800696c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006970:	4680      	mov	r8, r0
 8006972:	4689      	mov	r9, r1
 8006974:	f7fa f840 	bl	80009f8 <__aeabi_dcmpgt>
 8006978:	bb58      	cbnz	r0, 80069d2 <_dtoa_r+0x6fa>
 800697a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800697e:	4640      	mov	r0, r8
 8006980:	4649      	mov	r1, r9
 8006982:	f7fa f811 	bl	80009a8 <__aeabi_dcmpeq>
 8006986:	b108      	cbz	r0, 800698c <_dtoa_r+0x6b4>
 8006988:	07e3      	lsls	r3, r4, #31
 800698a:	d422      	bmi.n	80069d2 <_dtoa_r+0x6fa>
 800698c:	4651      	mov	r1, sl
 800698e:	4628      	mov	r0, r5
 8006990:	f000 fbc2 	bl	8007118 <_Bfree>
 8006994:	2300      	movs	r3, #0
 8006996:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006998:	703b      	strb	r3, [r7, #0]
 800699a:	f10b 0301 	add.w	r3, fp, #1
 800699e:	6013      	str	r3, [r2, #0]
 80069a0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	f43f ace6 	beq.w	8006374 <_dtoa_r+0x9c>
 80069a8:	601f      	str	r7, [r3, #0]
 80069aa:	e4e3      	b.n	8006374 <_dtoa_r+0x9c>
 80069ac:	4627      	mov	r7, r4
 80069ae:	463b      	mov	r3, r7
 80069b0:	461f      	mov	r7, r3
 80069b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069b6:	2a39      	cmp	r2, #57	; 0x39
 80069b8:	d107      	bne.n	80069ca <_dtoa_r+0x6f2>
 80069ba:	9a03      	ldr	r2, [sp, #12]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d1f7      	bne.n	80069b0 <_dtoa_r+0x6d8>
 80069c0:	2230      	movs	r2, #48	; 0x30
 80069c2:	9903      	ldr	r1, [sp, #12]
 80069c4:	f108 0801 	add.w	r8, r8, #1
 80069c8:	700a      	strb	r2, [r1, #0]
 80069ca:	781a      	ldrb	r2, [r3, #0]
 80069cc:	3201      	adds	r2, #1
 80069ce:	701a      	strb	r2, [r3, #0]
 80069d0:	e79e      	b.n	8006910 <_dtoa_r+0x638>
 80069d2:	46d8      	mov	r8, fp
 80069d4:	e7eb      	b.n	80069ae <_dtoa_r+0x6d6>
 80069d6:	2200      	movs	r2, #0
 80069d8:	4b6d      	ldr	r3, [pc, #436]	; (8006b90 <_dtoa_r+0x8b8>)
 80069da:	f7f9 fd7d 	bl	80004d8 <__aeabi_dmul>
 80069de:	2200      	movs	r2, #0
 80069e0:	2300      	movs	r3, #0
 80069e2:	4680      	mov	r8, r0
 80069e4:	4689      	mov	r9, r1
 80069e6:	f7f9 ffdf 	bl	80009a8 <__aeabi_dcmpeq>
 80069ea:	2800      	cmp	r0, #0
 80069ec:	d09b      	beq.n	8006926 <_dtoa_r+0x64e>
 80069ee:	e7cd      	b.n	800698c <_dtoa_r+0x6b4>
 80069f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069f2:	2a00      	cmp	r2, #0
 80069f4:	f000 80c4 	beq.w	8006b80 <_dtoa_r+0x8a8>
 80069f8:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80069fa:	2a01      	cmp	r2, #1
 80069fc:	f300 80a8 	bgt.w	8006b50 <_dtoa_r+0x878>
 8006a00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006a02:	2a00      	cmp	r2, #0
 8006a04:	f000 80a0 	beq.w	8006b48 <_dtoa_r+0x870>
 8006a08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006a0c:	464f      	mov	r7, r9
 8006a0e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006a10:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a12:	2101      	movs	r1, #1
 8006a14:	441a      	add	r2, r3
 8006a16:	4628      	mov	r0, r5
 8006a18:	4499      	add	r9, r3
 8006a1a:	9209      	str	r2, [sp, #36]	; 0x24
 8006a1c:	f000 fc7c 	bl	8007318 <__i2b>
 8006a20:	4606      	mov	r6, r0
 8006a22:	b15f      	cbz	r7, 8006a3c <_dtoa_r+0x764>
 8006a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	dd08      	ble.n	8006a3c <_dtoa_r+0x764>
 8006a2a:	42bb      	cmp	r3, r7
 8006a2c:	bfa8      	it	ge
 8006a2e:	463b      	movge	r3, r7
 8006a30:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a32:	eba9 0903 	sub.w	r9, r9, r3
 8006a36:	1aff      	subs	r7, r7, r3
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a3e:	b1f3      	cbz	r3, 8006a7e <_dtoa_r+0x7a6>
 8006a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f000 80a0 	beq.w	8006b88 <_dtoa_r+0x8b0>
 8006a48:	2c00      	cmp	r4, #0
 8006a4a:	dd10      	ble.n	8006a6e <_dtoa_r+0x796>
 8006a4c:	4631      	mov	r1, r6
 8006a4e:	4622      	mov	r2, r4
 8006a50:	4628      	mov	r0, r5
 8006a52:	f000 fd1f 	bl	8007494 <__pow5mult>
 8006a56:	4652      	mov	r2, sl
 8006a58:	4601      	mov	r1, r0
 8006a5a:	4606      	mov	r6, r0
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	f000 fc71 	bl	8007344 <__multiply>
 8006a62:	4680      	mov	r8, r0
 8006a64:	4651      	mov	r1, sl
 8006a66:	4628      	mov	r0, r5
 8006a68:	f000 fb56 	bl	8007118 <_Bfree>
 8006a6c:	46c2      	mov	sl, r8
 8006a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a70:	1b1a      	subs	r2, r3, r4
 8006a72:	d004      	beq.n	8006a7e <_dtoa_r+0x7a6>
 8006a74:	4651      	mov	r1, sl
 8006a76:	4628      	mov	r0, r5
 8006a78:	f000 fd0c 	bl	8007494 <__pow5mult>
 8006a7c:	4682      	mov	sl, r0
 8006a7e:	2101      	movs	r1, #1
 8006a80:	4628      	mov	r0, r5
 8006a82:	f000 fc49 	bl	8007318 <__i2b>
 8006a86:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a88:	4604      	mov	r4, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	f340 8082 	ble.w	8006b94 <_dtoa_r+0x8bc>
 8006a90:	461a      	mov	r2, r3
 8006a92:	4601      	mov	r1, r0
 8006a94:	4628      	mov	r0, r5
 8006a96:	f000 fcfd 	bl	8007494 <__pow5mult>
 8006a9a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	dd7b      	ble.n	8006b9a <_dtoa_r+0x8c2>
 8006aa2:	f04f 0800 	mov.w	r8, #0
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006aac:	6918      	ldr	r0, [r3, #16]
 8006aae:	f000 fbe5 	bl	800727c <__hi0bits>
 8006ab2:	f1c0 0020 	rsb	r0, r0, #32
 8006ab6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab8:	4418      	add	r0, r3
 8006aba:	f010 001f 	ands.w	r0, r0, #31
 8006abe:	f000 8092 	beq.w	8006be6 <_dtoa_r+0x90e>
 8006ac2:	f1c0 0320 	rsb	r3, r0, #32
 8006ac6:	2b04      	cmp	r3, #4
 8006ac8:	f340 8085 	ble.w	8006bd6 <_dtoa_r+0x8fe>
 8006acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ace:	f1c0 001c 	rsb	r0, r0, #28
 8006ad2:	4403      	add	r3, r0
 8006ad4:	4481      	add	r9, r0
 8006ad6:	4407      	add	r7, r0
 8006ad8:	9309      	str	r3, [sp, #36]	; 0x24
 8006ada:	f1b9 0f00 	cmp.w	r9, #0
 8006ade:	dd05      	ble.n	8006aec <_dtoa_r+0x814>
 8006ae0:	4651      	mov	r1, sl
 8006ae2:	464a      	mov	r2, r9
 8006ae4:	4628      	mov	r0, r5
 8006ae6:	f000 fd2f 	bl	8007548 <__lshift>
 8006aea:	4682      	mov	sl, r0
 8006aec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	dd05      	ble.n	8006afe <_dtoa_r+0x826>
 8006af2:	4621      	mov	r1, r4
 8006af4:	461a      	mov	r2, r3
 8006af6:	4628      	mov	r0, r5
 8006af8:	f000 fd26 	bl	8007548 <__lshift>
 8006afc:	4604      	mov	r4, r0
 8006afe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d072      	beq.n	8006bea <_dtoa_r+0x912>
 8006b04:	4621      	mov	r1, r4
 8006b06:	4650      	mov	r0, sl
 8006b08:	f000 fd8a 	bl	8007620 <__mcmp>
 8006b0c:	2800      	cmp	r0, #0
 8006b0e:	da6c      	bge.n	8006bea <_dtoa_r+0x912>
 8006b10:	2300      	movs	r3, #0
 8006b12:	4651      	mov	r1, sl
 8006b14:	220a      	movs	r2, #10
 8006b16:	4628      	mov	r0, r5
 8006b18:	f000 fb20 	bl	800715c <__multadd>
 8006b1c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b1e:	4682      	mov	sl, r0
 8006b20:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 81ac 	beq.w	8006e82 <_dtoa_r+0xbaa>
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4631      	mov	r1, r6
 8006b2e:	220a      	movs	r2, #10
 8006b30:	4628      	mov	r0, r5
 8006b32:	f000 fb13 	bl	800715c <__multadd>
 8006b36:	9b06      	ldr	r3, [sp, #24]
 8006b38:	4606      	mov	r6, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	f300 8093 	bgt.w	8006c66 <_dtoa_r+0x98e>
 8006b40:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b42:	2b02      	cmp	r3, #2
 8006b44:	dc59      	bgt.n	8006bfa <_dtoa_r+0x922>
 8006b46:	e08e      	b.n	8006c66 <_dtoa_r+0x98e>
 8006b48:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006b4a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006b4e:	e75d      	b.n	8006a0c <_dtoa_r+0x734>
 8006b50:	9b08      	ldr	r3, [sp, #32]
 8006b52:	1e5c      	subs	r4, r3, #1
 8006b54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b56:	42a3      	cmp	r3, r4
 8006b58:	bfbf      	itttt	lt
 8006b5a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006b5c:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8006b5e:	1ae3      	sublt	r3, r4, r3
 8006b60:	18d2      	addlt	r2, r2, r3
 8006b62:	bfa8      	it	ge
 8006b64:	1b1c      	subge	r4, r3, r4
 8006b66:	9b08      	ldr	r3, [sp, #32]
 8006b68:	bfbe      	ittt	lt
 8006b6a:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006b6c:	920e      	strlt	r2, [sp, #56]	; 0x38
 8006b6e:	2400      	movlt	r4, #0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	bfb5      	itete	lt
 8006b74:	eba9 0703 	sublt.w	r7, r9, r3
 8006b78:	464f      	movge	r7, r9
 8006b7a:	2300      	movlt	r3, #0
 8006b7c:	9b08      	ldrge	r3, [sp, #32]
 8006b7e:	e747      	b.n	8006a10 <_dtoa_r+0x738>
 8006b80:	464f      	mov	r7, r9
 8006b82:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006b84:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8006b86:	e74c      	b.n	8006a22 <_dtoa_r+0x74a>
 8006b88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006b8a:	e773      	b.n	8006a74 <_dtoa_r+0x79c>
 8006b8c:	3fe00000 	.word	0x3fe00000
 8006b90:	40240000 	.word	0x40240000
 8006b94:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	dc18      	bgt.n	8006bcc <_dtoa_r+0x8f4>
 8006b9a:	9b04      	ldr	r3, [sp, #16]
 8006b9c:	b9b3      	cbnz	r3, 8006bcc <_dtoa_r+0x8f4>
 8006b9e:	9b05      	ldr	r3, [sp, #20]
 8006ba0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ba4:	b993      	cbnz	r3, 8006bcc <_dtoa_r+0x8f4>
 8006ba6:	9b05      	ldr	r3, [sp, #20]
 8006ba8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bac:	0d1b      	lsrs	r3, r3, #20
 8006bae:	051b      	lsls	r3, r3, #20
 8006bb0:	b17b      	cbz	r3, 8006bd2 <_dtoa_r+0x8fa>
 8006bb2:	f04f 0801 	mov.w	r8, #1
 8006bb6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006bb8:	f109 0901 	add.w	r9, r9, #1
 8006bbc:	3301      	adds	r3, #1
 8006bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8006bc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f47f af6f 	bne.w	8006aa6 <_dtoa_r+0x7ce>
 8006bc8:	2001      	movs	r0, #1
 8006bca:	e774      	b.n	8006ab6 <_dtoa_r+0x7de>
 8006bcc:	f04f 0800 	mov.w	r8, #0
 8006bd0:	e7f6      	b.n	8006bc0 <_dtoa_r+0x8e8>
 8006bd2:	4698      	mov	r8, r3
 8006bd4:	e7f4      	b.n	8006bc0 <_dtoa_r+0x8e8>
 8006bd6:	d080      	beq.n	8006ada <_dtoa_r+0x802>
 8006bd8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bda:	331c      	adds	r3, #28
 8006bdc:	441a      	add	r2, r3
 8006bde:	4499      	add	r9, r3
 8006be0:	441f      	add	r7, r3
 8006be2:	9209      	str	r2, [sp, #36]	; 0x24
 8006be4:	e779      	b.n	8006ada <_dtoa_r+0x802>
 8006be6:	4603      	mov	r3, r0
 8006be8:	e7f6      	b.n	8006bd8 <_dtoa_r+0x900>
 8006bea:	9b08      	ldr	r3, [sp, #32]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	dc34      	bgt.n	8006c5a <_dtoa_r+0x982>
 8006bf0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006bf2:	2b02      	cmp	r3, #2
 8006bf4:	dd31      	ble.n	8006c5a <_dtoa_r+0x982>
 8006bf6:	9b08      	ldr	r3, [sp, #32]
 8006bf8:	9306      	str	r3, [sp, #24]
 8006bfa:	9b06      	ldr	r3, [sp, #24]
 8006bfc:	b963      	cbnz	r3, 8006c18 <_dtoa_r+0x940>
 8006bfe:	4621      	mov	r1, r4
 8006c00:	2205      	movs	r2, #5
 8006c02:	4628      	mov	r0, r5
 8006c04:	f000 faaa 	bl	800715c <__multadd>
 8006c08:	4601      	mov	r1, r0
 8006c0a:	4604      	mov	r4, r0
 8006c0c:	4650      	mov	r0, sl
 8006c0e:	f000 fd07 	bl	8007620 <__mcmp>
 8006c12:	2800      	cmp	r0, #0
 8006c14:	f73f adbf 	bgt.w	8006796 <_dtoa_r+0x4be>
 8006c18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006c1a:	9f03      	ldr	r7, [sp, #12]
 8006c1c:	ea6f 0b03 	mvn.w	fp, r3
 8006c20:	f04f 0800 	mov.w	r8, #0
 8006c24:	4621      	mov	r1, r4
 8006c26:	4628      	mov	r0, r5
 8006c28:	f000 fa76 	bl	8007118 <_Bfree>
 8006c2c:	2e00      	cmp	r6, #0
 8006c2e:	f43f aead 	beq.w	800698c <_dtoa_r+0x6b4>
 8006c32:	f1b8 0f00 	cmp.w	r8, #0
 8006c36:	d005      	beq.n	8006c44 <_dtoa_r+0x96c>
 8006c38:	45b0      	cmp	r8, r6
 8006c3a:	d003      	beq.n	8006c44 <_dtoa_r+0x96c>
 8006c3c:	4641      	mov	r1, r8
 8006c3e:	4628      	mov	r0, r5
 8006c40:	f000 fa6a 	bl	8007118 <_Bfree>
 8006c44:	4631      	mov	r1, r6
 8006c46:	4628      	mov	r0, r5
 8006c48:	f000 fa66 	bl	8007118 <_Bfree>
 8006c4c:	e69e      	b.n	800698c <_dtoa_r+0x6b4>
 8006c4e:	2400      	movs	r4, #0
 8006c50:	4626      	mov	r6, r4
 8006c52:	e7e1      	b.n	8006c18 <_dtoa_r+0x940>
 8006c54:	46c3      	mov	fp, r8
 8006c56:	4626      	mov	r6, r4
 8006c58:	e59d      	b.n	8006796 <_dtoa_r+0x4be>
 8006c5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80c8 	beq.w	8006df2 <_dtoa_r+0xb1a>
 8006c62:	9b08      	ldr	r3, [sp, #32]
 8006c64:	9306      	str	r3, [sp, #24]
 8006c66:	2f00      	cmp	r7, #0
 8006c68:	dd05      	ble.n	8006c76 <_dtoa_r+0x99e>
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	463a      	mov	r2, r7
 8006c6e:	4628      	mov	r0, r5
 8006c70:	f000 fc6a 	bl	8007548 <__lshift>
 8006c74:	4606      	mov	r6, r0
 8006c76:	f1b8 0f00 	cmp.w	r8, #0
 8006c7a:	d05b      	beq.n	8006d34 <_dtoa_r+0xa5c>
 8006c7c:	4628      	mov	r0, r5
 8006c7e:	6871      	ldr	r1, [r6, #4]
 8006c80:	f000 fa0a 	bl	8007098 <_Balloc>
 8006c84:	4607      	mov	r7, r0
 8006c86:	b928      	cbnz	r0, 8006c94 <_dtoa_r+0x9bc>
 8006c88:	4602      	mov	r2, r0
 8006c8a:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006c8e:	4b81      	ldr	r3, [pc, #516]	; (8006e94 <_dtoa_r+0xbbc>)
 8006c90:	f7ff bb36 	b.w	8006300 <_dtoa_r+0x28>
 8006c94:	6932      	ldr	r2, [r6, #16]
 8006c96:	f106 010c 	add.w	r1, r6, #12
 8006c9a:	3202      	adds	r2, #2
 8006c9c:	0092      	lsls	r2, r2, #2
 8006c9e:	300c      	adds	r0, #12
 8006ca0:	f001 ff72 	bl	8008b88 <memcpy>
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	4639      	mov	r1, r7
 8006ca8:	4628      	mov	r0, r5
 8006caa:	f000 fc4d 	bl	8007548 <__lshift>
 8006cae:	46b0      	mov	r8, r6
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	9b03      	ldr	r3, [sp, #12]
 8006cb4:	9a03      	ldr	r2, [sp, #12]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	9308      	str	r3, [sp, #32]
 8006cba:	9b06      	ldr	r3, [sp, #24]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	930b      	str	r3, [sp, #44]	; 0x2c
 8006cc0:	9b04      	ldr	r3, [sp, #16]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	930a      	str	r3, [sp, #40]	; 0x28
 8006cc8:	9b08      	ldr	r3, [sp, #32]
 8006cca:	4621      	mov	r1, r4
 8006ccc:	3b01      	subs	r3, #1
 8006cce:	4650      	mov	r0, sl
 8006cd0:	9304      	str	r3, [sp, #16]
 8006cd2:	f7ff fa75 	bl	80061c0 <quorem>
 8006cd6:	4641      	mov	r1, r8
 8006cd8:	9006      	str	r0, [sp, #24]
 8006cda:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006cde:	4650      	mov	r0, sl
 8006ce0:	f000 fc9e 	bl	8007620 <__mcmp>
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	9009      	str	r0, [sp, #36]	; 0x24
 8006ce8:	4621      	mov	r1, r4
 8006cea:	4628      	mov	r0, r5
 8006cec:	f000 fcb4 	bl	8007658 <__mdiff>
 8006cf0:	68c2      	ldr	r2, [r0, #12]
 8006cf2:	4607      	mov	r7, r0
 8006cf4:	bb02      	cbnz	r2, 8006d38 <_dtoa_r+0xa60>
 8006cf6:	4601      	mov	r1, r0
 8006cf8:	4650      	mov	r0, sl
 8006cfa:	f000 fc91 	bl	8007620 <__mcmp>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	4639      	mov	r1, r7
 8006d02:	4628      	mov	r0, r5
 8006d04:	920c      	str	r2, [sp, #48]	; 0x30
 8006d06:	f000 fa07 	bl	8007118 <_Bfree>
 8006d0a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006d0e:	9f08      	ldr	r7, [sp, #32]
 8006d10:	ea43 0102 	orr.w	r1, r3, r2
 8006d14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006d16:	4319      	orrs	r1, r3
 8006d18:	d110      	bne.n	8006d3c <_dtoa_r+0xa64>
 8006d1a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d1e:	d029      	beq.n	8006d74 <_dtoa_r+0xa9c>
 8006d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dd02      	ble.n	8006d2c <_dtoa_r+0xa54>
 8006d26:	9b06      	ldr	r3, [sp, #24]
 8006d28:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006d2c:	9b04      	ldr	r3, [sp, #16]
 8006d2e:	f883 9000 	strb.w	r9, [r3]
 8006d32:	e777      	b.n	8006c24 <_dtoa_r+0x94c>
 8006d34:	4630      	mov	r0, r6
 8006d36:	e7ba      	b.n	8006cae <_dtoa_r+0x9d6>
 8006d38:	2201      	movs	r2, #1
 8006d3a:	e7e1      	b.n	8006d00 <_dtoa_r+0xa28>
 8006d3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	db04      	blt.n	8006d4c <_dtoa_r+0xa74>
 8006d42:	9922      	ldr	r1, [sp, #136]	; 0x88
 8006d44:	430b      	orrs	r3, r1
 8006d46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	d120      	bne.n	8006d8e <_dtoa_r+0xab6>
 8006d4c:	2a00      	cmp	r2, #0
 8006d4e:	dded      	ble.n	8006d2c <_dtoa_r+0xa54>
 8006d50:	4651      	mov	r1, sl
 8006d52:	2201      	movs	r2, #1
 8006d54:	4628      	mov	r0, r5
 8006d56:	f000 fbf7 	bl	8007548 <__lshift>
 8006d5a:	4621      	mov	r1, r4
 8006d5c:	4682      	mov	sl, r0
 8006d5e:	f000 fc5f 	bl	8007620 <__mcmp>
 8006d62:	2800      	cmp	r0, #0
 8006d64:	dc03      	bgt.n	8006d6e <_dtoa_r+0xa96>
 8006d66:	d1e1      	bne.n	8006d2c <_dtoa_r+0xa54>
 8006d68:	f019 0f01 	tst.w	r9, #1
 8006d6c:	d0de      	beq.n	8006d2c <_dtoa_r+0xa54>
 8006d6e:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d72:	d1d8      	bne.n	8006d26 <_dtoa_r+0xa4e>
 8006d74:	2339      	movs	r3, #57	; 0x39
 8006d76:	9a04      	ldr	r2, [sp, #16]
 8006d78:	7013      	strb	r3, [r2, #0]
 8006d7a:	463b      	mov	r3, r7
 8006d7c:	461f      	mov	r7, r3
 8006d7e:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006d82:	3b01      	subs	r3, #1
 8006d84:	2a39      	cmp	r2, #57	; 0x39
 8006d86:	d06b      	beq.n	8006e60 <_dtoa_r+0xb88>
 8006d88:	3201      	adds	r2, #1
 8006d8a:	701a      	strb	r2, [r3, #0]
 8006d8c:	e74a      	b.n	8006c24 <_dtoa_r+0x94c>
 8006d8e:	2a00      	cmp	r2, #0
 8006d90:	dd07      	ble.n	8006da2 <_dtoa_r+0xaca>
 8006d92:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006d96:	d0ed      	beq.n	8006d74 <_dtoa_r+0xa9c>
 8006d98:	9a04      	ldr	r2, [sp, #16]
 8006d9a:	f109 0301 	add.w	r3, r9, #1
 8006d9e:	7013      	strb	r3, [r2, #0]
 8006da0:	e740      	b.n	8006c24 <_dtoa_r+0x94c>
 8006da2:	9b08      	ldr	r3, [sp, #32]
 8006da4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006da6:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d042      	beq.n	8006e34 <_dtoa_r+0xb5c>
 8006dae:	4651      	mov	r1, sl
 8006db0:	2300      	movs	r3, #0
 8006db2:	220a      	movs	r2, #10
 8006db4:	4628      	mov	r0, r5
 8006db6:	f000 f9d1 	bl	800715c <__multadd>
 8006dba:	45b0      	cmp	r8, r6
 8006dbc:	4682      	mov	sl, r0
 8006dbe:	f04f 0300 	mov.w	r3, #0
 8006dc2:	f04f 020a 	mov.w	r2, #10
 8006dc6:	4641      	mov	r1, r8
 8006dc8:	4628      	mov	r0, r5
 8006dca:	d107      	bne.n	8006ddc <_dtoa_r+0xb04>
 8006dcc:	f000 f9c6 	bl	800715c <__multadd>
 8006dd0:	4680      	mov	r8, r0
 8006dd2:	4606      	mov	r6, r0
 8006dd4:	9b08      	ldr	r3, [sp, #32]
 8006dd6:	3301      	adds	r3, #1
 8006dd8:	9308      	str	r3, [sp, #32]
 8006dda:	e775      	b.n	8006cc8 <_dtoa_r+0x9f0>
 8006ddc:	f000 f9be 	bl	800715c <__multadd>
 8006de0:	4631      	mov	r1, r6
 8006de2:	4680      	mov	r8, r0
 8006de4:	2300      	movs	r3, #0
 8006de6:	220a      	movs	r2, #10
 8006de8:	4628      	mov	r0, r5
 8006dea:	f000 f9b7 	bl	800715c <__multadd>
 8006dee:	4606      	mov	r6, r0
 8006df0:	e7f0      	b.n	8006dd4 <_dtoa_r+0xafc>
 8006df2:	9b08      	ldr	r3, [sp, #32]
 8006df4:	9306      	str	r3, [sp, #24]
 8006df6:	9f03      	ldr	r7, [sp, #12]
 8006df8:	4621      	mov	r1, r4
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	f7ff f9e0 	bl	80061c0 <quorem>
 8006e00:	9b03      	ldr	r3, [sp, #12]
 8006e02:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006e06:	f807 9b01 	strb.w	r9, [r7], #1
 8006e0a:	1afa      	subs	r2, r7, r3
 8006e0c:	9b06      	ldr	r3, [sp, #24]
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	dd07      	ble.n	8006e22 <_dtoa_r+0xb4a>
 8006e12:	4651      	mov	r1, sl
 8006e14:	2300      	movs	r3, #0
 8006e16:	220a      	movs	r2, #10
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 f99f 	bl	800715c <__multadd>
 8006e1e:	4682      	mov	sl, r0
 8006e20:	e7ea      	b.n	8006df8 <_dtoa_r+0xb20>
 8006e22:	9b06      	ldr	r3, [sp, #24]
 8006e24:	f04f 0800 	mov.w	r8, #0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	bfcc      	ite	gt
 8006e2c:	461f      	movgt	r7, r3
 8006e2e:	2701      	movle	r7, #1
 8006e30:	9b03      	ldr	r3, [sp, #12]
 8006e32:	441f      	add	r7, r3
 8006e34:	4651      	mov	r1, sl
 8006e36:	2201      	movs	r2, #1
 8006e38:	4628      	mov	r0, r5
 8006e3a:	f000 fb85 	bl	8007548 <__lshift>
 8006e3e:	4621      	mov	r1, r4
 8006e40:	4682      	mov	sl, r0
 8006e42:	f000 fbed 	bl	8007620 <__mcmp>
 8006e46:	2800      	cmp	r0, #0
 8006e48:	dc97      	bgt.n	8006d7a <_dtoa_r+0xaa2>
 8006e4a:	d102      	bne.n	8006e52 <_dtoa_r+0xb7a>
 8006e4c:	f019 0f01 	tst.w	r9, #1
 8006e50:	d193      	bne.n	8006d7a <_dtoa_r+0xaa2>
 8006e52:	463b      	mov	r3, r7
 8006e54:	461f      	mov	r7, r3
 8006e56:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e5a:	2a30      	cmp	r2, #48	; 0x30
 8006e5c:	d0fa      	beq.n	8006e54 <_dtoa_r+0xb7c>
 8006e5e:	e6e1      	b.n	8006c24 <_dtoa_r+0x94c>
 8006e60:	9a03      	ldr	r2, [sp, #12]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d18a      	bne.n	8006d7c <_dtoa_r+0xaa4>
 8006e66:	2331      	movs	r3, #49	; 0x31
 8006e68:	f10b 0b01 	add.w	fp, fp, #1
 8006e6c:	e797      	b.n	8006d9e <_dtoa_r+0xac6>
 8006e6e:	4b0a      	ldr	r3, [pc, #40]	; (8006e98 <_dtoa_r+0xbc0>)
 8006e70:	f7ff ba9f 	b.w	80063b2 <_dtoa_r+0xda>
 8006e74:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f47f aa77 	bne.w	800636a <_dtoa_r+0x92>
 8006e7c:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <_dtoa_r+0xbc4>)
 8006e7e:	f7ff ba98 	b.w	80063b2 <_dtoa_r+0xda>
 8006e82:	9b06      	ldr	r3, [sp, #24]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	dcb6      	bgt.n	8006df6 <_dtoa_r+0xb1e>
 8006e88:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	f73f aeb5 	bgt.w	8006bfa <_dtoa_r+0x922>
 8006e90:	e7b1      	b.n	8006df6 <_dtoa_r+0xb1e>
 8006e92:	bf00      	nop
 8006e94:	08009a4f 	.word	0x08009a4f
 8006e98:	080099aa 	.word	0x080099aa
 8006e9c:	080099d3 	.word	0x080099d3

08006ea0 <_free_r>:
 8006ea0:	b538      	push	{r3, r4, r5, lr}
 8006ea2:	4605      	mov	r5, r0
 8006ea4:	2900      	cmp	r1, #0
 8006ea6:	d040      	beq.n	8006f2a <_free_r+0x8a>
 8006ea8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eac:	1f0c      	subs	r4, r1, #4
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	bfb8      	it	lt
 8006eb2:	18e4      	addlt	r4, r4, r3
 8006eb4:	f000 f8e4 	bl	8007080 <__malloc_lock>
 8006eb8:	4a1c      	ldr	r2, [pc, #112]	; (8006f2c <_free_r+0x8c>)
 8006eba:	6813      	ldr	r3, [r2, #0]
 8006ebc:	b933      	cbnz	r3, 8006ecc <_free_r+0x2c>
 8006ebe:	6063      	str	r3, [r4, #4]
 8006ec0:	6014      	str	r4, [r2, #0]
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ec8:	f000 b8e0 	b.w	800708c <__malloc_unlock>
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	d908      	bls.n	8006ee2 <_free_r+0x42>
 8006ed0:	6820      	ldr	r0, [r4, #0]
 8006ed2:	1821      	adds	r1, r4, r0
 8006ed4:	428b      	cmp	r3, r1
 8006ed6:	bf01      	itttt	eq
 8006ed8:	6819      	ldreq	r1, [r3, #0]
 8006eda:	685b      	ldreq	r3, [r3, #4]
 8006edc:	1809      	addeq	r1, r1, r0
 8006ede:	6021      	streq	r1, [r4, #0]
 8006ee0:	e7ed      	b.n	8006ebe <_free_r+0x1e>
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	b10b      	cbz	r3, 8006eec <_free_r+0x4c>
 8006ee8:	42a3      	cmp	r3, r4
 8006eea:	d9fa      	bls.n	8006ee2 <_free_r+0x42>
 8006eec:	6811      	ldr	r1, [r2, #0]
 8006eee:	1850      	adds	r0, r2, r1
 8006ef0:	42a0      	cmp	r0, r4
 8006ef2:	d10b      	bne.n	8006f0c <_free_r+0x6c>
 8006ef4:	6820      	ldr	r0, [r4, #0]
 8006ef6:	4401      	add	r1, r0
 8006ef8:	1850      	adds	r0, r2, r1
 8006efa:	4283      	cmp	r3, r0
 8006efc:	6011      	str	r1, [r2, #0]
 8006efe:	d1e0      	bne.n	8006ec2 <_free_r+0x22>
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	4408      	add	r0, r1
 8006f06:	6010      	str	r0, [r2, #0]
 8006f08:	6053      	str	r3, [r2, #4]
 8006f0a:	e7da      	b.n	8006ec2 <_free_r+0x22>
 8006f0c:	d902      	bls.n	8006f14 <_free_r+0x74>
 8006f0e:	230c      	movs	r3, #12
 8006f10:	602b      	str	r3, [r5, #0]
 8006f12:	e7d6      	b.n	8006ec2 <_free_r+0x22>
 8006f14:	6820      	ldr	r0, [r4, #0]
 8006f16:	1821      	adds	r1, r4, r0
 8006f18:	428b      	cmp	r3, r1
 8006f1a:	bf01      	itttt	eq
 8006f1c:	6819      	ldreq	r1, [r3, #0]
 8006f1e:	685b      	ldreq	r3, [r3, #4]
 8006f20:	1809      	addeq	r1, r1, r0
 8006f22:	6021      	streq	r1, [r4, #0]
 8006f24:	6063      	str	r3, [r4, #4]
 8006f26:	6054      	str	r4, [r2, #4]
 8006f28:	e7cb      	b.n	8006ec2 <_free_r+0x22>
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	200004e8 	.word	0x200004e8

08006f30 <malloc>:
 8006f30:	4b02      	ldr	r3, [pc, #8]	; (8006f3c <malloc+0xc>)
 8006f32:	4601      	mov	r1, r0
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	f000 b823 	b.w	8006f80 <_malloc_r>
 8006f3a:	bf00      	nop
 8006f3c:	20000068 	.word	0x20000068

08006f40 <sbrk_aligned>:
 8006f40:	b570      	push	{r4, r5, r6, lr}
 8006f42:	4e0e      	ldr	r6, [pc, #56]	; (8006f7c <sbrk_aligned+0x3c>)
 8006f44:	460c      	mov	r4, r1
 8006f46:	6831      	ldr	r1, [r6, #0]
 8006f48:	4605      	mov	r5, r0
 8006f4a:	b911      	cbnz	r1, 8006f52 <sbrk_aligned+0x12>
 8006f4c:	f001 fe0c 	bl	8008b68 <_sbrk_r>
 8006f50:	6030      	str	r0, [r6, #0]
 8006f52:	4621      	mov	r1, r4
 8006f54:	4628      	mov	r0, r5
 8006f56:	f001 fe07 	bl	8008b68 <_sbrk_r>
 8006f5a:	1c43      	adds	r3, r0, #1
 8006f5c:	d00a      	beq.n	8006f74 <sbrk_aligned+0x34>
 8006f5e:	1cc4      	adds	r4, r0, #3
 8006f60:	f024 0403 	bic.w	r4, r4, #3
 8006f64:	42a0      	cmp	r0, r4
 8006f66:	d007      	beq.n	8006f78 <sbrk_aligned+0x38>
 8006f68:	1a21      	subs	r1, r4, r0
 8006f6a:	4628      	mov	r0, r5
 8006f6c:	f001 fdfc 	bl	8008b68 <_sbrk_r>
 8006f70:	3001      	adds	r0, #1
 8006f72:	d101      	bne.n	8006f78 <sbrk_aligned+0x38>
 8006f74:	f04f 34ff 	mov.w	r4, #4294967295
 8006f78:	4620      	mov	r0, r4
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}
 8006f7c:	200004ec 	.word	0x200004ec

08006f80 <_malloc_r>:
 8006f80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f84:	1ccd      	adds	r5, r1, #3
 8006f86:	f025 0503 	bic.w	r5, r5, #3
 8006f8a:	3508      	adds	r5, #8
 8006f8c:	2d0c      	cmp	r5, #12
 8006f8e:	bf38      	it	cc
 8006f90:	250c      	movcc	r5, #12
 8006f92:	2d00      	cmp	r5, #0
 8006f94:	4607      	mov	r7, r0
 8006f96:	db01      	blt.n	8006f9c <_malloc_r+0x1c>
 8006f98:	42a9      	cmp	r1, r5
 8006f9a:	d905      	bls.n	8006fa8 <_malloc_r+0x28>
 8006f9c:	230c      	movs	r3, #12
 8006f9e:	2600      	movs	r6, #0
 8006fa0:	603b      	str	r3, [r7, #0]
 8006fa2:	4630      	mov	r0, r6
 8006fa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fa8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800707c <_malloc_r+0xfc>
 8006fac:	f000 f868 	bl	8007080 <__malloc_lock>
 8006fb0:	f8d8 3000 	ldr.w	r3, [r8]
 8006fb4:	461c      	mov	r4, r3
 8006fb6:	bb5c      	cbnz	r4, 8007010 <_malloc_r+0x90>
 8006fb8:	4629      	mov	r1, r5
 8006fba:	4638      	mov	r0, r7
 8006fbc:	f7ff ffc0 	bl	8006f40 <sbrk_aligned>
 8006fc0:	1c43      	adds	r3, r0, #1
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	d155      	bne.n	8007072 <_malloc_r+0xf2>
 8006fc6:	f8d8 4000 	ldr.w	r4, [r8]
 8006fca:	4626      	mov	r6, r4
 8006fcc:	2e00      	cmp	r6, #0
 8006fce:	d145      	bne.n	800705c <_malloc_r+0xdc>
 8006fd0:	2c00      	cmp	r4, #0
 8006fd2:	d048      	beq.n	8007066 <_malloc_r+0xe6>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	4631      	mov	r1, r6
 8006fd8:	4638      	mov	r0, r7
 8006fda:	eb04 0903 	add.w	r9, r4, r3
 8006fde:	f001 fdc3 	bl	8008b68 <_sbrk_r>
 8006fe2:	4581      	cmp	r9, r0
 8006fe4:	d13f      	bne.n	8007066 <_malloc_r+0xe6>
 8006fe6:	6821      	ldr	r1, [r4, #0]
 8006fe8:	4638      	mov	r0, r7
 8006fea:	1a6d      	subs	r5, r5, r1
 8006fec:	4629      	mov	r1, r5
 8006fee:	f7ff ffa7 	bl	8006f40 <sbrk_aligned>
 8006ff2:	3001      	adds	r0, #1
 8006ff4:	d037      	beq.n	8007066 <_malloc_r+0xe6>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	442b      	add	r3, r5
 8006ffa:	6023      	str	r3, [r4, #0]
 8006ffc:	f8d8 3000 	ldr.w	r3, [r8]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d038      	beq.n	8007076 <_malloc_r+0xf6>
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	42a2      	cmp	r2, r4
 8007008:	d12b      	bne.n	8007062 <_malloc_r+0xe2>
 800700a:	2200      	movs	r2, #0
 800700c:	605a      	str	r2, [r3, #4]
 800700e:	e00f      	b.n	8007030 <_malloc_r+0xb0>
 8007010:	6822      	ldr	r2, [r4, #0]
 8007012:	1b52      	subs	r2, r2, r5
 8007014:	d41f      	bmi.n	8007056 <_malloc_r+0xd6>
 8007016:	2a0b      	cmp	r2, #11
 8007018:	d917      	bls.n	800704a <_malloc_r+0xca>
 800701a:	1961      	adds	r1, r4, r5
 800701c:	42a3      	cmp	r3, r4
 800701e:	6025      	str	r5, [r4, #0]
 8007020:	bf18      	it	ne
 8007022:	6059      	strne	r1, [r3, #4]
 8007024:	6863      	ldr	r3, [r4, #4]
 8007026:	bf08      	it	eq
 8007028:	f8c8 1000 	streq.w	r1, [r8]
 800702c:	5162      	str	r2, [r4, r5]
 800702e:	604b      	str	r3, [r1, #4]
 8007030:	4638      	mov	r0, r7
 8007032:	f104 060b 	add.w	r6, r4, #11
 8007036:	f000 f829 	bl	800708c <__malloc_unlock>
 800703a:	f026 0607 	bic.w	r6, r6, #7
 800703e:	1d23      	adds	r3, r4, #4
 8007040:	1af2      	subs	r2, r6, r3
 8007042:	d0ae      	beq.n	8006fa2 <_malloc_r+0x22>
 8007044:	1b9b      	subs	r3, r3, r6
 8007046:	50a3      	str	r3, [r4, r2]
 8007048:	e7ab      	b.n	8006fa2 <_malloc_r+0x22>
 800704a:	42a3      	cmp	r3, r4
 800704c:	6862      	ldr	r2, [r4, #4]
 800704e:	d1dd      	bne.n	800700c <_malloc_r+0x8c>
 8007050:	f8c8 2000 	str.w	r2, [r8]
 8007054:	e7ec      	b.n	8007030 <_malloc_r+0xb0>
 8007056:	4623      	mov	r3, r4
 8007058:	6864      	ldr	r4, [r4, #4]
 800705a:	e7ac      	b.n	8006fb6 <_malloc_r+0x36>
 800705c:	4634      	mov	r4, r6
 800705e:	6876      	ldr	r6, [r6, #4]
 8007060:	e7b4      	b.n	8006fcc <_malloc_r+0x4c>
 8007062:	4613      	mov	r3, r2
 8007064:	e7cc      	b.n	8007000 <_malloc_r+0x80>
 8007066:	230c      	movs	r3, #12
 8007068:	4638      	mov	r0, r7
 800706a:	603b      	str	r3, [r7, #0]
 800706c:	f000 f80e 	bl	800708c <__malloc_unlock>
 8007070:	e797      	b.n	8006fa2 <_malloc_r+0x22>
 8007072:	6025      	str	r5, [r4, #0]
 8007074:	e7dc      	b.n	8007030 <_malloc_r+0xb0>
 8007076:	605b      	str	r3, [r3, #4]
 8007078:	deff      	udf	#255	; 0xff
 800707a:	bf00      	nop
 800707c:	200004e8 	.word	0x200004e8

08007080 <__malloc_lock>:
 8007080:	4801      	ldr	r0, [pc, #4]	; (8007088 <__malloc_lock+0x8>)
 8007082:	f7ff b889 	b.w	8006198 <__retarget_lock_acquire_recursive>
 8007086:	bf00      	nop
 8007088:	200004e4 	.word	0x200004e4

0800708c <__malloc_unlock>:
 800708c:	4801      	ldr	r0, [pc, #4]	; (8007094 <__malloc_unlock+0x8>)
 800708e:	f7ff b884 	b.w	800619a <__retarget_lock_release_recursive>
 8007092:	bf00      	nop
 8007094:	200004e4 	.word	0x200004e4

08007098 <_Balloc>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	69c6      	ldr	r6, [r0, #28]
 800709c:	4604      	mov	r4, r0
 800709e:	460d      	mov	r5, r1
 80070a0:	b976      	cbnz	r6, 80070c0 <_Balloc+0x28>
 80070a2:	2010      	movs	r0, #16
 80070a4:	f7ff ff44 	bl	8006f30 <malloc>
 80070a8:	4602      	mov	r2, r0
 80070aa:	61e0      	str	r0, [r4, #28]
 80070ac:	b920      	cbnz	r0, 80070b8 <_Balloc+0x20>
 80070ae:	216b      	movs	r1, #107	; 0x6b
 80070b0:	4b17      	ldr	r3, [pc, #92]	; (8007110 <_Balloc+0x78>)
 80070b2:	4818      	ldr	r0, [pc, #96]	; (8007114 <_Balloc+0x7c>)
 80070b4:	f001 fd7c 	bl	8008bb0 <__assert_func>
 80070b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070bc:	6006      	str	r6, [r0, #0]
 80070be:	60c6      	str	r6, [r0, #12]
 80070c0:	69e6      	ldr	r6, [r4, #28]
 80070c2:	68f3      	ldr	r3, [r6, #12]
 80070c4:	b183      	cbz	r3, 80070e8 <_Balloc+0x50>
 80070c6:	69e3      	ldr	r3, [r4, #28]
 80070c8:	68db      	ldr	r3, [r3, #12]
 80070ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070ce:	b9b8      	cbnz	r0, 8007100 <_Balloc+0x68>
 80070d0:	2101      	movs	r1, #1
 80070d2:	fa01 f605 	lsl.w	r6, r1, r5
 80070d6:	1d72      	adds	r2, r6, #5
 80070d8:	4620      	mov	r0, r4
 80070da:	0092      	lsls	r2, r2, #2
 80070dc:	f001 fd86 	bl	8008bec <_calloc_r>
 80070e0:	b160      	cbz	r0, 80070fc <_Balloc+0x64>
 80070e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070e6:	e00e      	b.n	8007106 <_Balloc+0x6e>
 80070e8:	2221      	movs	r2, #33	; 0x21
 80070ea:	2104      	movs	r1, #4
 80070ec:	4620      	mov	r0, r4
 80070ee:	f001 fd7d 	bl	8008bec <_calloc_r>
 80070f2:	69e3      	ldr	r3, [r4, #28]
 80070f4:	60f0      	str	r0, [r6, #12]
 80070f6:	68db      	ldr	r3, [r3, #12]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d1e4      	bne.n	80070c6 <_Balloc+0x2e>
 80070fc:	2000      	movs	r0, #0
 80070fe:	bd70      	pop	{r4, r5, r6, pc}
 8007100:	6802      	ldr	r2, [r0, #0]
 8007102:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007106:	2300      	movs	r3, #0
 8007108:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800710c:	e7f7      	b.n	80070fe <_Balloc+0x66>
 800710e:	bf00      	nop
 8007110:	080099e0 	.word	0x080099e0
 8007114:	08009a60 	.word	0x08009a60

08007118 <_Bfree>:
 8007118:	b570      	push	{r4, r5, r6, lr}
 800711a:	69c6      	ldr	r6, [r0, #28]
 800711c:	4605      	mov	r5, r0
 800711e:	460c      	mov	r4, r1
 8007120:	b976      	cbnz	r6, 8007140 <_Bfree+0x28>
 8007122:	2010      	movs	r0, #16
 8007124:	f7ff ff04 	bl	8006f30 <malloc>
 8007128:	4602      	mov	r2, r0
 800712a:	61e8      	str	r0, [r5, #28]
 800712c:	b920      	cbnz	r0, 8007138 <_Bfree+0x20>
 800712e:	218f      	movs	r1, #143	; 0x8f
 8007130:	4b08      	ldr	r3, [pc, #32]	; (8007154 <_Bfree+0x3c>)
 8007132:	4809      	ldr	r0, [pc, #36]	; (8007158 <_Bfree+0x40>)
 8007134:	f001 fd3c 	bl	8008bb0 <__assert_func>
 8007138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800713c:	6006      	str	r6, [r0, #0]
 800713e:	60c6      	str	r6, [r0, #12]
 8007140:	b13c      	cbz	r4, 8007152 <_Bfree+0x3a>
 8007142:	69eb      	ldr	r3, [r5, #28]
 8007144:	6862      	ldr	r2, [r4, #4]
 8007146:	68db      	ldr	r3, [r3, #12]
 8007148:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800714c:	6021      	str	r1, [r4, #0]
 800714e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007152:	bd70      	pop	{r4, r5, r6, pc}
 8007154:	080099e0 	.word	0x080099e0
 8007158:	08009a60 	.word	0x08009a60

0800715c <__multadd>:
 800715c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007160:	4607      	mov	r7, r0
 8007162:	460c      	mov	r4, r1
 8007164:	461e      	mov	r6, r3
 8007166:	2000      	movs	r0, #0
 8007168:	690d      	ldr	r5, [r1, #16]
 800716a:	f101 0c14 	add.w	ip, r1, #20
 800716e:	f8dc 3000 	ldr.w	r3, [ip]
 8007172:	3001      	adds	r0, #1
 8007174:	b299      	uxth	r1, r3
 8007176:	fb02 6101 	mla	r1, r2, r1, r6
 800717a:	0c1e      	lsrs	r6, r3, #16
 800717c:	0c0b      	lsrs	r3, r1, #16
 800717e:	fb02 3306 	mla	r3, r2, r6, r3
 8007182:	b289      	uxth	r1, r1
 8007184:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007188:	4285      	cmp	r5, r0
 800718a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800718e:	f84c 1b04 	str.w	r1, [ip], #4
 8007192:	dcec      	bgt.n	800716e <__multadd+0x12>
 8007194:	b30e      	cbz	r6, 80071da <__multadd+0x7e>
 8007196:	68a3      	ldr	r3, [r4, #8]
 8007198:	42ab      	cmp	r3, r5
 800719a:	dc19      	bgt.n	80071d0 <__multadd+0x74>
 800719c:	6861      	ldr	r1, [r4, #4]
 800719e:	4638      	mov	r0, r7
 80071a0:	3101      	adds	r1, #1
 80071a2:	f7ff ff79 	bl	8007098 <_Balloc>
 80071a6:	4680      	mov	r8, r0
 80071a8:	b928      	cbnz	r0, 80071b6 <__multadd+0x5a>
 80071aa:	4602      	mov	r2, r0
 80071ac:	21ba      	movs	r1, #186	; 0xba
 80071ae:	4b0c      	ldr	r3, [pc, #48]	; (80071e0 <__multadd+0x84>)
 80071b0:	480c      	ldr	r0, [pc, #48]	; (80071e4 <__multadd+0x88>)
 80071b2:	f001 fcfd 	bl	8008bb0 <__assert_func>
 80071b6:	6922      	ldr	r2, [r4, #16]
 80071b8:	f104 010c 	add.w	r1, r4, #12
 80071bc:	3202      	adds	r2, #2
 80071be:	0092      	lsls	r2, r2, #2
 80071c0:	300c      	adds	r0, #12
 80071c2:	f001 fce1 	bl	8008b88 <memcpy>
 80071c6:	4621      	mov	r1, r4
 80071c8:	4638      	mov	r0, r7
 80071ca:	f7ff ffa5 	bl	8007118 <_Bfree>
 80071ce:	4644      	mov	r4, r8
 80071d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071d4:	3501      	adds	r5, #1
 80071d6:	615e      	str	r6, [r3, #20]
 80071d8:	6125      	str	r5, [r4, #16]
 80071da:	4620      	mov	r0, r4
 80071dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071e0:	08009a4f 	.word	0x08009a4f
 80071e4:	08009a60 	.word	0x08009a60

080071e8 <__s2b>:
 80071e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071ec:	4615      	mov	r5, r2
 80071ee:	2209      	movs	r2, #9
 80071f0:	461f      	mov	r7, r3
 80071f2:	3308      	adds	r3, #8
 80071f4:	460c      	mov	r4, r1
 80071f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80071fa:	4606      	mov	r6, r0
 80071fc:	2201      	movs	r2, #1
 80071fe:	2100      	movs	r1, #0
 8007200:	429a      	cmp	r2, r3
 8007202:	db09      	blt.n	8007218 <__s2b+0x30>
 8007204:	4630      	mov	r0, r6
 8007206:	f7ff ff47 	bl	8007098 <_Balloc>
 800720a:	b940      	cbnz	r0, 800721e <__s2b+0x36>
 800720c:	4602      	mov	r2, r0
 800720e:	21d3      	movs	r1, #211	; 0xd3
 8007210:	4b18      	ldr	r3, [pc, #96]	; (8007274 <__s2b+0x8c>)
 8007212:	4819      	ldr	r0, [pc, #100]	; (8007278 <__s2b+0x90>)
 8007214:	f001 fccc 	bl	8008bb0 <__assert_func>
 8007218:	0052      	lsls	r2, r2, #1
 800721a:	3101      	adds	r1, #1
 800721c:	e7f0      	b.n	8007200 <__s2b+0x18>
 800721e:	9b08      	ldr	r3, [sp, #32]
 8007220:	2d09      	cmp	r5, #9
 8007222:	6143      	str	r3, [r0, #20]
 8007224:	f04f 0301 	mov.w	r3, #1
 8007228:	6103      	str	r3, [r0, #16]
 800722a:	dd16      	ble.n	800725a <__s2b+0x72>
 800722c:	f104 0909 	add.w	r9, r4, #9
 8007230:	46c8      	mov	r8, r9
 8007232:	442c      	add	r4, r5
 8007234:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007238:	4601      	mov	r1, r0
 800723a:	220a      	movs	r2, #10
 800723c:	4630      	mov	r0, r6
 800723e:	3b30      	subs	r3, #48	; 0x30
 8007240:	f7ff ff8c 	bl	800715c <__multadd>
 8007244:	45a0      	cmp	r8, r4
 8007246:	d1f5      	bne.n	8007234 <__s2b+0x4c>
 8007248:	f1a5 0408 	sub.w	r4, r5, #8
 800724c:	444c      	add	r4, r9
 800724e:	1b2d      	subs	r5, r5, r4
 8007250:	1963      	adds	r3, r4, r5
 8007252:	42bb      	cmp	r3, r7
 8007254:	db04      	blt.n	8007260 <__s2b+0x78>
 8007256:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800725a:	2509      	movs	r5, #9
 800725c:	340a      	adds	r4, #10
 800725e:	e7f6      	b.n	800724e <__s2b+0x66>
 8007260:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007264:	4601      	mov	r1, r0
 8007266:	220a      	movs	r2, #10
 8007268:	4630      	mov	r0, r6
 800726a:	3b30      	subs	r3, #48	; 0x30
 800726c:	f7ff ff76 	bl	800715c <__multadd>
 8007270:	e7ee      	b.n	8007250 <__s2b+0x68>
 8007272:	bf00      	nop
 8007274:	08009a4f 	.word	0x08009a4f
 8007278:	08009a60 	.word	0x08009a60

0800727c <__hi0bits>:
 800727c:	0c02      	lsrs	r2, r0, #16
 800727e:	0412      	lsls	r2, r2, #16
 8007280:	4603      	mov	r3, r0
 8007282:	b9ca      	cbnz	r2, 80072b8 <__hi0bits+0x3c>
 8007284:	0403      	lsls	r3, r0, #16
 8007286:	2010      	movs	r0, #16
 8007288:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800728c:	bf04      	itt	eq
 800728e:	021b      	lsleq	r3, r3, #8
 8007290:	3008      	addeq	r0, #8
 8007292:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007296:	bf04      	itt	eq
 8007298:	011b      	lsleq	r3, r3, #4
 800729a:	3004      	addeq	r0, #4
 800729c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80072a0:	bf04      	itt	eq
 80072a2:	009b      	lsleq	r3, r3, #2
 80072a4:	3002      	addeq	r0, #2
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	db05      	blt.n	80072b6 <__hi0bits+0x3a>
 80072aa:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 80072ae:	f100 0001 	add.w	r0, r0, #1
 80072b2:	bf08      	it	eq
 80072b4:	2020      	moveq	r0, #32
 80072b6:	4770      	bx	lr
 80072b8:	2000      	movs	r0, #0
 80072ba:	e7e5      	b.n	8007288 <__hi0bits+0xc>

080072bc <__lo0bits>:
 80072bc:	6803      	ldr	r3, [r0, #0]
 80072be:	4602      	mov	r2, r0
 80072c0:	f013 0007 	ands.w	r0, r3, #7
 80072c4:	d00b      	beq.n	80072de <__lo0bits+0x22>
 80072c6:	07d9      	lsls	r1, r3, #31
 80072c8:	d421      	bmi.n	800730e <__lo0bits+0x52>
 80072ca:	0798      	lsls	r0, r3, #30
 80072cc:	bf49      	itett	mi
 80072ce:	085b      	lsrmi	r3, r3, #1
 80072d0:	089b      	lsrpl	r3, r3, #2
 80072d2:	2001      	movmi	r0, #1
 80072d4:	6013      	strmi	r3, [r2, #0]
 80072d6:	bf5c      	itt	pl
 80072d8:	2002      	movpl	r0, #2
 80072da:	6013      	strpl	r3, [r2, #0]
 80072dc:	4770      	bx	lr
 80072de:	b299      	uxth	r1, r3
 80072e0:	b909      	cbnz	r1, 80072e6 <__lo0bits+0x2a>
 80072e2:	2010      	movs	r0, #16
 80072e4:	0c1b      	lsrs	r3, r3, #16
 80072e6:	b2d9      	uxtb	r1, r3
 80072e8:	b909      	cbnz	r1, 80072ee <__lo0bits+0x32>
 80072ea:	3008      	adds	r0, #8
 80072ec:	0a1b      	lsrs	r3, r3, #8
 80072ee:	0719      	lsls	r1, r3, #28
 80072f0:	bf04      	itt	eq
 80072f2:	091b      	lsreq	r3, r3, #4
 80072f4:	3004      	addeq	r0, #4
 80072f6:	0799      	lsls	r1, r3, #30
 80072f8:	bf04      	itt	eq
 80072fa:	089b      	lsreq	r3, r3, #2
 80072fc:	3002      	addeq	r0, #2
 80072fe:	07d9      	lsls	r1, r3, #31
 8007300:	d403      	bmi.n	800730a <__lo0bits+0x4e>
 8007302:	085b      	lsrs	r3, r3, #1
 8007304:	f100 0001 	add.w	r0, r0, #1
 8007308:	d003      	beq.n	8007312 <__lo0bits+0x56>
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	4770      	bx	lr
 800730e:	2000      	movs	r0, #0
 8007310:	4770      	bx	lr
 8007312:	2020      	movs	r0, #32
 8007314:	4770      	bx	lr
	...

08007318 <__i2b>:
 8007318:	b510      	push	{r4, lr}
 800731a:	460c      	mov	r4, r1
 800731c:	2101      	movs	r1, #1
 800731e:	f7ff febb 	bl	8007098 <_Balloc>
 8007322:	4602      	mov	r2, r0
 8007324:	b928      	cbnz	r0, 8007332 <__i2b+0x1a>
 8007326:	f240 1145 	movw	r1, #325	; 0x145
 800732a:	4b04      	ldr	r3, [pc, #16]	; (800733c <__i2b+0x24>)
 800732c:	4804      	ldr	r0, [pc, #16]	; (8007340 <__i2b+0x28>)
 800732e:	f001 fc3f 	bl	8008bb0 <__assert_func>
 8007332:	2301      	movs	r3, #1
 8007334:	6144      	str	r4, [r0, #20]
 8007336:	6103      	str	r3, [r0, #16]
 8007338:	bd10      	pop	{r4, pc}
 800733a:	bf00      	nop
 800733c:	08009a4f 	.word	0x08009a4f
 8007340:	08009a60 	.word	0x08009a60

08007344 <__multiply>:
 8007344:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007348:	4691      	mov	r9, r2
 800734a:	690a      	ldr	r2, [r1, #16]
 800734c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007350:	460c      	mov	r4, r1
 8007352:	429a      	cmp	r2, r3
 8007354:	bfbe      	ittt	lt
 8007356:	460b      	movlt	r3, r1
 8007358:	464c      	movlt	r4, r9
 800735a:	4699      	movlt	r9, r3
 800735c:	6927      	ldr	r7, [r4, #16]
 800735e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007362:	68a3      	ldr	r3, [r4, #8]
 8007364:	6861      	ldr	r1, [r4, #4]
 8007366:	eb07 060a 	add.w	r6, r7, sl
 800736a:	42b3      	cmp	r3, r6
 800736c:	b085      	sub	sp, #20
 800736e:	bfb8      	it	lt
 8007370:	3101      	addlt	r1, #1
 8007372:	f7ff fe91 	bl	8007098 <_Balloc>
 8007376:	b930      	cbnz	r0, 8007386 <__multiply+0x42>
 8007378:	4602      	mov	r2, r0
 800737a:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800737e:	4b43      	ldr	r3, [pc, #268]	; (800748c <__multiply+0x148>)
 8007380:	4843      	ldr	r0, [pc, #268]	; (8007490 <__multiply+0x14c>)
 8007382:	f001 fc15 	bl	8008bb0 <__assert_func>
 8007386:	f100 0514 	add.w	r5, r0, #20
 800738a:	462b      	mov	r3, r5
 800738c:	2200      	movs	r2, #0
 800738e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007392:	4543      	cmp	r3, r8
 8007394:	d321      	bcc.n	80073da <__multiply+0x96>
 8007396:	f104 0314 	add.w	r3, r4, #20
 800739a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800739e:	f109 0314 	add.w	r3, r9, #20
 80073a2:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80073a6:	9202      	str	r2, [sp, #8]
 80073a8:	1b3a      	subs	r2, r7, r4
 80073aa:	3a15      	subs	r2, #21
 80073ac:	f022 0203 	bic.w	r2, r2, #3
 80073b0:	3204      	adds	r2, #4
 80073b2:	f104 0115 	add.w	r1, r4, #21
 80073b6:	428f      	cmp	r7, r1
 80073b8:	bf38      	it	cc
 80073ba:	2204      	movcc	r2, #4
 80073bc:	9201      	str	r2, [sp, #4]
 80073be:	9a02      	ldr	r2, [sp, #8]
 80073c0:	9303      	str	r3, [sp, #12]
 80073c2:	429a      	cmp	r2, r3
 80073c4:	d80c      	bhi.n	80073e0 <__multiply+0x9c>
 80073c6:	2e00      	cmp	r6, #0
 80073c8:	dd03      	ble.n	80073d2 <__multiply+0x8e>
 80073ca:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d05a      	beq.n	8007488 <__multiply+0x144>
 80073d2:	6106      	str	r6, [r0, #16]
 80073d4:	b005      	add	sp, #20
 80073d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073da:	f843 2b04 	str.w	r2, [r3], #4
 80073de:	e7d8      	b.n	8007392 <__multiply+0x4e>
 80073e0:	f8b3 a000 	ldrh.w	sl, [r3]
 80073e4:	f1ba 0f00 	cmp.w	sl, #0
 80073e8:	d023      	beq.n	8007432 <__multiply+0xee>
 80073ea:	46a9      	mov	r9, r5
 80073ec:	f04f 0c00 	mov.w	ip, #0
 80073f0:	f104 0e14 	add.w	lr, r4, #20
 80073f4:	f85e 2b04 	ldr.w	r2, [lr], #4
 80073f8:	f8d9 1000 	ldr.w	r1, [r9]
 80073fc:	fa1f fb82 	uxth.w	fp, r2
 8007400:	b289      	uxth	r1, r1
 8007402:	fb0a 110b 	mla	r1, sl, fp, r1
 8007406:	4461      	add	r1, ip
 8007408:	f8d9 c000 	ldr.w	ip, [r9]
 800740c:	0c12      	lsrs	r2, r2, #16
 800740e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007412:	fb0a c202 	mla	r2, sl, r2, ip
 8007416:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800741a:	b289      	uxth	r1, r1
 800741c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007420:	4577      	cmp	r7, lr
 8007422:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007426:	f849 1b04 	str.w	r1, [r9], #4
 800742a:	d8e3      	bhi.n	80073f4 <__multiply+0xb0>
 800742c:	9a01      	ldr	r2, [sp, #4]
 800742e:	f845 c002 	str.w	ip, [r5, r2]
 8007432:	9a03      	ldr	r2, [sp, #12]
 8007434:	3304      	adds	r3, #4
 8007436:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800743a:	f1b9 0f00 	cmp.w	r9, #0
 800743e:	d021      	beq.n	8007484 <__multiply+0x140>
 8007440:	46ae      	mov	lr, r5
 8007442:	f04f 0a00 	mov.w	sl, #0
 8007446:	6829      	ldr	r1, [r5, #0]
 8007448:	f104 0c14 	add.w	ip, r4, #20
 800744c:	f8bc b000 	ldrh.w	fp, [ip]
 8007450:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007454:	b289      	uxth	r1, r1
 8007456:	fb09 220b 	mla	r2, r9, fp, r2
 800745a:	4452      	add	r2, sl
 800745c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007460:	f84e 1b04 	str.w	r1, [lr], #4
 8007464:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007468:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800746c:	f8be 1000 	ldrh.w	r1, [lr]
 8007470:	4567      	cmp	r7, ip
 8007472:	fb09 110a 	mla	r1, r9, sl, r1
 8007476:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800747a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800747e:	d8e5      	bhi.n	800744c <__multiply+0x108>
 8007480:	9a01      	ldr	r2, [sp, #4]
 8007482:	50a9      	str	r1, [r5, r2]
 8007484:	3504      	adds	r5, #4
 8007486:	e79a      	b.n	80073be <__multiply+0x7a>
 8007488:	3e01      	subs	r6, #1
 800748a:	e79c      	b.n	80073c6 <__multiply+0x82>
 800748c:	08009a4f 	.word	0x08009a4f
 8007490:	08009a60 	.word	0x08009a60

08007494 <__pow5mult>:
 8007494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007498:	4615      	mov	r5, r2
 800749a:	f012 0203 	ands.w	r2, r2, #3
 800749e:	4606      	mov	r6, r0
 80074a0:	460f      	mov	r7, r1
 80074a2:	d007      	beq.n	80074b4 <__pow5mult+0x20>
 80074a4:	4c25      	ldr	r4, [pc, #148]	; (800753c <__pow5mult+0xa8>)
 80074a6:	3a01      	subs	r2, #1
 80074a8:	2300      	movs	r3, #0
 80074aa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80074ae:	f7ff fe55 	bl	800715c <__multadd>
 80074b2:	4607      	mov	r7, r0
 80074b4:	10ad      	asrs	r5, r5, #2
 80074b6:	d03d      	beq.n	8007534 <__pow5mult+0xa0>
 80074b8:	69f4      	ldr	r4, [r6, #28]
 80074ba:	b97c      	cbnz	r4, 80074dc <__pow5mult+0x48>
 80074bc:	2010      	movs	r0, #16
 80074be:	f7ff fd37 	bl	8006f30 <malloc>
 80074c2:	4602      	mov	r2, r0
 80074c4:	61f0      	str	r0, [r6, #28]
 80074c6:	b928      	cbnz	r0, 80074d4 <__pow5mult+0x40>
 80074c8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80074cc:	4b1c      	ldr	r3, [pc, #112]	; (8007540 <__pow5mult+0xac>)
 80074ce:	481d      	ldr	r0, [pc, #116]	; (8007544 <__pow5mult+0xb0>)
 80074d0:	f001 fb6e 	bl	8008bb0 <__assert_func>
 80074d4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074d8:	6004      	str	r4, [r0, #0]
 80074da:	60c4      	str	r4, [r0, #12]
 80074dc:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80074e0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074e4:	b94c      	cbnz	r4, 80074fa <__pow5mult+0x66>
 80074e6:	f240 2171 	movw	r1, #625	; 0x271
 80074ea:	4630      	mov	r0, r6
 80074ec:	f7ff ff14 	bl	8007318 <__i2b>
 80074f0:	2300      	movs	r3, #0
 80074f2:	4604      	mov	r4, r0
 80074f4:	f8c8 0008 	str.w	r0, [r8, #8]
 80074f8:	6003      	str	r3, [r0, #0]
 80074fa:	f04f 0900 	mov.w	r9, #0
 80074fe:	07eb      	lsls	r3, r5, #31
 8007500:	d50a      	bpl.n	8007518 <__pow5mult+0x84>
 8007502:	4639      	mov	r1, r7
 8007504:	4622      	mov	r2, r4
 8007506:	4630      	mov	r0, r6
 8007508:	f7ff ff1c 	bl	8007344 <__multiply>
 800750c:	4680      	mov	r8, r0
 800750e:	4639      	mov	r1, r7
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff fe01 	bl	8007118 <_Bfree>
 8007516:	4647      	mov	r7, r8
 8007518:	106d      	asrs	r5, r5, #1
 800751a:	d00b      	beq.n	8007534 <__pow5mult+0xa0>
 800751c:	6820      	ldr	r0, [r4, #0]
 800751e:	b938      	cbnz	r0, 8007530 <__pow5mult+0x9c>
 8007520:	4622      	mov	r2, r4
 8007522:	4621      	mov	r1, r4
 8007524:	4630      	mov	r0, r6
 8007526:	f7ff ff0d 	bl	8007344 <__multiply>
 800752a:	6020      	str	r0, [r4, #0]
 800752c:	f8c0 9000 	str.w	r9, [r0]
 8007530:	4604      	mov	r4, r0
 8007532:	e7e4      	b.n	80074fe <__pow5mult+0x6a>
 8007534:	4638      	mov	r0, r7
 8007536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800753a:	bf00      	nop
 800753c:	08009bb0 	.word	0x08009bb0
 8007540:	080099e0 	.word	0x080099e0
 8007544:	08009a60 	.word	0x08009a60

08007548 <__lshift>:
 8007548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800754c:	460c      	mov	r4, r1
 800754e:	4607      	mov	r7, r0
 8007550:	4691      	mov	r9, r2
 8007552:	6923      	ldr	r3, [r4, #16]
 8007554:	6849      	ldr	r1, [r1, #4]
 8007556:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800755a:	68a3      	ldr	r3, [r4, #8]
 800755c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007560:	f108 0601 	add.w	r6, r8, #1
 8007564:	42b3      	cmp	r3, r6
 8007566:	db0b      	blt.n	8007580 <__lshift+0x38>
 8007568:	4638      	mov	r0, r7
 800756a:	f7ff fd95 	bl	8007098 <_Balloc>
 800756e:	4605      	mov	r5, r0
 8007570:	b948      	cbnz	r0, 8007586 <__lshift+0x3e>
 8007572:	4602      	mov	r2, r0
 8007574:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007578:	4b27      	ldr	r3, [pc, #156]	; (8007618 <__lshift+0xd0>)
 800757a:	4828      	ldr	r0, [pc, #160]	; (800761c <__lshift+0xd4>)
 800757c:	f001 fb18 	bl	8008bb0 <__assert_func>
 8007580:	3101      	adds	r1, #1
 8007582:	005b      	lsls	r3, r3, #1
 8007584:	e7ee      	b.n	8007564 <__lshift+0x1c>
 8007586:	2300      	movs	r3, #0
 8007588:	f100 0114 	add.w	r1, r0, #20
 800758c:	f100 0210 	add.w	r2, r0, #16
 8007590:	4618      	mov	r0, r3
 8007592:	4553      	cmp	r3, sl
 8007594:	db33      	blt.n	80075fe <__lshift+0xb6>
 8007596:	6920      	ldr	r0, [r4, #16]
 8007598:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800759c:	f104 0314 	add.w	r3, r4, #20
 80075a0:	f019 091f 	ands.w	r9, r9, #31
 80075a4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80075a8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80075ac:	d02b      	beq.n	8007606 <__lshift+0xbe>
 80075ae:	468a      	mov	sl, r1
 80075b0:	2200      	movs	r2, #0
 80075b2:	f1c9 0e20 	rsb	lr, r9, #32
 80075b6:	6818      	ldr	r0, [r3, #0]
 80075b8:	fa00 f009 	lsl.w	r0, r0, r9
 80075bc:	4310      	orrs	r0, r2
 80075be:	f84a 0b04 	str.w	r0, [sl], #4
 80075c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075c6:	459c      	cmp	ip, r3
 80075c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80075cc:	d8f3      	bhi.n	80075b6 <__lshift+0x6e>
 80075ce:	ebac 0304 	sub.w	r3, ip, r4
 80075d2:	3b15      	subs	r3, #21
 80075d4:	f023 0303 	bic.w	r3, r3, #3
 80075d8:	3304      	adds	r3, #4
 80075da:	f104 0015 	add.w	r0, r4, #21
 80075de:	4584      	cmp	ip, r0
 80075e0:	bf38      	it	cc
 80075e2:	2304      	movcc	r3, #4
 80075e4:	50ca      	str	r2, [r1, r3]
 80075e6:	b10a      	cbz	r2, 80075ec <__lshift+0xa4>
 80075e8:	f108 0602 	add.w	r6, r8, #2
 80075ec:	3e01      	subs	r6, #1
 80075ee:	4638      	mov	r0, r7
 80075f0:	4621      	mov	r1, r4
 80075f2:	612e      	str	r6, [r5, #16]
 80075f4:	f7ff fd90 	bl	8007118 <_Bfree>
 80075f8:	4628      	mov	r0, r5
 80075fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075fe:	f842 0f04 	str.w	r0, [r2, #4]!
 8007602:	3301      	adds	r3, #1
 8007604:	e7c5      	b.n	8007592 <__lshift+0x4a>
 8007606:	3904      	subs	r1, #4
 8007608:	f853 2b04 	ldr.w	r2, [r3], #4
 800760c:	459c      	cmp	ip, r3
 800760e:	f841 2f04 	str.w	r2, [r1, #4]!
 8007612:	d8f9      	bhi.n	8007608 <__lshift+0xc0>
 8007614:	e7ea      	b.n	80075ec <__lshift+0xa4>
 8007616:	bf00      	nop
 8007618:	08009a4f 	.word	0x08009a4f
 800761c:	08009a60 	.word	0x08009a60

08007620 <__mcmp>:
 8007620:	4603      	mov	r3, r0
 8007622:	690a      	ldr	r2, [r1, #16]
 8007624:	6900      	ldr	r0, [r0, #16]
 8007626:	b530      	push	{r4, r5, lr}
 8007628:	1a80      	subs	r0, r0, r2
 800762a:	d10d      	bne.n	8007648 <__mcmp+0x28>
 800762c:	3314      	adds	r3, #20
 800762e:	3114      	adds	r1, #20
 8007630:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007634:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007638:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800763c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007640:	4295      	cmp	r5, r2
 8007642:	d002      	beq.n	800764a <__mcmp+0x2a>
 8007644:	d304      	bcc.n	8007650 <__mcmp+0x30>
 8007646:	2001      	movs	r0, #1
 8007648:	bd30      	pop	{r4, r5, pc}
 800764a:	42a3      	cmp	r3, r4
 800764c:	d3f4      	bcc.n	8007638 <__mcmp+0x18>
 800764e:	e7fb      	b.n	8007648 <__mcmp+0x28>
 8007650:	f04f 30ff 	mov.w	r0, #4294967295
 8007654:	e7f8      	b.n	8007648 <__mcmp+0x28>
	...

08007658 <__mdiff>:
 8007658:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800765c:	460d      	mov	r5, r1
 800765e:	4607      	mov	r7, r0
 8007660:	4611      	mov	r1, r2
 8007662:	4628      	mov	r0, r5
 8007664:	4614      	mov	r4, r2
 8007666:	f7ff ffdb 	bl	8007620 <__mcmp>
 800766a:	1e06      	subs	r6, r0, #0
 800766c:	d111      	bne.n	8007692 <__mdiff+0x3a>
 800766e:	4631      	mov	r1, r6
 8007670:	4638      	mov	r0, r7
 8007672:	f7ff fd11 	bl	8007098 <_Balloc>
 8007676:	4602      	mov	r2, r0
 8007678:	b928      	cbnz	r0, 8007686 <__mdiff+0x2e>
 800767a:	f240 2137 	movw	r1, #567	; 0x237
 800767e:	4b3a      	ldr	r3, [pc, #232]	; (8007768 <__mdiff+0x110>)
 8007680:	483a      	ldr	r0, [pc, #232]	; (800776c <__mdiff+0x114>)
 8007682:	f001 fa95 	bl	8008bb0 <__assert_func>
 8007686:	2301      	movs	r3, #1
 8007688:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800768c:	4610      	mov	r0, r2
 800768e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007692:	bfa4      	itt	ge
 8007694:	4623      	movge	r3, r4
 8007696:	462c      	movge	r4, r5
 8007698:	4638      	mov	r0, r7
 800769a:	6861      	ldr	r1, [r4, #4]
 800769c:	bfa6      	itte	ge
 800769e:	461d      	movge	r5, r3
 80076a0:	2600      	movge	r6, #0
 80076a2:	2601      	movlt	r6, #1
 80076a4:	f7ff fcf8 	bl	8007098 <_Balloc>
 80076a8:	4602      	mov	r2, r0
 80076aa:	b918      	cbnz	r0, 80076b4 <__mdiff+0x5c>
 80076ac:	f240 2145 	movw	r1, #581	; 0x245
 80076b0:	4b2d      	ldr	r3, [pc, #180]	; (8007768 <__mdiff+0x110>)
 80076b2:	e7e5      	b.n	8007680 <__mdiff+0x28>
 80076b4:	f102 0814 	add.w	r8, r2, #20
 80076b8:	46c2      	mov	sl, r8
 80076ba:	f04f 0c00 	mov.w	ip, #0
 80076be:	6927      	ldr	r7, [r4, #16]
 80076c0:	60c6      	str	r6, [r0, #12]
 80076c2:	692e      	ldr	r6, [r5, #16]
 80076c4:	f104 0014 	add.w	r0, r4, #20
 80076c8:	f105 0914 	add.w	r9, r5, #20
 80076cc:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80076d0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80076d4:	3410      	adds	r4, #16
 80076d6:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80076da:	f859 3b04 	ldr.w	r3, [r9], #4
 80076de:	fa1f f18b 	uxth.w	r1, fp
 80076e2:	4461      	add	r1, ip
 80076e4:	fa1f fc83 	uxth.w	ip, r3
 80076e8:	0c1b      	lsrs	r3, r3, #16
 80076ea:	eba1 010c 	sub.w	r1, r1, ip
 80076ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80076f2:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80076f6:	b289      	uxth	r1, r1
 80076f8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80076fc:	454e      	cmp	r6, r9
 80076fe:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007702:	f84a 1b04 	str.w	r1, [sl], #4
 8007706:	d8e6      	bhi.n	80076d6 <__mdiff+0x7e>
 8007708:	1b73      	subs	r3, r6, r5
 800770a:	3b15      	subs	r3, #21
 800770c:	f023 0303 	bic.w	r3, r3, #3
 8007710:	3515      	adds	r5, #21
 8007712:	3304      	adds	r3, #4
 8007714:	42ae      	cmp	r6, r5
 8007716:	bf38      	it	cc
 8007718:	2304      	movcc	r3, #4
 800771a:	4418      	add	r0, r3
 800771c:	4443      	add	r3, r8
 800771e:	461e      	mov	r6, r3
 8007720:	4605      	mov	r5, r0
 8007722:	4575      	cmp	r5, lr
 8007724:	d30e      	bcc.n	8007744 <__mdiff+0xec>
 8007726:	f10e 0103 	add.w	r1, lr, #3
 800772a:	1a09      	subs	r1, r1, r0
 800772c:	f021 0103 	bic.w	r1, r1, #3
 8007730:	3803      	subs	r0, #3
 8007732:	4586      	cmp	lr, r0
 8007734:	bf38      	it	cc
 8007736:	2100      	movcc	r1, #0
 8007738:	440b      	add	r3, r1
 800773a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800773e:	b189      	cbz	r1, 8007764 <__mdiff+0x10c>
 8007740:	6117      	str	r7, [r2, #16]
 8007742:	e7a3      	b.n	800768c <__mdiff+0x34>
 8007744:	f855 8b04 	ldr.w	r8, [r5], #4
 8007748:	fa1f f188 	uxth.w	r1, r8
 800774c:	4461      	add	r1, ip
 800774e:	140c      	asrs	r4, r1, #16
 8007750:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007754:	b289      	uxth	r1, r1
 8007756:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800775a:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800775e:	f846 1b04 	str.w	r1, [r6], #4
 8007762:	e7de      	b.n	8007722 <__mdiff+0xca>
 8007764:	3f01      	subs	r7, #1
 8007766:	e7e8      	b.n	800773a <__mdiff+0xe2>
 8007768:	08009a4f 	.word	0x08009a4f
 800776c:	08009a60 	.word	0x08009a60

08007770 <__ulp>:
 8007770:	4b0e      	ldr	r3, [pc, #56]	; (80077ac <__ulp+0x3c>)
 8007772:	400b      	ands	r3, r1
 8007774:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8007778:	2b00      	cmp	r3, #0
 800777a:	dc08      	bgt.n	800778e <__ulp+0x1e>
 800777c:	425b      	negs	r3, r3
 800777e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8007782:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007786:	da04      	bge.n	8007792 <__ulp+0x22>
 8007788:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800778c:	4113      	asrs	r3, r2
 800778e:	2200      	movs	r2, #0
 8007790:	e008      	b.n	80077a4 <__ulp+0x34>
 8007792:	f1a2 0314 	sub.w	r3, r2, #20
 8007796:	2b1e      	cmp	r3, #30
 8007798:	bfd6      	itet	le
 800779a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800779e:	2201      	movgt	r2, #1
 80077a0:	40da      	lsrle	r2, r3
 80077a2:	2300      	movs	r3, #0
 80077a4:	4619      	mov	r1, r3
 80077a6:	4610      	mov	r0, r2
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	7ff00000 	.word	0x7ff00000

080077b0 <__b2d>:
 80077b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b2:	6905      	ldr	r5, [r0, #16]
 80077b4:	f100 0714 	add.w	r7, r0, #20
 80077b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80077bc:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80077c0:	1f2e      	subs	r6, r5, #4
 80077c2:	4620      	mov	r0, r4
 80077c4:	f7ff fd5a 	bl	800727c <__hi0bits>
 80077c8:	f1c0 0220 	rsb	r2, r0, #32
 80077cc:	280a      	cmp	r0, #10
 80077ce:	4603      	mov	r3, r0
 80077d0:	f8df c068 	ldr.w	ip, [pc, #104]	; 800783c <__b2d+0x8c>
 80077d4:	600a      	str	r2, [r1, #0]
 80077d6:	dc12      	bgt.n	80077fe <__b2d+0x4e>
 80077d8:	f1c0 0e0b 	rsb	lr, r0, #11
 80077dc:	fa24 f20e 	lsr.w	r2, r4, lr
 80077e0:	42b7      	cmp	r7, r6
 80077e2:	ea42 010c 	orr.w	r1, r2, ip
 80077e6:	bf2c      	ite	cs
 80077e8:	2200      	movcs	r2, #0
 80077ea:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 80077ee:	3315      	adds	r3, #21
 80077f0:	fa04 f303 	lsl.w	r3, r4, r3
 80077f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80077f8:	431a      	orrs	r2, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077fe:	42b7      	cmp	r7, r6
 8007800:	bf2e      	itee	cs
 8007802:	2200      	movcs	r2, #0
 8007804:	f855 2c08 	ldrcc.w	r2, [r5, #-8]
 8007808:	f1a5 0608 	subcc.w	r6, r5, #8
 800780c:	3b0b      	subs	r3, #11
 800780e:	d012      	beq.n	8007836 <__b2d+0x86>
 8007810:	f1c3 0520 	rsb	r5, r3, #32
 8007814:	fa22 f105 	lsr.w	r1, r2, r5
 8007818:	409c      	lsls	r4, r3
 800781a:	430c      	orrs	r4, r1
 800781c:	42be      	cmp	r6, r7
 800781e:	f044 517f 	orr.w	r1, r4, #1069547520	; 0x3fc00000
 8007822:	bf94      	ite	ls
 8007824:	2400      	movls	r4, #0
 8007826:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800782a:	409a      	lsls	r2, r3
 800782c:	40ec      	lsrs	r4, r5
 800782e:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007832:	4322      	orrs	r2, r4
 8007834:	e7e1      	b.n	80077fa <__b2d+0x4a>
 8007836:	ea44 010c 	orr.w	r1, r4, ip
 800783a:	e7de      	b.n	80077fa <__b2d+0x4a>
 800783c:	3ff00000 	.word	0x3ff00000

08007840 <__d2b>:
 8007840:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007842:	2101      	movs	r1, #1
 8007844:	4617      	mov	r7, r2
 8007846:	461c      	mov	r4, r3
 8007848:	9e08      	ldr	r6, [sp, #32]
 800784a:	f7ff fc25 	bl	8007098 <_Balloc>
 800784e:	4605      	mov	r5, r0
 8007850:	b930      	cbnz	r0, 8007860 <__d2b+0x20>
 8007852:	4602      	mov	r2, r0
 8007854:	f240 310f 	movw	r1, #783	; 0x30f
 8007858:	4b22      	ldr	r3, [pc, #136]	; (80078e4 <__d2b+0xa4>)
 800785a:	4823      	ldr	r0, [pc, #140]	; (80078e8 <__d2b+0xa8>)
 800785c:	f001 f9a8 	bl	8008bb0 <__assert_func>
 8007860:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007864:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007868:	bb24      	cbnz	r4, 80078b4 <__d2b+0x74>
 800786a:	2f00      	cmp	r7, #0
 800786c:	9301      	str	r3, [sp, #4]
 800786e:	d026      	beq.n	80078be <__d2b+0x7e>
 8007870:	4668      	mov	r0, sp
 8007872:	9700      	str	r7, [sp, #0]
 8007874:	f7ff fd22 	bl	80072bc <__lo0bits>
 8007878:	e9dd 1200 	ldrd	r1, r2, [sp]
 800787c:	b1e8      	cbz	r0, 80078ba <__d2b+0x7a>
 800787e:	f1c0 0320 	rsb	r3, r0, #32
 8007882:	fa02 f303 	lsl.w	r3, r2, r3
 8007886:	430b      	orrs	r3, r1
 8007888:	40c2      	lsrs	r2, r0
 800788a:	616b      	str	r3, [r5, #20]
 800788c:	9201      	str	r2, [sp, #4]
 800788e:	9b01      	ldr	r3, [sp, #4]
 8007890:	2b00      	cmp	r3, #0
 8007892:	bf14      	ite	ne
 8007894:	2102      	movne	r1, #2
 8007896:	2101      	moveq	r1, #1
 8007898:	61ab      	str	r3, [r5, #24]
 800789a:	6129      	str	r1, [r5, #16]
 800789c:	b1bc      	cbz	r4, 80078ce <__d2b+0x8e>
 800789e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80078a2:	4404      	add	r4, r0
 80078a4:	6034      	str	r4, [r6, #0]
 80078a6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80078aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078ac:	6018      	str	r0, [r3, #0]
 80078ae:	4628      	mov	r0, r5
 80078b0:	b003      	add	sp, #12
 80078b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80078b8:	e7d7      	b.n	800786a <__d2b+0x2a>
 80078ba:	6169      	str	r1, [r5, #20]
 80078bc:	e7e7      	b.n	800788e <__d2b+0x4e>
 80078be:	a801      	add	r0, sp, #4
 80078c0:	f7ff fcfc 	bl	80072bc <__lo0bits>
 80078c4:	9b01      	ldr	r3, [sp, #4]
 80078c6:	2101      	movs	r1, #1
 80078c8:	616b      	str	r3, [r5, #20]
 80078ca:	3020      	adds	r0, #32
 80078cc:	e7e5      	b.n	800789a <__d2b+0x5a>
 80078ce:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80078d2:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80078d6:	6030      	str	r0, [r6, #0]
 80078d8:	6918      	ldr	r0, [r3, #16]
 80078da:	f7ff fccf 	bl	800727c <__hi0bits>
 80078de:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80078e2:	e7e2      	b.n	80078aa <__d2b+0x6a>
 80078e4:	08009a4f 	.word	0x08009a4f
 80078e8:	08009a60 	.word	0x08009a60

080078ec <__ratio>:
 80078ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f0:	4688      	mov	r8, r1
 80078f2:	4669      	mov	r1, sp
 80078f4:	4681      	mov	r9, r0
 80078f6:	f7ff ff5b 	bl	80077b0 <__b2d>
 80078fa:	460f      	mov	r7, r1
 80078fc:	4604      	mov	r4, r0
 80078fe:	460d      	mov	r5, r1
 8007900:	4640      	mov	r0, r8
 8007902:	a901      	add	r1, sp, #4
 8007904:	f7ff ff54 	bl	80077b0 <__b2d>
 8007908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800790c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007910:	468b      	mov	fp, r1
 8007912:	eba3 0c02 	sub.w	ip, r3, r2
 8007916:	e9dd 3200 	ldrd	r3, r2, [sp]
 800791a:	1a9b      	subs	r3, r3, r2
 800791c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007920:	2b00      	cmp	r3, #0
 8007922:	bfd5      	itete	le
 8007924:	460a      	movle	r2, r1
 8007926:	462a      	movgt	r2, r5
 8007928:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800792c:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007930:	bfd8      	it	le
 8007932:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007936:	465b      	mov	r3, fp
 8007938:	4602      	mov	r2, r0
 800793a:	4639      	mov	r1, r7
 800793c:	4620      	mov	r0, r4
 800793e:	f7f8 fef5 	bl	800072c <__aeabi_ddiv>
 8007942:	b003      	add	sp, #12
 8007944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007948 <__copybits>:
 8007948:	3901      	subs	r1, #1
 800794a:	b570      	push	{r4, r5, r6, lr}
 800794c:	1149      	asrs	r1, r1, #5
 800794e:	6914      	ldr	r4, [r2, #16]
 8007950:	3101      	adds	r1, #1
 8007952:	f102 0314 	add.w	r3, r2, #20
 8007956:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800795a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800795e:	1f05      	subs	r5, r0, #4
 8007960:	42a3      	cmp	r3, r4
 8007962:	d30c      	bcc.n	800797e <__copybits+0x36>
 8007964:	1aa3      	subs	r3, r4, r2
 8007966:	3b11      	subs	r3, #17
 8007968:	f023 0303 	bic.w	r3, r3, #3
 800796c:	3211      	adds	r2, #17
 800796e:	42a2      	cmp	r2, r4
 8007970:	bf88      	it	hi
 8007972:	2300      	movhi	r3, #0
 8007974:	4418      	add	r0, r3
 8007976:	2300      	movs	r3, #0
 8007978:	4288      	cmp	r0, r1
 800797a:	d305      	bcc.n	8007988 <__copybits+0x40>
 800797c:	bd70      	pop	{r4, r5, r6, pc}
 800797e:	f853 6b04 	ldr.w	r6, [r3], #4
 8007982:	f845 6f04 	str.w	r6, [r5, #4]!
 8007986:	e7eb      	b.n	8007960 <__copybits+0x18>
 8007988:	f840 3b04 	str.w	r3, [r0], #4
 800798c:	e7f4      	b.n	8007978 <__copybits+0x30>

0800798e <__any_on>:
 800798e:	f100 0214 	add.w	r2, r0, #20
 8007992:	6900      	ldr	r0, [r0, #16]
 8007994:	114b      	asrs	r3, r1, #5
 8007996:	4298      	cmp	r0, r3
 8007998:	b510      	push	{r4, lr}
 800799a:	db11      	blt.n	80079c0 <__any_on+0x32>
 800799c:	dd0a      	ble.n	80079b4 <__any_on+0x26>
 800799e:	f011 011f 	ands.w	r1, r1, #31
 80079a2:	d007      	beq.n	80079b4 <__any_on+0x26>
 80079a4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80079a8:	fa24 f001 	lsr.w	r0, r4, r1
 80079ac:	fa00 f101 	lsl.w	r1, r0, r1
 80079b0:	428c      	cmp	r4, r1
 80079b2:	d10b      	bne.n	80079cc <__any_on+0x3e>
 80079b4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d803      	bhi.n	80079c4 <__any_on+0x36>
 80079bc:	2000      	movs	r0, #0
 80079be:	bd10      	pop	{r4, pc}
 80079c0:	4603      	mov	r3, r0
 80079c2:	e7f7      	b.n	80079b4 <__any_on+0x26>
 80079c4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079c8:	2900      	cmp	r1, #0
 80079ca:	d0f5      	beq.n	80079b8 <__any_on+0x2a>
 80079cc:	2001      	movs	r0, #1
 80079ce:	e7f6      	b.n	80079be <__any_on+0x30>

080079d0 <sulp>:
 80079d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d4:	460f      	mov	r7, r1
 80079d6:	4690      	mov	r8, r2
 80079d8:	f7ff feca 	bl	8007770 <__ulp>
 80079dc:	4604      	mov	r4, r0
 80079de:	460d      	mov	r5, r1
 80079e0:	f1b8 0f00 	cmp.w	r8, #0
 80079e4:	d011      	beq.n	8007a0a <sulp+0x3a>
 80079e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80079ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	dd0b      	ble.n	8007a0a <sulp+0x3a>
 80079f2:	2400      	movs	r4, #0
 80079f4:	051b      	lsls	r3, r3, #20
 80079f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80079fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80079fe:	4622      	mov	r2, r4
 8007a00:	462b      	mov	r3, r5
 8007a02:	f7f8 fd69 	bl	80004d8 <__aeabi_dmul>
 8007a06:	4604      	mov	r4, r0
 8007a08:	460d      	mov	r5, r1
 8007a0a:	4620      	mov	r0, r4
 8007a0c:	4629      	mov	r1, r5
 8007a0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a12:	0000      	movs	r0, r0
 8007a14:	0000      	movs	r0, r0
	...

08007a18 <_strtod_l>:
 8007a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1c:	b09f      	sub	sp, #124	; 0x7c
 8007a1e:	9217      	str	r2, [sp, #92]	; 0x5c
 8007a20:	2200      	movs	r2, #0
 8007a22:	4604      	mov	r4, r0
 8007a24:	921a      	str	r2, [sp, #104]	; 0x68
 8007a26:	460d      	mov	r5, r1
 8007a28:	f04f 0800 	mov.w	r8, #0
 8007a2c:	f04f 0900 	mov.w	r9, #0
 8007a30:	460a      	mov	r2, r1
 8007a32:	9219      	str	r2, [sp, #100]	; 0x64
 8007a34:	7811      	ldrb	r1, [r2, #0]
 8007a36:	292b      	cmp	r1, #43	; 0x2b
 8007a38:	d04a      	beq.n	8007ad0 <_strtod_l+0xb8>
 8007a3a:	d838      	bhi.n	8007aae <_strtod_l+0x96>
 8007a3c:	290d      	cmp	r1, #13
 8007a3e:	d832      	bhi.n	8007aa6 <_strtod_l+0x8e>
 8007a40:	2908      	cmp	r1, #8
 8007a42:	d832      	bhi.n	8007aaa <_strtod_l+0x92>
 8007a44:	2900      	cmp	r1, #0
 8007a46:	d03b      	beq.n	8007ac0 <_strtod_l+0xa8>
 8007a48:	2200      	movs	r2, #0
 8007a4a:	920e      	str	r2, [sp, #56]	; 0x38
 8007a4c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007a4e:	7832      	ldrb	r2, [r6, #0]
 8007a50:	2a30      	cmp	r2, #48	; 0x30
 8007a52:	f040 80b2 	bne.w	8007bba <_strtod_l+0x1a2>
 8007a56:	7872      	ldrb	r2, [r6, #1]
 8007a58:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8007a5c:	2a58      	cmp	r2, #88	; 0x58
 8007a5e:	d16e      	bne.n	8007b3e <_strtod_l+0x126>
 8007a60:	9302      	str	r3, [sp, #8]
 8007a62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a64:	4620      	mov	r0, r4
 8007a66:	9301      	str	r3, [sp, #4]
 8007a68:	ab1a      	add	r3, sp, #104	; 0x68
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	4a8c      	ldr	r2, [pc, #560]	; (8007ca0 <_strtod_l+0x288>)
 8007a6e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007a70:	a919      	add	r1, sp, #100	; 0x64
 8007a72:	f001 f937 	bl	8008ce4 <__gethex>
 8007a76:	f010 070f 	ands.w	r7, r0, #15
 8007a7a:	4605      	mov	r5, r0
 8007a7c:	d005      	beq.n	8007a8a <_strtod_l+0x72>
 8007a7e:	2f06      	cmp	r7, #6
 8007a80:	d128      	bne.n	8007ad4 <_strtod_l+0xbc>
 8007a82:	2300      	movs	r3, #0
 8007a84:	3601      	adds	r6, #1
 8007a86:	9619      	str	r6, [sp, #100]	; 0x64
 8007a88:	930e      	str	r3, [sp, #56]	; 0x38
 8007a8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 85a0 	bne.w	80085d2 <_strtod_l+0xbba>
 8007a92:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a94:	b1cb      	cbz	r3, 8007aca <_strtod_l+0xb2>
 8007a96:	4642      	mov	r2, r8
 8007a98:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007a9c:	4610      	mov	r0, r2
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	b01f      	add	sp, #124	; 0x7c
 8007aa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aa6:	2920      	cmp	r1, #32
 8007aa8:	d1ce      	bne.n	8007a48 <_strtod_l+0x30>
 8007aaa:	3201      	adds	r2, #1
 8007aac:	e7c1      	b.n	8007a32 <_strtod_l+0x1a>
 8007aae:	292d      	cmp	r1, #45	; 0x2d
 8007ab0:	d1ca      	bne.n	8007a48 <_strtod_l+0x30>
 8007ab2:	2101      	movs	r1, #1
 8007ab4:	910e      	str	r1, [sp, #56]	; 0x38
 8007ab6:	1c51      	adds	r1, r2, #1
 8007ab8:	9119      	str	r1, [sp, #100]	; 0x64
 8007aba:	7852      	ldrb	r2, [r2, #1]
 8007abc:	2a00      	cmp	r2, #0
 8007abe:	d1c5      	bne.n	8007a4c <_strtod_l+0x34>
 8007ac0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007ac2:	9519      	str	r5, [sp, #100]	; 0x64
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f040 8582 	bne.w	80085ce <_strtod_l+0xbb6>
 8007aca:	4642      	mov	r2, r8
 8007acc:	464b      	mov	r3, r9
 8007ace:	e7e5      	b.n	8007a9c <_strtod_l+0x84>
 8007ad0:	2100      	movs	r1, #0
 8007ad2:	e7ef      	b.n	8007ab4 <_strtod_l+0x9c>
 8007ad4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007ad6:	b13a      	cbz	r2, 8007ae8 <_strtod_l+0xd0>
 8007ad8:	2135      	movs	r1, #53	; 0x35
 8007ada:	a81c      	add	r0, sp, #112	; 0x70
 8007adc:	f7ff ff34 	bl	8007948 <__copybits>
 8007ae0:	4620      	mov	r0, r4
 8007ae2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ae4:	f7ff fb18 	bl	8007118 <_Bfree>
 8007ae8:	3f01      	subs	r7, #1
 8007aea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8007aec:	2f04      	cmp	r7, #4
 8007aee:	d806      	bhi.n	8007afe <_strtod_l+0xe6>
 8007af0:	e8df f007 	tbb	[pc, r7]
 8007af4:	201d0314 	.word	0x201d0314
 8007af8:	14          	.byte	0x14
 8007af9:	00          	.byte	0x00
 8007afa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 8007afe:	05e9      	lsls	r1, r5, #23
 8007b00:	bf48      	it	mi
 8007b02:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007b06:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b0a:	0d1b      	lsrs	r3, r3, #20
 8007b0c:	051b      	lsls	r3, r3, #20
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1bb      	bne.n	8007a8a <_strtod_l+0x72>
 8007b12:	f7fe fb17 	bl	8006144 <__errno>
 8007b16:	2322      	movs	r3, #34	; 0x22
 8007b18:	6003      	str	r3, [r0, #0]
 8007b1a:	e7b6      	b.n	8007a8a <_strtod_l+0x72>
 8007b1c:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b20:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 8007b24:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b28:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007b2c:	e7e7      	b.n	8007afe <_strtod_l+0xe6>
 8007b2e:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8007ca4 <_strtod_l+0x28c>
 8007b32:	e7e4      	b.n	8007afe <_strtod_l+0xe6>
 8007b34:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007b38:	f04f 38ff 	mov.w	r8, #4294967295
 8007b3c:	e7df      	b.n	8007afe <_strtod_l+0xe6>
 8007b3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b40:	1c5a      	adds	r2, r3, #1
 8007b42:	9219      	str	r2, [sp, #100]	; 0x64
 8007b44:	785b      	ldrb	r3, [r3, #1]
 8007b46:	2b30      	cmp	r3, #48	; 0x30
 8007b48:	d0f9      	beq.n	8007b3e <_strtod_l+0x126>
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d09d      	beq.n	8007a8a <_strtod_l+0x72>
 8007b4e:	2301      	movs	r3, #1
 8007b50:	f04f 0a00 	mov.w	sl, #0
 8007b54:	220a      	movs	r2, #10
 8007b56:	46d3      	mov	fp, sl
 8007b58:	9305      	str	r3, [sp, #20]
 8007b5a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007b5c:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8007b60:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b62:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007b64:	7806      	ldrb	r6, [r0, #0]
 8007b66:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007b6a:	b2d9      	uxtb	r1, r3
 8007b6c:	2909      	cmp	r1, #9
 8007b6e:	d926      	bls.n	8007bbe <_strtod_l+0x1a6>
 8007b70:	2201      	movs	r2, #1
 8007b72:	494d      	ldr	r1, [pc, #308]	; (8007ca8 <_strtod_l+0x290>)
 8007b74:	f000 ffe6 	bl	8008b44 <strncmp>
 8007b78:	2800      	cmp	r0, #0
 8007b7a:	d030      	beq.n	8007bde <_strtod_l+0x1c6>
 8007b7c:	2000      	movs	r0, #0
 8007b7e:	4632      	mov	r2, r6
 8007b80:	4603      	mov	r3, r0
 8007b82:	465e      	mov	r6, fp
 8007b84:	9008      	str	r0, [sp, #32]
 8007b86:	2a65      	cmp	r2, #101	; 0x65
 8007b88:	d001      	beq.n	8007b8e <_strtod_l+0x176>
 8007b8a:	2a45      	cmp	r2, #69	; 0x45
 8007b8c:	d113      	bne.n	8007bb6 <_strtod_l+0x19e>
 8007b8e:	b91e      	cbnz	r6, 8007b98 <_strtod_l+0x180>
 8007b90:	9a05      	ldr	r2, [sp, #20]
 8007b92:	4302      	orrs	r2, r0
 8007b94:	d094      	beq.n	8007ac0 <_strtod_l+0xa8>
 8007b96:	2600      	movs	r6, #0
 8007b98:	9d19      	ldr	r5, [sp, #100]	; 0x64
 8007b9a:	1c6a      	adds	r2, r5, #1
 8007b9c:	9219      	str	r2, [sp, #100]	; 0x64
 8007b9e:	786a      	ldrb	r2, [r5, #1]
 8007ba0:	2a2b      	cmp	r2, #43	; 0x2b
 8007ba2:	d074      	beq.n	8007c8e <_strtod_l+0x276>
 8007ba4:	2a2d      	cmp	r2, #45	; 0x2d
 8007ba6:	d078      	beq.n	8007c9a <_strtod_l+0x282>
 8007ba8:	f04f 0c00 	mov.w	ip, #0
 8007bac:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007bb0:	2909      	cmp	r1, #9
 8007bb2:	d97f      	bls.n	8007cb4 <_strtod_l+0x29c>
 8007bb4:	9519      	str	r5, [sp, #100]	; 0x64
 8007bb6:	2700      	movs	r7, #0
 8007bb8:	e09e      	b.n	8007cf8 <_strtod_l+0x2e0>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e7c8      	b.n	8007b50 <_strtod_l+0x138>
 8007bbe:	f1bb 0f08 	cmp.w	fp, #8
 8007bc2:	bfd8      	it	le
 8007bc4:	990a      	ldrle	r1, [sp, #40]	; 0x28
 8007bc6:	f100 0001 	add.w	r0, r0, #1
 8007bca:	bfd6      	itet	le
 8007bcc:	fb02 3301 	mlale	r3, r2, r1, r3
 8007bd0:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007bd4:	930a      	strle	r3, [sp, #40]	; 0x28
 8007bd6:	f10b 0b01 	add.w	fp, fp, #1
 8007bda:	9019      	str	r0, [sp, #100]	; 0x64
 8007bdc:	e7c1      	b.n	8007b62 <_strtod_l+0x14a>
 8007bde:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007be0:	1c5a      	adds	r2, r3, #1
 8007be2:	9219      	str	r2, [sp, #100]	; 0x64
 8007be4:	785a      	ldrb	r2, [r3, #1]
 8007be6:	f1bb 0f00 	cmp.w	fp, #0
 8007bea:	d037      	beq.n	8007c5c <_strtod_l+0x244>
 8007bec:	465e      	mov	r6, fp
 8007bee:	9008      	str	r0, [sp, #32]
 8007bf0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007bf4:	2b09      	cmp	r3, #9
 8007bf6:	d912      	bls.n	8007c1e <_strtod_l+0x206>
 8007bf8:	2301      	movs	r3, #1
 8007bfa:	e7c4      	b.n	8007b86 <_strtod_l+0x16e>
 8007bfc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bfe:	3001      	adds	r0, #1
 8007c00:	1c5a      	adds	r2, r3, #1
 8007c02:	9219      	str	r2, [sp, #100]	; 0x64
 8007c04:	785a      	ldrb	r2, [r3, #1]
 8007c06:	2a30      	cmp	r2, #48	; 0x30
 8007c08:	d0f8      	beq.n	8007bfc <_strtod_l+0x1e4>
 8007c0a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c0e:	2b08      	cmp	r3, #8
 8007c10:	f200 84e4 	bhi.w	80085dc <_strtod_l+0xbc4>
 8007c14:	9008      	str	r0, [sp, #32]
 8007c16:	2000      	movs	r0, #0
 8007c18:	4606      	mov	r6, r0
 8007c1a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007c1c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007c1e:	3a30      	subs	r2, #48	; 0x30
 8007c20:	f100 0301 	add.w	r3, r0, #1
 8007c24:	d014      	beq.n	8007c50 <_strtod_l+0x238>
 8007c26:	9908      	ldr	r1, [sp, #32]
 8007c28:	eb00 0c06 	add.w	ip, r0, r6
 8007c2c:	4419      	add	r1, r3
 8007c2e:	9108      	str	r1, [sp, #32]
 8007c30:	4633      	mov	r3, r6
 8007c32:	210a      	movs	r1, #10
 8007c34:	4563      	cmp	r3, ip
 8007c36:	d113      	bne.n	8007c60 <_strtod_l+0x248>
 8007c38:	1833      	adds	r3, r6, r0
 8007c3a:	2b08      	cmp	r3, #8
 8007c3c:	f106 0601 	add.w	r6, r6, #1
 8007c40:	4406      	add	r6, r0
 8007c42:	dc1a      	bgt.n	8007c7a <_strtod_l+0x262>
 8007c44:	230a      	movs	r3, #10
 8007c46:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007c48:	fb03 2301 	mla	r3, r3, r1, r2
 8007c4c:	930a      	str	r3, [sp, #40]	; 0x28
 8007c4e:	2300      	movs	r3, #0
 8007c50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007c52:	4618      	mov	r0, r3
 8007c54:	1c51      	adds	r1, r2, #1
 8007c56:	9119      	str	r1, [sp, #100]	; 0x64
 8007c58:	7852      	ldrb	r2, [r2, #1]
 8007c5a:	e7c9      	b.n	8007bf0 <_strtod_l+0x1d8>
 8007c5c:	4658      	mov	r0, fp
 8007c5e:	e7d2      	b.n	8007c06 <_strtod_l+0x1ee>
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	f103 0301 	add.w	r3, r3, #1
 8007c66:	dc03      	bgt.n	8007c70 <_strtod_l+0x258>
 8007c68:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007c6a:	434f      	muls	r7, r1
 8007c6c:	970a      	str	r7, [sp, #40]	; 0x28
 8007c6e:	e7e1      	b.n	8007c34 <_strtod_l+0x21c>
 8007c70:	2b10      	cmp	r3, #16
 8007c72:	bfd8      	it	le
 8007c74:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007c78:	e7dc      	b.n	8007c34 <_strtod_l+0x21c>
 8007c7a:	2e10      	cmp	r6, #16
 8007c7c:	bfdc      	itt	le
 8007c7e:	230a      	movle	r3, #10
 8007c80:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007c84:	e7e3      	b.n	8007c4e <_strtod_l+0x236>
 8007c86:	2300      	movs	r3, #0
 8007c88:	9308      	str	r3, [sp, #32]
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e780      	b.n	8007b90 <_strtod_l+0x178>
 8007c8e:	f04f 0c00 	mov.w	ip, #0
 8007c92:	1caa      	adds	r2, r5, #2
 8007c94:	9219      	str	r2, [sp, #100]	; 0x64
 8007c96:	78aa      	ldrb	r2, [r5, #2]
 8007c98:	e788      	b.n	8007bac <_strtod_l+0x194>
 8007c9a:	f04f 0c01 	mov.w	ip, #1
 8007c9e:	e7f8      	b.n	8007c92 <_strtod_l+0x27a>
 8007ca0:	08009bc0 	.word	0x08009bc0
 8007ca4:	7ff00000 	.word	0x7ff00000
 8007ca8:	08009bbc 	.word	0x08009bbc
 8007cac:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cae:	1c51      	adds	r1, r2, #1
 8007cb0:	9119      	str	r1, [sp, #100]	; 0x64
 8007cb2:	7852      	ldrb	r2, [r2, #1]
 8007cb4:	2a30      	cmp	r2, #48	; 0x30
 8007cb6:	d0f9      	beq.n	8007cac <_strtod_l+0x294>
 8007cb8:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007cbc:	2908      	cmp	r1, #8
 8007cbe:	f63f af7a 	bhi.w	8007bb6 <_strtod_l+0x19e>
 8007cc2:	3a30      	subs	r2, #48	; 0x30
 8007cc4:	9209      	str	r2, [sp, #36]	; 0x24
 8007cc6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007cc8:	920c      	str	r2, [sp, #48]	; 0x30
 8007cca:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007ccc:	1c57      	adds	r7, r2, #1
 8007cce:	9719      	str	r7, [sp, #100]	; 0x64
 8007cd0:	7852      	ldrb	r2, [r2, #1]
 8007cd2:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007cd6:	f1be 0f09 	cmp.w	lr, #9
 8007cda:	d938      	bls.n	8007d4e <_strtod_l+0x336>
 8007cdc:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007cde:	1a7f      	subs	r7, r7, r1
 8007ce0:	2f08      	cmp	r7, #8
 8007ce2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007ce6:	dc03      	bgt.n	8007cf0 <_strtod_l+0x2d8>
 8007ce8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cea:	428f      	cmp	r7, r1
 8007cec:	bfa8      	it	ge
 8007cee:	460f      	movge	r7, r1
 8007cf0:	f1bc 0f00 	cmp.w	ip, #0
 8007cf4:	d000      	beq.n	8007cf8 <_strtod_l+0x2e0>
 8007cf6:	427f      	negs	r7, r7
 8007cf8:	2e00      	cmp	r6, #0
 8007cfa:	d14f      	bne.n	8007d9c <_strtod_l+0x384>
 8007cfc:	9905      	ldr	r1, [sp, #20]
 8007cfe:	4301      	orrs	r1, r0
 8007d00:	f47f aec3 	bne.w	8007a8a <_strtod_l+0x72>
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f47f aedb 	bne.w	8007ac0 <_strtod_l+0xa8>
 8007d0a:	2a69      	cmp	r2, #105	; 0x69
 8007d0c:	d029      	beq.n	8007d62 <_strtod_l+0x34a>
 8007d0e:	dc26      	bgt.n	8007d5e <_strtod_l+0x346>
 8007d10:	2a49      	cmp	r2, #73	; 0x49
 8007d12:	d026      	beq.n	8007d62 <_strtod_l+0x34a>
 8007d14:	2a4e      	cmp	r2, #78	; 0x4e
 8007d16:	f47f aed3 	bne.w	8007ac0 <_strtod_l+0xa8>
 8007d1a:	499a      	ldr	r1, [pc, #616]	; (8007f84 <_strtod_l+0x56c>)
 8007d1c:	a819      	add	r0, sp, #100	; 0x64
 8007d1e:	f001 fa23 	bl	8009168 <__match>
 8007d22:	2800      	cmp	r0, #0
 8007d24:	f43f aecc 	beq.w	8007ac0 <_strtod_l+0xa8>
 8007d28:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d2a:	781b      	ldrb	r3, [r3, #0]
 8007d2c:	2b28      	cmp	r3, #40	; 0x28
 8007d2e:	d12f      	bne.n	8007d90 <_strtod_l+0x378>
 8007d30:	4995      	ldr	r1, [pc, #596]	; (8007f88 <_strtod_l+0x570>)
 8007d32:	aa1c      	add	r2, sp, #112	; 0x70
 8007d34:	a819      	add	r0, sp, #100	; 0x64
 8007d36:	f001 fa2b 	bl	8009190 <__hexnan>
 8007d3a:	2805      	cmp	r0, #5
 8007d3c:	d128      	bne.n	8007d90 <_strtod_l+0x378>
 8007d3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007d40:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8007d44:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007d48:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007d4c:	e69d      	b.n	8007a8a <_strtod_l+0x72>
 8007d4e:	210a      	movs	r1, #10
 8007d50:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007d52:	fb01 2107 	mla	r1, r1, r7, r2
 8007d56:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007d5a:	9209      	str	r2, [sp, #36]	; 0x24
 8007d5c:	e7b5      	b.n	8007cca <_strtod_l+0x2b2>
 8007d5e:	2a6e      	cmp	r2, #110	; 0x6e
 8007d60:	e7d9      	b.n	8007d16 <_strtod_l+0x2fe>
 8007d62:	498a      	ldr	r1, [pc, #552]	; (8007f8c <_strtod_l+0x574>)
 8007d64:	a819      	add	r0, sp, #100	; 0x64
 8007d66:	f001 f9ff 	bl	8009168 <__match>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	f43f aea8 	beq.w	8007ac0 <_strtod_l+0xa8>
 8007d70:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d72:	4987      	ldr	r1, [pc, #540]	; (8007f90 <_strtod_l+0x578>)
 8007d74:	3b01      	subs	r3, #1
 8007d76:	a819      	add	r0, sp, #100	; 0x64
 8007d78:	9319      	str	r3, [sp, #100]	; 0x64
 8007d7a:	f001 f9f5 	bl	8009168 <__match>
 8007d7e:	b910      	cbnz	r0, 8007d86 <_strtod_l+0x36e>
 8007d80:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d82:	3301      	adds	r3, #1
 8007d84:	9319      	str	r3, [sp, #100]	; 0x64
 8007d86:	f04f 0800 	mov.w	r8, #0
 8007d8a:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8007f94 <_strtod_l+0x57c>
 8007d8e:	e67c      	b.n	8007a8a <_strtod_l+0x72>
 8007d90:	4881      	ldr	r0, [pc, #516]	; (8007f98 <_strtod_l+0x580>)
 8007d92:	f000 ff07 	bl	8008ba4 <nan>
 8007d96:	4680      	mov	r8, r0
 8007d98:	4689      	mov	r9, r1
 8007d9a:	e676      	b.n	8007a8a <_strtod_l+0x72>
 8007d9c:	9b08      	ldr	r3, [sp, #32]
 8007d9e:	f1bb 0f00 	cmp.w	fp, #0
 8007da2:	bf08      	it	eq
 8007da4:	46b3      	moveq	fp, r6
 8007da6:	1afb      	subs	r3, r7, r3
 8007da8:	2e10      	cmp	r6, #16
 8007daa:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007dac:	4635      	mov	r5, r6
 8007dae:	9309      	str	r3, [sp, #36]	; 0x24
 8007db0:	bfa8      	it	ge
 8007db2:	2510      	movge	r5, #16
 8007db4:	f7f8 fb16 	bl	80003e4 <__aeabi_ui2d>
 8007db8:	2e09      	cmp	r6, #9
 8007dba:	4680      	mov	r8, r0
 8007dbc:	4689      	mov	r9, r1
 8007dbe:	dd13      	ble.n	8007de8 <_strtod_l+0x3d0>
 8007dc0:	4b76      	ldr	r3, [pc, #472]	; (8007f9c <_strtod_l+0x584>)
 8007dc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007dc6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007dca:	f7f8 fb85 	bl	80004d8 <__aeabi_dmul>
 8007dce:	4680      	mov	r8, r0
 8007dd0:	4650      	mov	r0, sl
 8007dd2:	4689      	mov	r9, r1
 8007dd4:	f7f8 fb06 	bl	80003e4 <__aeabi_ui2d>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4640      	mov	r0, r8
 8007dde:	4649      	mov	r1, r9
 8007de0:	f7f8 f9c4 	bl	800016c <__adddf3>
 8007de4:	4680      	mov	r8, r0
 8007de6:	4689      	mov	r9, r1
 8007de8:	2e0f      	cmp	r6, #15
 8007dea:	dc36      	bgt.n	8007e5a <_strtod_l+0x442>
 8007dec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f43f ae4b 	beq.w	8007a8a <_strtod_l+0x72>
 8007df4:	dd22      	ble.n	8007e3c <_strtod_l+0x424>
 8007df6:	2b16      	cmp	r3, #22
 8007df8:	dc09      	bgt.n	8007e0e <_strtod_l+0x3f6>
 8007dfa:	4968      	ldr	r1, [pc, #416]	; (8007f9c <_strtod_l+0x584>)
 8007dfc:	4642      	mov	r2, r8
 8007dfe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e02:	464b      	mov	r3, r9
 8007e04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e08:	f7f8 fb66 	bl	80004d8 <__aeabi_dmul>
 8007e0c:	e7c3      	b.n	8007d96 <_strtod_l+0x37e>
 8007e0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e10:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007e14:	4293      	cmp	r3, r2
 8007e16:	db20      	blt.n	8007e5a <_strtod_l+0x442>
 8007e18:	4c60      	ldr	r4, [pc, #384]	; (8007f9c <_strtod_l+0x584>)
 8007e1a:	f1c6 060f 	rsb	r6, r6, #15
 8007e1e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007e22:	4642      	mov	r2, r8
 8007e24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e28:	464b      	mov	r3, r9
 8007e2a:	f7f8 fb55 	bl	80004d8 <__aeabi_dmul>
 8007e2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e30:	1b9e      	subs	r6, r3, r6
 8007e32:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007e36:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007e3a:	e7e5      	b.n	8007e08 <_strtod_l+0x3f0>
 8007e3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e3e:	3316      	adds	r3, #22
 8007e40:	db0b      	blt.n	8007e5a <_strtod_l+0x442>
 8007e42:	9b08      	ldr	r3, [sp, #32]
 8007e44:	4640      	mov	r0, r8
 8007e46:	1bdf      	subs	r7, r3, r7
 8007e48:	4b54      	ldr	r3, [pc, #336]	; (8007f9c <_strtod_l+0x584>)
 8007e4a:	4649      	mov	r1, r9
 8007e4c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e54:	f7f8 fc6a 	bl	800072c <__aeabi_ddiv>
 8007e58:	e79d      	b.n	8007d96 <_strtod_l+0x37e>
 8007e5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e5c:	1b75      	subs	r5, r6, r5
 8007e5e:	441d      	add	r5, r3
 8007e60:	2d00      	cmp	r5, #0
 8007e62:	dd70      	ble.n	8007f46 <_strtod_l+0x52e>
 8007e64:	f015 030f 	ands.w	r3, r5, #15
 8007e68:	d00a      	beq.n	8007e80 <_strtod_l+0x468>
 8007e6a:	494c      	ldr	r1, [pc, #304]	; (8007f9c <_strtod_l+0x584>)
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e72:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e76:	464b      	mov	r3, r9
 8007e78:	f7f8 fb2e 	bl	80004d8 <__aeabi_dmul>
 8007e7c:	4680      	mov	r8, r0
 8007e7e:	4689      	mov	r9, r1
 8007e80:	f035 050f 	bics.w	r5, r5, #15
 8007e84:	d04d      	beq.n	8007f22 <_strtod_l+0x50a>
 8007e86:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007e8a:	dd22      	ble.n	8007ed2 <_strtod_l+0x4ba>
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	46b3      	mov	fp, r6
 8007e90:	960b      	str	r6, [sp, #44]	; 0x2c
 8007e92:	9608      	str	r6, [sp, #32]
 8007e94:	2322      	movs	r3, #34	; 0x22
 8007e96:	f04f 0800 	mov.w	r8, #0
 8007e9a:	f8df 90f8 	ldr.w	r9, [pc, #248]	; 8007f94 <_strtod_l+0x57c>
 8007e9e:	6023      	str	r3, [r4, #0]
 8007ea0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	f43f adf1 	beq.w	8007a8a <_strtod_l+0x72>
 8007ea8:	4620      	mov	r0, r4
 8007eaa:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007eac:	f7ff f934 	bl	8007118 <_Bfree>
 8007eb0:	4620      	mov	r0, r4
 8007eb2:	9908      	ldr	r1, [sp, #32]
 8007eb4:	f7ff f930 	bl	8007118 <_Bfree>
 8007eb8:	4659      	mov	r1, fp
 8007eba:	4620      	mov	r0, r4
 8007ebc:	f7ff f92c 	bl	8007118 <_Bfree>
 8007ec0:	4620      	mov	r0, r4
 8007ec2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007ec4:	f7ff f928 	bl	8007118 <_Bfree>
 8007ec8:	4631      	mov	r1, r6
 8007eca:	4620      	mov	r0, r4
 8007ecc:	f7ff f924 	bl	8007118 <_Bfree>
 8007ed0:	e5db      	b.n	8007a8a <_strtod_l+0x72>
 8007ed2:	4b33      	ldr	r3, [pc, #204]	; (8007fa0 <_strtod_l+0x588>)
 8007ed4:	4640      	mov	r0, r8
 8007ed6:	9305      	str	r3, [sp, #20]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	4649      	mov	r1, r9
 8007edc:	469a      	mov	sl, r3
 8007ede:	112d      	asrs	r5, r5, #4
 8007ee0:	2d01      	cmp	r5, #1
 8007ee2:	dc21      	bgt.n	8007f28 <_strtod_l+0x510>
 8007ee4:	b10b      	cbz	r3, 8007eea <_strtod_l+0x4d2>
 8007ee6:	4680      	mov	r8, r0
 8007ee8:	4689      	mov	r9, r1
 8007eea:	492d      	ldr	r1, [pc, #180]	; (8007fa0 <_strtod_l+0x588>)
 8007eec:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007ef0:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007ef4:	4642      	mov	r2, r8
 8007ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007efa:	464b      	mov	r3, r9
 8007efc:	f7f8 faec 	bl	80004d8 <__aeabi_dmul>
 8007f00:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <_strtod_l+0x57c>)
 8007f02:	460a      	mov	r2, r1
 8007f04:	400b      	ands	r3, r1
 8007f06:	4927      	ldr	r1, [pc, #156]	; (8007fa4 <_strtod_l+0x58c>)
 8007f08:	4680      	mov	r8, r0
 8007f0a:	428b      	cmp	r3, r1
 8007f0c:	d8be      	bhi.n	8007e8c <_strtod_l+0x474>
 8007f0e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f12:	428b      	cmp	r3, r1
 8007f14:	bf86      	itte	hi
 8007f16:	f04f 38ff 	movhi.w	r8, #4294967295
 8007f1a:	f8df 908c 	ldrhi.w	r9, [pc, #140]	; 8007fa8 <_strtod_l+0x590>
 8007f1e:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007f22:	2300      	movs	r3, #0
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	e07b      	b.n	8008020 <_strtod_l+0x608>
 8007f28:	07ea      	lsls	r2, r5, #31
 8007f2a:	d505      	bpl.n	8007f38 <_strtod_l+0x520>
 8007f2c:	9b05      	ldr	r3, [sp, #20]
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 fad1 	bl	80004d8 <__aeabi_dmul>
 8007f36:	2301      	movs	r3, #1
 8007f38:	9a05      	ldr	r2, [sp, #20]
 8007f3a:	f10a 0a01 	add.w	sl, sl, #1
 8007f3e:	3208      	adds	r2, #8
 8007f40:	106d      	asrs	r5, r5, #1
 8007f42:	9205      	str	r2, [sp, #20]
 8007f44:	e7cc      	b.n	8007ee0 <_strtod_l+0x4c8>
 8007f46:	d0ec      	beq.n	8007f22 <_strtod_l+0x50a>
 8007f48:	426d      	negs	r5, r5
 8007f4a:	f015 020f 	ands.w	r2, r5, #15
 8007f4e:	d00a      	beq.n	8007f66 <_strtod_l+0x54e>
 8007f50:	4b12      	ldr	r3, [pc, #72]	; (8007f9c <_strtod_l+0x584>)
 8007f52:	4640      	mov	r0, r8
 8007f54:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007f58:	4649      	mov	r1, r9
 8007f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f5e:	f7f8 fbe5 	bl	800072c <__aeabi_ddiv>
 8007f62:	4680      	mov	r8, r0
 8007f64:	4689      	mov	r9, r1
 8007f66:	112d      	asrs	r5, r5, #4
 8007f68:	d0db      	beq.n	8007f22 <_strtod_l+0x50a>
 8007f6a:	2d1f      	cmp	r5, #31
 8007f6c:	dd1e      	ble.n	8007fac <_strtod_l+0x594>
 8007f6e:	2600      	movs	r6, #0
 8007f70:	46b3      	mov	fp, r6
 8007f72:	960b      	str	r6, [sp, #44]	; 0x2c
 8007f74:	9608      	str	r6, [sp, #32]
 8007f76:	2322      	movs	r3, #34	; 0x22
 8007f78:	f04f 0800 	mov.w	r8, #0
 8007f7c:	f04f 0900 	mov.w	r9, #0
 8007f80:	6023      	str	r3, [r4, #0]
 8007f82:	e78d      	b.n	8007ea0 <_strtod_l+0x488>
 8007f84:	080099a7 	.word	0x080099a7
 8007f88:	08009bd4 	.word	0x08009bd4
 8007f8c:	0800999f 	.word	0x0800999f
 8007f90:	080099d6 	.word	0x080099d6
 8007f94:	7ff00000 	.word	0x7ff00000
 8007f98:	08009d65 	.word	0x08009d65
 8007f9c:	08009ae8 	.word	0x08009ae8
 8007fa0:	08009ac0 	.word	0x08009ac0
 8007fa4:	7ca00000 	.word	0x7ca00000
 8007fa8:	7fefffff 	.word	0x7fefffff
 8007fac:	f015 0310 	ands.w	r3, r5, #16
 8007fb0:	bf18      	it	ne
 8007fb2:	236a      	movne	r3, #106	; 0x6a
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	9305      	str	r3, [sp, #20]
 8007fb8:	4649      	mov	r1, r9
 8007fba:	2300      	movs	r3, #0
 8007fbc:	f8df a2c8 	ldr.w	sl, [pc, #712]	; 8008288 <_strtod_l+0x870>
 8007fc0:	07ea      	lsls	r2, r5, #31
 8007fc2:	d504      	bpl.n	8007fce <_strtod_l+0x5b6>
 8007fc4:	e9da 2300 	ldrd	r2, r3, [sl]
 8007fc8:	f7f8 fa86 	bl	80004d8 <__aeabi_dmul>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	106d      	asrs	r5, r5, #1
 8007fd0:	f10a 0a08 	add.w	sl, sl, #8
 8007fd4:	d1f4      	bne.n	8007fc0 <_strtod_l+0x5a8>
 8007fd6:	b10b      	cbz	r3, 8007fdc <_strtod_l+0x5c4>
 8007fd8:	4680      	mov	r8, r0
 8007fda:	4689      	mov	r9, r1
 8007fdc:	9b05      	ldr	r3, [sp, #20]
 8007fde:	b1bb      	cbz	r3, 8008010 <_strtod_l+0x5f8>
 8007fe0:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007fe4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	4649      	mov	r1, r9
 8007fec:	dd10      	ble.n	8008010 <_strtod_l+0x5f8>
 8007fee:	2b1f      	cmp	r3, #31
 8007ff0:	f340 8128 	ble.w	8008244 <_strtod_l+0x82c>
 8007ff4:	2b34      	cmp	r3, #52	; 0x34
 8007ff6:	bfd8      	it	le
 8007ff8:	f04f 33ff 	movle.w	r3, #4294967295
 8007ffc:	f04f 0800 	mov.w	r8, #0
 8008000:	bfcf      	iteee	gt
 8008002:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8008006:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800800a:	4093      	lslle	r3, r2
 800800c:	ea03 0901 	andle.w	r9, r3, r1
 8008010:	2200      	movs	r2, #0
 8008012:	2300      	movs	r3, #0
 8008014:	4640      	mov	r0, r8
 8008016:	4649      	mov	r1, r9
 8008018:	f7f8 fcc6 	bl	80009a8 <__aeabi_dcmpeq>
 800801c:	2800      	cmp	r0, #0
 800801e:	d1a6      	bne.n	8007f6e <_strtod_l+0x556>
 8008020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008022:	465a      	mov	r2, fp
 8008024:	9300      	str	r3, [sp, #0]
 8008026:	4620      	mov	r0, r4
 8008028:	4633      	mov	r3, r6
 800802a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800802c:	f7ff f8dc 	bl	80071e8 <__s2b>
 8008030:	900b      	str	r0, [sp, #44]	; 0x2c
 8008032:	2800      	cmp	r0, #0
 8008034:	f43f af2a 	beq.w	8007e8c <_strtod_l+0x474>
 8008038:	2600      	movs	r6, #0
 800803a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800803c:	9b08      	ldr	r3, [sp, #32]
 800803e:	2a00      	cmp	r2, #0
 8008040:	eba3 0307 	sub.w	r3, r3, r7
 8008044:	bfa8      	it	ge
 8008046:	2300      	movge	r3, #0
 8008048:	46b3      	mov	fp, r6
 800804a:	9312      	str	r3, [sp, #72]	; 0x48
 800804c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8008050:	9316      	str	r3, [sp, #88]	; 0x58
 8008052:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008054:	4620      	mov	r0, r4
 8008056:	6859      	ldr	r1, [r3, #4]
 8008058:	f7ff f81e 	bl	8007098 <_Balloc>
 800805c:	9008      	str	r0, [sp, #32]
 800805e:	2800      	cmp	r0, #0
 8008060:	f43f af18 	beq.w	8007e94 <_strtod_l+0x47c>
 8008064:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008066:	300c      	adds	r0, #12
 8008068:	691a      	ldr	r2, [r3, #16]
 800806a:	f103 010c 	add.w	r1, r3, #12
 800806e:	3202      	adds	r2, #2
 8008070:	0092      	lsls	r2, r2, #2
 8008072:	f000 fd89 	bl	8008b88 <memcpy>
 8008076:	ab1c      	add	r3, sp, #112	; 0x70
 8008078:	9301      	str	r3, [sp, #4]
 800807a:	ab1b      	add	r3, sp, #108	; 0x6c
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	4642      	mov	r2, r8
 8008080:	464b      	mov	r3, r9
 8008082:	4620      	mov	r0, r4
 8008084:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8008088:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
 800808c:	f7ff fbd8 	bl	8007840 <__d2b>
 8008090:	901a      	str	r0, [sp, #104]	; 0x68
 8008092:	2800      	cmp	r0, #0
 8008094:	f43f aefe 	beq.w	8007e94 <_strtod_l+0x47c>
 8008098:	2101      	movs	r1, #1
 800809a:	4620      	mov	r0, r4
 800809c:	f7ff f93c 	bl	8007318 <__i2b>
 80080a0:	4683      	mov	fp, r0
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f43f aef6 	beq.w	8007e94 <_strtod_l+0x47c>
 80080a8:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
 80080aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80080ac:	2f00      	cmp	r7, #0
 80080ae:	bfab      	itete	ge
 80080b0:	9b12      	ldrge	r3, [sp, #72]	; 0x48
 80080b2:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 80080b4:	eb07 0a03 	addge.w	sl, r7, r3
 80080b8:	1bdd      	sublt	r5, r3, r7
 80080ba:	9b05      	ldr	r3, [sp, #20]
 80080bc:	bfa8      	it	ge
 80080be:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 80080c0:	eba7 0703 	sub.w	r7, r7, r3
 80080c4:	4417      	add	r7, r2
 80080c6:	4b71      	ldr	r3, [pc, #452]	; (800828c <_strtod_l+0x874>)
 80080c8:	f107 37ff 	add.w	r7, r7, #4294967295
 80080cc:	bfb8      	it	lt
 80080ce:	f8dd a048 	ldrlt.w	sl, [sp, #72]	; 0x48
 80080d2:	429f      	cmp	r7, r3
 80080d4:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80080d8:	f280 80c7 	bge.w	800826a <_strtod_l+0x852>
 80080dc:	1bdb      	subs	r3, r3, r7
 80080de:	2b1f      	cmp	r3, #31
 80080e0:	f04f 0101 	mov.w	r1, #1
 80080e4:	eba2 0203 	sub.w	r2, r2, r3
 80080e8:	f300 80b3 	bgt.w	8008252 <_strtod_l+0x83a>
 80080ec:	fa01 f303 	lsl.w	r3, r1, r3
 80080f0:	9313      	str	r3, [sp, #76]	; 0x4c
 80080f2:	2300      	movs	r3, #0
 80080f4:	9310      	str	r3, [sp, #64]	; 0x40
 80080f6:	eb0a 0702 	add.w	r7, sl, r2
 80080fa:	9b05      	ldr	r3, [sp, #20]
 80080fc:	45ba      	cmp	sl, r7
 80080fe:	4415      	add	r5, r2
 8008100:	441d      	add	r5, r3
 8008102:	4653      	mov	r3, sl
 8008104:	bfa8      	it	ge
 8008106:	463b      	movge	r3, r7
 8008108:	42ab      	cmp	r3, r5
 800810a:	bfa8      	it	ge
 800810c:	462b      	movge	r3, r5
 800810e:	2b00      	cmp	r3, #0
 8008110:	bfc2      	ittt	gt
 8008112:	1aff      	subgt	r7, r7, r3
 8008114:	1aed      	subgt	r5, r5, r3
 8008116:	ebaa 0a03 	subgt.w	sl, sl, r3
 800811a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800811c:	2b00      	cmp	r3, #0
 800811e:	dd17      	ble.n	8008150 <_strtod_l+0x738>
 8008120:	4659      	mov	r1, fp
 8008122:	461a      	mov	r2, r3
 8008124:	4620      	mov	r0, r4
 8008126:	f7ff f9b5 	bl	8007494 <__pow5mult>
 800812a:	4683      	mov	fp, r0
 800812c:	2800      	cmp	r0, #0
 800812e:	f43f aeb1 	beq.w	8007e94 <_strtod_l+0x47c>
 8008132:	4601      	mov	r1, r0
 8008134:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008136:	4620      	mov	r0, r4
 8008138:	f7ff f904 	bl	8007344 <__multiply>
 800813c:	900a      	str	r0, [sp, #40]	; 0x28
 800813e:	2800      	cmp	r0, #0
 8008140:	f43f aea8 	beq.w	8007e94 <_strtod_l+0x47c>
 8008144:	4620      	mov	r0, r4
 8008146:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008148:	f7fe ffe6 	bl	8007118 <_Bfree>
 800814c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814e:	931a      	str	r3, [sp, #104]	; 0x68
 8008150:	2f00      	cmp	r7, #0
 8008152:	f300 808f 	bgt.w	8008274 <_strtod_l+0x85c>
 8008156:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008158:	2b00      	cmp	r3, #0
 800815a:	dd08      	ble.n	800816e <_strtod_l+0x756>
 800815c:	4620      	mov	r0, r4
 800815e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008160:	9908      	ldr	r1, [sp, #32]
 8008162:	f7ff f997 	bl	8007494 <__pow5mult>
 8008166:	9008      	str	r0, [sp, #32]
 8008168:	2800      	cmp	r0, #0
 800816a:	f43f ae93 	beq.w	8007e94 <_strtod_l+0x47c>
 800816e:	2d00      	cmp	r5, #0
 8008170:	dd08      	ble.n	8008184 <_strtod_l+0x76c>
 8008172:	462a      	mov	r2, r5
 8008174:	4620      	mov	r0, r4
 8008176:	9908      	ldr	r1, [sp, #32]
 8008178:	f7ff f9e6 	bl	8007548 <__lshift>
 800817c:	9008      	str	r0, [sp, #32]
 800817e:	2800      	cmp	r0, #0
 8008180:	f43f ae88 	beq.w	8007e94 <_strtod_l+0x47c>
 8008184:	f1ba 0f00 	cmp.w	sl, #0
 8008188:	dd08      	ble.n	800819c <_strtod_l+0x784>
 800818a:	4659      	mov	r1, fp
 800818c:	4652      	mov	r2, sl
 800818e:	4620      	mov	r0, r4
 8008190:	f7ff f9da 	bl	8007548 <__lshift>
 8008194:	4683      	mov	fp, r0
 8008196:	2800      	cmp	r0, #0
 8008198:	f43f ae7c 	beq.w	8007e94 <_strtod_l+0x47c>
 800819c:	4620      	mov	r0, r4
 800819e:	9a08      	ldr	r2, [sp, #32]
 80081a0:	991a      	ldr	r1, [sp, #104]	; 0x68
 80081a2:	f7ff fa59 	bl	8007658 <__mdiff>
 80081a6:	4606      	mov	r6, r0
 80081a8:	2800      	cmp	r0, #0
 80081aa:	f43f ae73 	beq.w	8007e94 <_strtod_l+0x47c>
 80081ae:	2500      	movs	r5, #0
 80081b0:	68c3      	ldr	r3, [r0, #12]
 80081b2:	4659      	mov	r1, fp
 80081b4:	60c5      	str	r5, [r0, #12]
 80081b6:	930a      	str	r3, [sp, #40]	; 0x28
 80081b8:	f7ff fa32 	bl	8007620 <__mcmp>
 80081bc:	42a8      	cmp	r0, r5
 80081be:	da6b      	bge.n	8008298 <_strtod_l+0x880>
 80081c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081c2:	ea53 0308 	orrs.w	r3, r3, r8
 80081c6:	f040 808f 	bne.w	80082e8 <_strtod_l+0x8d0>
 80081ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	f040 808a 	bne.w	80082e8 <_strtod_l+0x8d0>
 80081d4:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80081d8:	0d1b      	lsrs	r3, r3, #20
 80081da:	051b      	lsls	r3, r3, #20
 80081dc:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80081e0:	f240 8082 	bls.w	80082e8 <_strtod_l+0x8d0>
 80081e4:	6973      	ldr	r3, [r6, #20]
 80081e6:	b913      	cbnz	r3, 80081ee <_strtod_l+0x7d6>
 80081e8:	6933      	ldr	r3, [r6, #16]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	dd7c      	ble.n	80082e8 <_strtod_l+0x8d0>
 80081ee:	4631      	mov	r1, r6
 80081f0:	2201      	movs	r2, #1
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7ff f9a8 	bl	8007548 <__lshift>
 80081f8:	4659      	mov	r1, fp
 80081fa:	4606      	mov	r6, r0
 80081fc:	f7ff fa10 	bl	8007620 <__mcmp>
 8008200:	2800      	cmp	r0, #0
 8008202:	dd71      	ble.n	80082e8 <_strtod_l+0x8d0>
 8008204:	9905      	ldr	r1, [sp, #20]
 8008206:	464b      	mov	r3, r9
 8008208:	4a21      	ldr	r2, [pc, #132]	; (8008290 <_strtod_l+0x878>)
 800820a:	2900      	cmp	r1, #0
 800820c:	f000 808d 	beq.w	800832a <_strtod_l+0x912>
 8008210:	ea02 0109 	and.w	r1, r2, r9
 8008214:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008218:	f300 8087 	bgt.w	800832a <_strtod_l+0x912>
 800821c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008220:	f77f aea9 	ble.w	8007f76 <_strtod_l+0x55e>
 8008224:	4640      	mov	r0, r8
 8008226:	4649      	mov	r1, r9
 8008228:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <_strtod_l+0x87c>)
 800822a:	2200      	movs	r2, #0
 800822c:	f7f8 f954 	bl	80004d8 <__aeabi_dmul>
 8008230:	4b17      	ldr	r3, [pc, #92]	; (8008290 <_strtod_l+0x878>)
 8008232:	4680      	mov	r8, r0
 8008234:	400b      	ands	r3, r1
 8008236:	4689      	mov	r9, r1
 8008238:	2b00      	cmp	r3, #0
 800823a:	f47f ae35 	bne.w	8007ea8 <_strtod_l+0x490>
 800823e:	2322      	movs	r3, #34	; 0x22
 8008240:	6023      	str	r3, [r4, #0]
 8008242:	e631      	b.n	8007ea8 <_strtod_l+0x490>
 8008244:	f04f 32ff 	mov.w	r2, #4294967295
 8008248:	fa02 f303 	lsl.w	r3, r2, r3
 800824c:	ea03 0808 	and.w	r8, r3, r8
 8008250:	e6de      	b.n	8008010 <_strtod_l+0x5f8>
 8008252:	f1c7 477f 	rsb	r7, r7, #4278190080	; 0xff000000
 8008256:	f507 077f 	add.w	r7, r7, #16711680	; 0xff0000
 800825a:	f507 477b 	add.w	r7, r7, #64256	; 0xfb00
 800825e:	37e2      	adds	r7, #226	; 0xe2
 8008260:	fa01 f307 	lsl.w	r3, r1, r7
 8008264:	9310      	str	r3, [sp, #64]	; 0x40
 8008266:	9113      	str	r1, [sp, #76]	; 0x4c
 8008268:	e745      	b.n	80080f6 <_strtod_l+0x6de>
 800826a:	2300      	movs	r3, #0
 800826c:	9310      	str	r3, [sp, #64]	; 0x40
 800826e:	2301      	movs	r3, #1
 8008270:	9313      	str	r3, [sp, #76]	; 0x4c
 8008272:	e740      	b.n	80080f6 <_strtod_l+0x6de>
 8008274:	463a      	mov	r2, r7
 8008276:	4620      	mov	r0, r4
 8008278:	991a      	ldr	r1, [sp, #104]	; 0x68
 800827a:	f7ff f965 	bl	8007548 <__lshift>
 800827e:	901a      	str	r0, [sp, #104]	; 0x68
 8008280:	2800      	cmp	r0, #0
 8008282:	f47f af68 	bne.w	8008156 <_strtod_l+0x73e>
 8008286:	e605      	b.n	8007e94 <_strtod_l+0x47c>
 8008288:	08009be8 	.word	0x08009be8
 800828c:	fffffc02 	.word	0xfffffc02
 8008290:	7ff00000 	.word	0x7ff00000
 8008294:	39500000 	.word	0x39500000
 8008298:	46ca      	mov	sl, r9
 800829a:	d165      	bne.n	8008368 <_strtod_l+0x950>
 800829c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800829e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082a2:	b352      	cbz	r2, 80082fa <_strtod_l+0x8e2>
 80082a4:	4a9e      	ldr	r2, [pc, #632]	; (8008520 <_strtod_l+0xb08>)
 80082a6:	4293      	cmp	r3, r2
 80082a8:	d12a      	bne.n	8008300 <_strtod_l+0x8e8>
 80082aa:	9b05      	ldr	r3, [sp, #20]
 80082ac:	4641      	mov	r1, r8
 80082ae:	b1fb      	cbz	r3, 80082f0 <_strtod_l+0x8d8>
 80082b0:	4b9c      	ldr	r3, [pc, #624]	; (8008524 <_strtod_l+0xb0c>)
 80082b2:	f04f 32ff 	mov.w	r2, #4294967295
 80082b6:	ea09 0303 	and.w	r3, r9, r3
 80082ba:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80082be:	d81a      	bhi.n	80082f6 <_strtod_l+0x8de>
 80082c0:	0d1b      	lsrs	r3, r3, #20
 80082c2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80082c6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ca:	4299      	cmp	r1, r3
 80082cc:	d118      	bne.n	8008300 <_strtod_l+0x8e8>
 80082ce:	4b96      	ldr	r3, [pc, #600]	; (8008528 <_strtod_l+0xb10>)
 80082d0:	459a      	cmp	sl, r3
 80082d2:	d102      	bne.n	80082da <_strtod_l+0x8c2>
 80082d4:	3101      	adds	r1, #1
 80082d6:	f43f addd 	beq.w	8007e94 <_strtod_l+0x47c>
 80082da:	f04f 0800 	mov.w	r8, #0
 80082de:	4b91      	ldr	r3, [pc, #580]	; (8008524 <_strtod_l+0xb0c>)
 80082e0:	ea0a 0303 	and.w	r3, sl, r3
 80082e4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 80082e8:	9b05      	ldr	r3, [sp, #20]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d19a      	bne.n	8008224 <_strtod_l+0x80c>
 80082ee:	e5db      	b.n	8007ea8 <_strtod_l+0x490>
 80082f0:	f04f 33ff 	mov.w	r3, #4294967295
 80082f4:	e7e9      	b.n	80082ca <_strtod_l+0x8b2>
 80082f6:	4613      	mov	r3, r2
 80082f8:	e7e7      	b.n	80082ca <_strtod_l+0x8b2>
 80082fa:	ea53 0308 	orrs.w	r3, r3, r8
 80082fe:	d081      	beq.n	8008204 <_strtod_l+0x7ec>
 8008300:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008302:	b1e3      	cbz	r3, 800833e <_strtod_l+0x926>
 8008304:	ea13 0f0a 	tst.w	r3, sl
 8008308:	d0ee      	beq.n	80082e8 <_strtod_l+0x8d0>
 800830a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800830c:	4640      	mov	r0, r8
 800830e:	4649      	mov	r1, r9
 8008310:	9a05      	ldr	r2, [sp, #20]
 8008312:	b1c3      	cbz	r3, 8008346 <_strtod_l+0x92e>
 8008314:	f7ff fb5c 	bl	80079d0 <sulp>
 8008318:	4602      	mov	r2, r0
 800831a:	460b      	mov	r3, r1
 800831c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800831e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008320:	f7f7 ff24 	bl	800016c <__adddf3>
 8008324:	4680      	mov	r8, r0
 8008326:	4689      	mov	r9, r1
 8008328:	e7de      	b.n	80082e8 <_strtod_l+0x8d0>
 800832a:	4013      	ands	r3, r2
 800832c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008330:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008334:	f04f 38ff 	mov.w	r8, #4294967295
 8008338:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800833c:	e7d4      	b.n	80082e8 <_strtod_l+0x8d0>
 800833e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008340:	ea13 0f08 	tst.w	r3, r8
 8008344:	e7e0      	b.n	8008308 <_strtod_l+0x8f0>
 8008346:	f7ff fb43 	bl	80079d0 <sulp>
 800834a:	4602      	mov	r2, r0
 800834c:	460b      	mov	r3, r1
 800834e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008350:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008352:	f7f7 ff09 	bl	8000168 <__aeabi_dsub>
 8008356:	2200      	movs	r2, #0
 8008358:	2300      	movs	r3, #0
 800835a:	4680      	mov	r8, r0
 800835c:	4689      	mov	r9, r1
 800835e:	f7f8 fb23 	bl	80009a8 <__aeabi_dcmpeq>
 8008362:	2800      	cmp	r0, #0
 8008364:	d0c0      	beq.n	80082e8 <_strtod_l+0x8d0>
 8008366:	e606      	b.n	8007f76 <_strtod_l+0x55e>
 8008368:	4659      	mov	r1, fp
 800836a:	4630      	mov	r0, r6
 800836c:	f7ff fabe 	bl	80078ec <__ratio>
 8008370:	4602      	mov	r2, r0
 8008372:	460b      	mov	r3, r1
 8008374:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008378:	2200      	movs	r2, #0
 800837a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800837e:	f7f8 fb27 	bl	80009d0 <__aeabi_dcmple>
 8008382:	2800      	cmp	r0, #0
 8008384:	d06f      	beq.n	8008466 <_strtod_l+0xa4e>
 8008386:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008388:	2b00      	cmp	r3, #0
 800838a:	d17c      	bne.n	8008486 <_strtod_l+0xa6e>
 800838c:	f1b8 0f00 	cmp.w	r8, #0
 8008390:	d159      	bne.n	8008446 <_strtod_l+0xa2e>
 8008392:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008396:	2b00      	cmp	r3, #0
 8008398:	d17b      	bne.n	8008492 <_strtod_l+0xa7a>
 800839a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800839e:	2200      	movs	r2, #0
 80083a0:	4b62      	ldr	r3, [pc, #392]	; (800852c <_strtod_l+0xb14>)
 80083a2:	f7f8 fb0b 	bl	80009bc <__aeabi_dcmplt>
 80083a6:	2800      	cmp	r0, #0
 80083a8:	d15a      	bne.n	8008460 <_strtod_l+0xa48>
 80083aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80083ae:	2200      	movs	r2, #0
 80083b0:	4b5f      	ldr	r3, [pc, #380]	; (8008530 <_strtod_l+0xb18>)
 80083b2:	f7f8 f891 	bl	80004d8 <__aeabi_dmul>
 80083b6:	4605      	mov	r5, r0
 80083b8:	460f      	mov	r7, r1
 80083ba:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 80083be:	9506      	str	r5, [sp, #24]
 80083c0:	9307      	str	r3, [sp, #28]
 80083c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083c6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 80083ca:	4b56      	ldr	r3, [pc, #344]	; (8008524 <_strtod_l+0xb0c>)
 80083cc:	4a55      	ldr	r2, [pc, #340]	; (8008524 <_strtod_l+0xb0c>)
 80083ce:	ea0a 0303 	and.w	r3, sl, r3
 80083d2:	9313      	str	r3, [sp, #76]	; 0x4c
 80083d4:	4b57      	ldr	r3, [pc, #348]	; (8008534 <_strtod_l+0xb1c>)
 80083d6:	ea0a 0202 	and.w	r2, sl, r2
 80083da:	429a      	cmp	r2, r3
 80083dc:	f040 80b0 	bne.w	8008540 <_strtod_l+0xb28>
 80083e0:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 80083e4:	4640      	mov	r0, r8
 80083e6:	4649      	mov	r1, r9
 80083e8:	f7ff f9c2 	bl	8007770 <__ulp>
 80083ec:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80083f0:	f7f8 f872 	bl	80004d8 <__aeabi_dmul>
 80083f4:	4642      	mov	r2, r8
 80083f6:	464b      	mov	r3, r9
 80083f8:	f7f7 feb8 	bl	800016c <__adddf3>
 80083fc:	f8df a124 	ldr.w	sl, [pc, #292]	; 8008524 <_strtod_l+0xb0c>
 8008400:	4a4d      	ldr	r2, [pc, #308]	; (8008538 <_strtod_l+0xb20>)
 8008402:	ea01 0a0a 	and.w	sl, r1, sl
 8008406:	4592      	cmp	sl, r2
 8008408:	4680      	mov	r8, r0
 800840a:	d948      	bls.n	800849e <_strtod_l+0xa86>
 800840c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800840e:	4b46      	ldr	r3, [pc, #280]	; (8008528 <_strtod_l+0xb10>)
 8008410:	429a      	cmp	r2, r3
 8008412:	d103      	bne.n	800841c <_strtod_l+0xa04>
 8008414:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008416:	3301      	adds	r3, #1
 8008418:	f43f ad3c 	beq.w	8007e94 <_strtod_l+0x47c>
 800841c:	f04f 38ff 	mov.w	r8, #4294967295
 8008420:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8008528 <_strtod_l+0xb10>
 8008424:	4620      	mov	r0, r4
 8008426:	991a      	ldr	r1, [sp, #104]	; 0x68
 8008428:	f7fe fe76 	bl	8007118 <_Bfree>
 800842c:	4620      	mov	r0, r4
 800842e:	9908      	ldr	r1, [sp, #32]
 8008430:	f7fe fe72 	bl	8007118 <_Bfree>
 8008434:	4659      	mov	r1, fp
 8008436:	4620      	mov	r0, r4
 8008438:	f7fe fe6e 	bl	8007118 <_Bfree>
 800843c:	4631      	mov	r1, r6
 800843e:	4620      	mov	r0, r4
 8008440:	f7fe fe6a 	bl	8007118 <_Bfree>
 8008444:	e605      	b.n	8008052 <_strtod_l+0x63a>
 8008446:	f1b8 0f01 	cmp.w	r8, #1
 800844a:	d103      	bne.n	8008454 <_strtod_l+0xa3c>
 800844c:	f1b9 0f00 	cmp.w	r9, #0
 8008450:	f43f ad91 	beq.w	8007f76 <_strtod_l+0x55e>
 8008454:	2200      	movs	r2, #0
 8008456:	4b39      	ldr	r3, [pc, #228]	; (800853c <_strtod_l+0xb24>)
 8008458:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800845a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800845e:	e016      	b.n	800848e <_strtod_l+0xa76>
 8008460:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008462:	4f33      	ldr	r7, [pc, #204]	; (8008530 <_strtod_l+0xb18>)
 8008464:	e7a9      	b.n	80083ba <_strtod_l+0x9a2>
 8008466:	4b32      	ldr	r3, [pc, #200]	; (8008530 <_strtod_l+0xb18>)
 8008468:	2200      	movs	r2, #0
 800846a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800846e:	f7f8 f833 	bl	80004d8 <__aeabi_dmul>
 8008472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008474:	4605      	mov	r5, r0
 8008476:	460f      	mov	r7, r1
 8008478:	2b00      	cmp	r3, #0
 800847a:	d09e      	beq.n	80083ba <_strtod_l+0x9a2>
 800847c:	4602      	mov	r2, r0
 800847e:	460b      	mov	r3, r1
 8008480:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008484:	e79d      	b.n	80083c2 <_strtod_l+0x9aa>
 8008486:	2200      	movs	r2, #0
 8008488:	4b28      	ldr	r3, [pc, #160]	; (800852c <_strtod_l+0xb14>)
 800848a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800848e:	4f27      	ldr	r7, [pc, #156]	; (800852c <_strtod_l+0xb14>)
 8008490:	e797      	b.n	80083c2 <_strtod_l+0x9aa>
 8008492:	2200      	movs	r2, #0
 8008494:	4b29      	ldr	r3, [pc, #164]	; (800853c <_strtod_l+0xb24>)
 8008496:	4645      	mov	r5, r8
 8008498:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800849c:	e7f7      	b.n	800848e <_strtod_l+0xa76>
 800849e:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 80084a2:	9b05      	ldr	r3, [sp, #20]
 80084a4:	46ca      	mov	sl, r9
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d1bc      	bne.n	8008424 <_strtod_l+0xa0c>
 80084aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084ae:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80084b0:	0d1b      	lsrs	r3, r3, #20
 80084b2:	051b      	lsls	r3, r3, #20
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d1b5      	bne.n	8008424 <_strtod_l+0xa0c>
 80084b8:	4628      	mov	r0, r5
 80084ba:	4639      	mov	r1, r7
 80084bc:	f7f8 fcd8 	bl	8000e70 <__aeabi_d2lz>
 80084c0:	f7f7 ffdc 	bl	800047c <__aeabi_l2d>
 80084c4:	4602      	mov	r2, r0
 80084c6:	460b      	mov	r3, r1
 80084c8:	4628      	mov	r0, r5
 80084ca:	4639      	mov	r1, r7
 80084cc:	f7f7 fe4c 	bl	8000168 <__aeabi_dsub>
 80084d0:	460b      	mov	r3, r1
 80084d2:	4602      	mov	r2, r0
 80084d4:	f3c9 0a13 	ubfx	sl, r9, #0, #20
 80084d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80084dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084de:	ea4a 0a08 	orr.w	sl, sl, r8
 80084e2:	ea5a 0a03 	orrs.w	sl, sl, r3
 80084e6:	d06c      	beq.n	80085c2 <_strtod_l+0xbaa>
 80084e8:	a309      	add	r3, pc, #36	; (adr r3, 8008510 <_strtod_l+0xaf8>)
 80084ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084ee:	f7f8 fa65 	bl	80009bc <__aeabi_dcmplt>
 80084f2:	2800      	cmp	r0, #0
 80084f4:	f47f acd8 	bne.w	8007ea8 <_strtod_l+0x490>
 80084f8:	a307      	add	r3, pc, #28	; (adr r3, 8008518 <_strtod_l+0xb00>)
 80084fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008502:	f7f8 fa79 	bl	80009f8 <__aeabi_dcmpgt>
 8008506:	2800      	cmp	r0, #0
 8008508:	d08c      	beq.n	8008424 <_strtod_l+0xa0c>
 800850a:	e4cd      	b.n	8007ea8 <_strtod_l+0x490>
 800850c:	f3af 8000 	nop.w
 8008510:	94a03595 	.word	0x94a03595
 8008514:	3fdfffff 	.word	0x3fdfffff
 8008518:	35afe535 	.word	0x35afe535
 800851c:	3fe00000 	.word	0x3fe00000
 8008520:	000fffff 	.word	0x000fffff
 8008524:	7ff00000 	.word	0x7ff00000
 8008528:	7fefffff 	.word	0x7fefffff
 800852c:	3ff00000 	.word	0x3ff00000
 8008530:	3fe00000 	.word	0x3fe00000
 8008534:	7fe00000 	.word	0x7fe00000
 8008538:	7c9fffff 	.word	0x7c9fffff
 800853c:	bff00000 	.word	0xbff00000
 8008540:	9b05      	ldr	r3, [sp, #20]
 8008542:	b333      	cbz	r3, 8008592 <_strtod_l+0xb7a>
 8008544:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008546:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800854a:	d822      	bhi.n	8008592 <_strtod_l+0xb7a>
 800854c:	a328      	add	r3, pc, #160	; (adr r3, 80085f0 <_strtod_l+0xbd8>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	4628      	mov	r0, r5
 8008554:	4639      	mov	r1, r7
 8008556:	f7f8 fa3b 	bl	80009d0 <__aeabi_dcmple>
 800855a:	b1a0      	cbz	r0, 8008586 <_strtod_l+0xb6e>
 800855c:	4639      	mov	r1, r7
 800855e:	4628      	mov	r0, r5
 8008560:	f7f8 fa92 	bl	8000a88 <__aeabi_d2uiz>
 8008564:	2801      	cmp	r0, #1
 8008566:	bf38      	it	cc
 8008568:	2001      	movcc	r0, #1
 800856a:	f7f7 ff3b 	bl	80003e4 <__aeabi_ui2d>
 800856e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008570:	4605      	mov	r5, r0
 8008572:	460f      	mov	r7, r1
 8008574:	bb03      	cbnz	r3, 80085b8 <_strtod_l+0xba0>
 8008576:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800857a:	9014      	str	r0, [sp, #80]	; 0x50
 800857c:	9315      	str	r3, [sp, #84]	; 0x54
 800857e:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008582:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8008586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008588:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800858a:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	9311      	str	r3, [sp, #68]	; 0x44
 8008592:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008594:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8008596:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
 800859a:	f7ff f8e9 	bl	8007770 <__ulp>
 800859e:	4602      	mov	r2, r0
 80085a0:	460b      	mov	r3, r1
 80085a2:	4640      	mov	r0, r8
 80085a4:	4649      	mov	r1, r9
 80085a6:	f7f7 ff97 	bl	80004d8 <__aeabi_dmul>
 80085aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80085ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085ae:	f7f7 fddd 	bl	800016c <__adddf3>
 80085b2:	4680      	mov	r8, r0
 80085b4:	4689      	mov	r9, r1
 80085b6:	e774      	b.n	80084a2 <_strtod_l+0xa8a>
 80085b8:	4602      	mov	r2, r0
 80085ba:	460b      	mov	r3, r1
 80085bc:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80085c0:	e7dd      	b.n	800857e <_strtod_l+0xb66>
 80085c2:	a30d      	add	r3, pc, #52	; (adr r3, 80085f8 <_strtod_l+0xbe0>)
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f7f8 f9f8 	bl	80009bc <__aeabi_dcmplt>
 80085cc:	e79b      	b.n	8008506 <_strtod_l+0xaee>
 80085ce:	2300      	movs	r3, #0
 80085d0:	930e      	str	r3, [sp, #56]	; 0x38
 80085d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085d4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	f7ff ba5b 	b.w	8007a92 <_strtod_l+0x7a>
 80085dc:	2a65      	cmp	r2, #101	; 0x65
 80085de:	f43f ab52 	beq.w	8007c86 <_strtod_l+0x26e>
 80085e2:	2a45      	cmp	r2, #69	; 0x45
 80085e4:	f43f ab4f 	beq.w	8007c86 <_strtod_l+0x26e>
 80085e8:	2301      	movs	r3, #1
 80085ea:	f7ff bb87 	b.w	8007cfc <_strtod_l+0x2e4>
 80085ee:	bf00      	nop
 80085f0:	ffc00000 	.word	0xffc00000
 80085f4:	41dfffff 	.word	0x41dfffff
 80085f8:	94a03595 	.word	0x94a03595
 80085fc:	3fcfffff 	.word	0x3fcfffff

08008600 <_strtod_r>:
 8008600:	4b01      	ldr	r3, [pc, #4]	; (8008608 <_strtod_r+0x8>)
 8008602:	f7ff ba09 	b.w	8007a18 <_strtod_l>
 8008606:	bf00      	nop
 8008608:	2000006c 	.word	0x2000006c

0800860c <_strtol_l.constprop.0>:
 800860c:	2b01      	cmp	r3, #1
 800860e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008612:	4686      	mov	lr, r0
 8008614:	4690      	mov	r8, r2
 8008616:	d001      	beq.n	800861c <_strtol_l.constprop.0+0x10>
 8008618:	2b24      	cmp	r3, #36	; 0x24
 800861a:	d906      	bls.n	800862a <_strtol_l.constprop.0+0x1e>
 800861c:	f7fd fd92 	bl	8006144 <__errno>
 8008620:	2316      	movs	r3, #22
 8008622:	6003      	str	r3, [r0, #0]
 8008624:	2000      	movs	r0, #0
 8008626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862a:	460d      	mov	r5, r1
 800862c:	4835      	ldr	r0, [pc, #212]	; (8008704 <_strtol_l.constprop.0+0xf8>)
 800862e:	462a      	mov	r2, r5
 8008630:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008634:	5d06      	ldrb	r6, [r0, r4]
 8008636:	f016 0608 	ands.w	r6, r6, #8
 800863a:	d1f8      	bne.n	800862e <_strtol_l.constprop.0+0x22>
 800863c:	2c2d      	cmp	r4, #45	; 0x2d
 800863e:	d12e      	bne.n	800869e <_strtol_l.constprop.0+0x92>
 8008640:	2601      	movs	r6, #1
 8008642:	782c      	ldrb	r4, [r5, #0]
 8008644:	1c95      	adds	r5, r2, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d057      	beq.n	80086fa <_strtol_l.constprop.0+0xee>
 800864a:	2b10      	cmp	r3, #16
 800864c:	d109      	bne.n	8008662 <_strtol_l.constprop.0+0x56>
 800864e:	2c30      	cmp	r4, #48	; 0x30
 8008650:	d107      	bne.n	8008662 <_strtol_l.constprop.0+0x56>
 8008652:	782a      	ldrb	r2, [r5, #0]
 8008654:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8008658:	2a58      	cmp	r2, #88	; 0x58
 800865a:	d149      	bne.n	80086f0 <_strtol_l.constprop.0+0xe4>
 800865c:	2310      	movs	r3, #16
 800865e:	786c      	ldrb	r4, [r5, #1]
 8008660:	3502      	adds	r5, #2
 8008662:	2200      	movs	r2, #0
 8008664:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8008668:	f10c 3cff 	add.w	ip, ip, #4294967295
 800866c:	fbbc f9f3 	udiv	r9, ip, r3
 8008670:	4610      	mov	r0, r2
 8008672:	fb03 ca19 	mls	sl, r3, r9, ip
 8008676:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800867a:	2f09      	cmp	r7, #9
 800867c:	d814      	bhi.n	80086a8 <_strtol_l.constprop.0+0x9c>
 800867e:	463c      	mov	r4, r7
 8008680:	42a3      	cmp	r3, r4
 8008682:	dd20      	ble.n	80086c6 <_strtol_l.constprop.0+0xba>
 8008684:	1c57      	adds	r7, r2, #1
 8008686:	d007      	beq.n	8008698 <_strtol_l.constprop.0+0x8c>
 8008688:	4581      	cmp	r9, r0
 800868a:	d319      	bcc.n	80086c0 <_strtol_l.constprop.0+0xb4>
 800868c:	d101      	bne.n	8008692 <_strtol_l.constprop.0+0x86>
 800868e:	45a2      	cmp	sl, r4
 8008690:	db16      	blt.n	80086c0 <_strtol_l.constprop.0+0xb4>
 8008692:	2201      	movs	r2, #1
 8008694:	fb00 4003 	mla	r0, r0, r3, r4
 8008698:	f815 4b01 	ldrb.w	r4, [r5], #1
 800869c:	e7eb      	b.n	8008676 <_strtol_l.constprop.0+0x6a>
 800869e:	2c2b      	cmp	r4, #43	; 0x2b
 80086a0:	bf04      	itt	eq
 80086a2:	782c      	ldrbeq	r4, [r5, #0]
 80086a4:	1c95      	addeq	r5, r2, #2
 80086a6:	e7ce      	b.n	8008646 <_strtol_l.constprop.0+0x3a>
 80086a8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80086ac:	2f19      	cmp	r7, #25
 80086ae:	d801      	bhi.n	80086b4 <_strtol_l.constprop.0+0xa8>
 80086b0:	3c37      	subs	r4, #55	; 0x37
 80086b2:	e7e5      	b.n	8008680 <_strtol_l.constprop.0+0x74>
 80086b4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80086b8:	2f19      	cmp	r7, #25
 80086ba:	d804      	bhi.n	80086c6 <_strtol_l.constprop.0+0xba>
 80086bc:	3c57      	subs	r4, #87	; 0x57
 80086be:	e7df      	b.n	8008680 <_strtol_l.constprop.0+0x74>
 80086c0:	f04f 32ff 	mov.w	r2, #4294967295
 80086c4:	e7e8      	b.n	8008698 <_strtol_l.constprop.0+0x8c>
 80086c6:	1c53      	adds	r3, r2, #1
 80086c8:	d108      	bne.n	80086dc <_strtol_l.constprop.0+0xd0>
 80086ca:	2322      	movs	r3, #34	; 0x22
 80086cc:	4660      	mov	r0, ip
 80086ce:	f8ce 3000 	str.w	r3, [lr]
 80086d2:	f1b8 0f00 	cmp.w	r8, #0
 80086d6:	d0a6      	beq.n	8008626 <_strtol_l.constprop.0+0x1a>
 80086d8:	1e69      	subs	r1, r5, #1
 80086da:	e006      	b.n	80086ea <_strtol_l.constprop.0+0xde>
 80086dc:	b106      	cbz	r6, 80086e0 <_strtol_l.constprop.0+0xd4>
 80086de:	4240      	negs	r0, r0
 80086e0:	f1b8 0f00 	cmp.w	r8, #0
 80086e4:	d09f      	beq.n	8008626 <_strtol_l.constprop.0+0x1a>
 80086e6:	2a00      	cmp	r2, #0
 80086e8:	d1f6      	bne.n	80086d8 <_strtol_l.constprop.0+0xcc>
 80086ea:	f8c8 1000 	str.w	r1, [r8]
 80086ee:	e79a      	b.n	8008626 <_strtol_l.constprop.0+0x1a>
 80086f0:	2430      	movs	r4, #48	; 0x30
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1b5      	bne.n	8008662 <_strtol_l.constprop.0+0x56>
 80086f6:	2308      	movs	r3, #8
 80086f8:	e7b3      	b.n	8008662 <_strtol_l.constprop.0+0x56>
 80086fa:	2c30      	cmp	r4, #48	; 0x30
 80086fc:	d0a9      	beq.n	8008652 <_strtol_l.constprop.0+0x46>
 80086fe:	230a      	movs	r3, #10
 8008700:	e7af      	b.n	8008662 <_strtol_l.constprop.0+0x56>
 8008702:	bf00      	nop
 8008704:	08009c11 	.word	0x08009c11

08008708 <_strtol_r>:
 8008708:	f7ff bf80 	b.w	800860c <_strtol_l.constprop.0>

0800870c <__ssputs_r>:
 800870c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008710:	461f      	mov	r7, r3
 8008712:	688e      	ldr	r6, [r1, #8]
 8008714:	4682      	mov	sl, r0
 8008716:	42be      	cmp	r6, r7
 8008718:	460c      	mov	r4, r1
 800871a:	4690      	mov	r8, r2
 800871c:	680b      	ldr	r3, [r1, #0]
 800871e:	d82c      	bhi.n	800877a <__ssputs_r+0x6e>
 8008720:	898a      	ldrh	r2, [r1, #12]
 8008722:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008726:	d026      	beq.n	8008776 <__ssputs_r+0x6a>
 8008728:	6965      	ldr	r5, [r4, #20]
 800872a:	6909      	ldr	r1, [r1, #16]
 800872c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008730:	eba3 0901 	sub.w	r9, r3, r1
 8008734:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008738:	1c7b      	adds	r3, r7, #1
 800873a:	444b      	add	r3, r9
 800873c:	106d      	asrs	r5, r5, #1
 800873e:	429d      	cmp	r5, r3
 8008740:	bf38      	it	cc
 8008742:	461d      	movcc	r5, r3
 8008744:	0553      	lsls	r3, r2, #21
 8008746:	d527      	bpl.n	8008798 <__ssputs_r+0x8c>
 8008748:	4629      	mov	r1, r5
 800874a:	f7fe fc19 	bl	8006f80 <_malloc_r>
 800874e:	4606      	mov	r6, r0
 8008750:	b360      	cbz	r0, 80087ac <__ssputs_r+0xa0>
 8008752:	464a      	mov	r2, r9
 8008754:	6921      	ldr	r1, [r4, #16]
 8008756:	f000 fa17 	bl	8008b88 <memcpy>
 800875a:	89a3      	ldrh	r3, [r4, #12]
 800875c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008764:	81a3      	strh	r3, [r4, #12]
 8008766:	6126      	str	r6, [r4, #16]
 8008768:	444e      	add	r6, r9
 800876a:	6026      	str	r6, [r4, #0]
 800876c:	463e      	mov	r6, r7
 800876e:	6165      	str	r5, [r4, #20]
 8008770:	eba5 0509 	sub.w	r5, r5, r9
 8008774:	60a5      	str	r5, [r4, #8]
 8008776:	42be      	cmp	r6, r7
 8008778:	d900      	bls.n	800877c <__ssputs_r+0x70>
 800877a:	463e      	mov	r6, r7
 800877c:	4632      	mov	r2, r6
 800877e:	4641      	mov	r1, r8
 8008780:	6820      	ldr	r0, [r4, #0]
 8008782:	f000 f9c5 	bl	8008b10 <memmove>
 8008786:	2000      	movs	r0, #0
 8008788:	68a3      	ldr	r3, [r4, #8]
 800878a:	1b9b      	subs	r3, r3, r6
 800878c:	60a3      	str	r3, [r4, #8]
 800878e:	6823      	ldr	r3, [r4, #0]
 8008790:	4433      	add	r3, r6
 8008792:	6023      	str	r3, [r4, #0]
 8008794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008798:	462a      	mov	r2, r5
 800879a:	f000 fda6 	bl	80092ea <_realloc_r>
 800879e:	4606      	mov	r6, r0
 80087a0:	2800      	cmp	r0, #0
 80087a2:	d1e0      	bne.n	8008766 <__ssputs_r+0x5a>
 80087a4:	4650      	mov	r0, sl
 80087a6:	6921      	ldr	r1, [r4, #16]
 80087a8:	f7fe fb7a 	bl	8006ea0 <_free_r>
 80087ac:	230c      	movs	r3, #12
 80087ae:	f8ca 3000 	str.w	r3, [sl]
 80087b2:	89a3      	ldrh	r3, [r4, #12]
 80087b4:	f04f 30ff 	mov.w	r0, #4294967295
 80087b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087bc:	81a3      	strh	r3, [r4, #12]
 80087be:	e7e9      	b.n	8008794 <__ssputs_r+0x88>

080087c0 <_svfiprintf_r>:
 80087c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087c4:	4698      	mov	r8, r3
 80087c6:	898b      	ldrh	r3, [r1, #12]
 80087c8:	4607      	mov	r7, r0
 80087ca:	061b      	lsls	r3, r3, #24
 80087cc:	460d      	mov	r5, r1
 80087ce:	4614      	mov	r4, r2
 80087d0:	b09d      	sub	sp, #116	; 0x74
 80087d2:	d50e      	bpl.n	80087f2 <_svfiprintf_r+0x32>
 80087d4:	690b      	ldr	r3, [r1, #16]
 80087d6:	b963      	cbnz	r3, 80087f2 <_svfiprintf_r+0x32>
 80087d8:	2140      	movs	r1, #64	; 0x40
 80087da:	f7fe fbd1 	bl	8006f80 <_malloc_r>
 80087de:	6028      	str	r0, [r5, #0]
 80087e0:	6128      	str	r0, [r5, #16]
 80087e2:	b920      	cbnz	r0, 80087ee <_svfiprintf_r+0x2e>
 80087e4:	230c      	movs	r3, #12
 80087e6:	603b      	str	r3, [r7, #0]
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	e0d0      	b.n	8008990 <_svfiprintf_r+0x1d0>
 80087ee:	2340      	movs	r3, #64	; 0x40
 80087f0:	616b      	str	r3, [r5, #20]
 80087f2:	2300      	movs	r3, #0
 80087f4:	9309      	str	r3, [sp, #36]	; 0x24
 80087f6:	2320      	movs	r3, #32
 80087f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087fc:	2330      	movs	r3, #48	; 0x30
 80087fe:	f04f 0901 	mov.w	r9, #1
 8008802:	f8cd 800c 	str.w	r8, [sp, #12]
 8008806:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80089a8 <_svfiprintf_r+0x1e8>
 800880a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800880e:	4623      	mov	r3, r4
 8008810:	469a      	mov	sl, r3
 8008812:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008816:	b10a      	cbz	r2, 800881c <_svfiprintf_r+0x5c>
 8008818:	2a25      	cmp	r2, #37	; 0x25
 800881a:	d1f9      	bne.n	8008810 <_svfiprintf_r+0x50>
 800881c:	ebba 0b04 	subs.w	fp, sl, r4
 8008820:	d00b      	beq.n	800883a <_svfiprintf_r+0x7a>
 8008822:	465b      	mov	r3, fp
 8008824:	4622      	mov	r2, r4
 8008826:	4629      	mov	r1, r5
 8008828:	4638      	mov	r0, r7
 800882a:	f7ff ff6f 	bl	800870c <__ssputs_r>
 800882e:	3001      	adds	r0, #1
 8008830:	f000 80a9 	beq.w	8008986 <_svfiprintf_r+0x1c6>
 8008834:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008836:	445a      	add	r2, fp
 8008838:	9209      	str	r2, [sp, #36]	; 0x24
 800883a:	f89a 3000 	ldrb.w	r3, [sl]
 800883e:	2b00      	cmp	r3, #0
 8008840:	f000 80a1 	beq.w	8008986 <_svfiprintf_r+0x1c6>
 8008844:	2300      	movs	r3, #0
 8008846:	f04f 32ff 	mov.w	r2, #4294967295
 800884a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800884e:	f10a 0a01 	add.w	sl, sl, #1
 8008852:	9304      	str	r3, [sp, #16]
 8008854:	9307      	str	r3, [sp, #28]
 8008856:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800885a:	931a      	str	r3, [sp, #104]	; 0x68
 800885c:	4654      	mov	r4, sl
 800885e:	2205      	movs	r2, #5
 8008860:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008864:	4850      	ldr	r0, [pc, #320]	; (80089a8 <_svfiprintf_r+0x1e8>)
 8008866:	f7fd fc99 	bl	800619c <memchr>
 800886a:	9a04      	ldr	r2, [sp, #16]
 800886c:	b9d8      	cbnz	r0, 80088a6 <_svfiprintf_r+0xe6>
 800886e:	06d0      	lsls	r0, r2, #27
 8008870:	bf44      	itt	mi
 8008872:	2320      	movmi	r3, #32
 8008874:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008878:	0711      	lsls	r1, r2, #28
 800887a:	bf44      	itt	mi
 800887c:	232b      	movmi	r3, #43	; 0x2b
 800887e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008882:	f89a 3000 	ldrb.w	r3, [sl]
 8008886:	2b2a      	cmp	r3, #42	; 0x2a
 8008888:	d015      	beq.n	80088b6 <_svfiprintf_r+0xf6>
 800888a:	4654      	mov	r4, sl
 800888c:	2000      	movs	r0, #0
 800888e:	f04f 0c0a 	mov.w	ip, #10
 8008892:	9a07      	ldr	r2, [sp, #28]
 8008894:	4621      	mov	r1, r4
 8008896:	f811 3b01 	ldrb.w	r3, [r1], #1
 800889a:	3b30      	subs	r3, #48	; 0x30
 800889c:	2b09      	cmp	r3, #9
 800889e:	d94d      	bls.n	800893c <_svfiprintf_r+0x17c>
 80088a0:	b1b0      	cbz	r0, 80088d0 <_svfiprintf_r+0x110>
 80088a2:	9207      	str	r2, [sp, #28]
 80088a4:	e014      	b.n	80088d0 <_svfiprintf_r+0x110>
 80088a6:	eba0 0308 	sub.w	r3, r0, r8
 80088aa:	fa09 f303 	lsl.w	r3, r9, r3
 80088ae:	4313      	orrs	r3, r2
 80088b0:	46a2      	mov	sl, r4
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	e7d2      	b.n	800885c <_svfiprintf_r+0x9c>
 80088b6:	9b03      	ldr	r3, [sp, #12]
 80088b8:	1d19      	adds	r1, r3, #4
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	9103      	str	r1, [sp, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	bfbb      	ittet	lt
 80088c2:	425b      	neglt	r3, r3
 80088c4:	f042 0202 	orrlt.w	r2, r2, #2
 80088c8:	9307      	strge	r3, [sp, #28]
 80088ca:	9307      	strlt	r3, [sp, #28]
 80088cc:	bfb8      	it	lt
 80088ce:	9204      	strlt	r2, [sp, #16]
 80088d0:	7823      	ldrb	r3, [r4, #0]
 80088d2:	2b2e      	cmp	r3, #46	; 0x2e
 80088d4:	d10c      	bne.n	80088f0 <_svfiprintf_r+0x130>
 80088d6:	7863      	ldrb	r3, [r4, #1]
 80088d8:	2b2a      	cmp	r3, #42	; 0x2a
 80088da:	d134      	bne.n	8008946 <_svfiprintf_r+0x186>
 80088dc:	9b03      	ldr	r3, [sp, #12]
 80088de:	3402      	adds	r4, #2
 80088e0:	1d1a      	adds	r2, r3, #4
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	9203      	str	r2, [sp, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bfb8      	it	lt
 80088ea:	f04f 33ff 	movlt.w	r3, #4294967295
 80088ee:	9305      	str	r3, [sp, #20]
 80088f0:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80089ac <_svfiprintf_r+0x1ec>
 80088f4:	2203      	movs	r2, #3
 80088f6:	4650      	mov	r0, sl
 80088f8:	7821      	ldrb	r1, [r4, #0]
 80088fa:	f7fd fc4f 	bl	800619c <memchr>
 80088fe:	b138      	cbz	r0, 8008910 <_svfiprintf_r+0x150>
 8008900:	2240      	movs	r2, #64	; 0x40
 8008902:	9b04      	ldr	r3, [sp, #16]
 8008904:	eba0 000a 	sub.w	r0, r0, sl
 8008908:	4082      	lsls	r2, r0
 800890a:	4313      	orrs	r3, r2
 800890c:	3401      	adds	r4, #1
 800890e:	9304      	str	r3, [sp, #16]
 8008910:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008914:	2206      	movs	r2, #6
 8008916:	4826      	ldr	r0, [pc, #152]	; (80089b0 <_svfiprintf_r+0x1f0>)
 8008918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800891c:	f7fd fc3e 	bl	800619c <memchr>
 8008920:	2800      	cmp	r0, #0
 8008922:	d038      	beq.n	8008996 <_svfiprintf_r+0x1d6>
 8008924:	4b23      	ldr	r3, [pc, #140]	; (80089b4 <_svfiprintf_r+0x1f4>)
 8008926:	bb1b      	cbnz	r3, 8008970 <_svfiprintf_r+0x1b0>
 8008928:	9b03      	ldr	r3, [sp, #12]
 800892a:	3307      	adds	r3, #7
 800892c:	f023 0307 	bic.w	r3, r3, #7
 8008930:	3308      	adds	r3, #8
 8008932:	9303      	str	r3, [sp, #12]
 8008934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008936:	4433      	add	r3, r6
 8008938:	9309      	str	r3, [sp, #36]	; 0x24
 800893a:	e768      	b.n	800880e <_svfiprintf_r+0x4e>
 800893c:	460c      	mov	r4, r1
 800893e:	2001      	movs	r0, #1
 8008940:	fb0c 3202 	mla	r2, ip, r2, r3
 8008944:	e7a6      	b.n	8008894 <_svfiprintf_r+0xd4>
 8008946:	2300      	movs	r3, #0
 8008948:	f04f 0c0a 	mov.w	ip, #10
 800894c:	4619      	mov	r1, r3
 800894e:	3401      	adds	r4, #1
 8008950:	9305      	str	r3, [sp, #20]
 8008952:	4620      	mov	r0, r4
 8008954:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008958:	3a30      	subs	r2, #48	; 0x30
 800895a:	2a09      	cmp	r2, #9
 800895c:	d903      	bls.n	8008966 <_svfiprintf_r+0x1a6>
 800895e:	2b00      	cmp	r3, #0
 8008960:	d0c6      	beq.n	80088f0 <_svfiprintf_r+0x130>
 8008962:	9105      	str	r1, [sp, #20]
 8008964:	e7c4      	b.n	80088f0 <_svfiprintf_r+0x130>
 8008966:	4604      	mov	r4, r0
 8008968:	2301      	movs	r3, #1
 800896a:	fb0c 2101 	mla	r1, ip, r1, r2
 800896e:	e7f0      	b.n	8008952 <_svfiprintf_r+0x192>
 8008970:	ab03      	add	r3, sp, #12
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	462a      	mov	r2, r5
 8008976:	4638      	mov	r0, r7
 8008978:	4b0f      	ldr	r3, [pc, #60]	; (80089b8 <_svfiprintf_r+0x1f8>)
 800897a:	a904      	add	r1, sp, #16
 800897c:	f7fc fc8c 	bl	8005298 <_printf_float>
 8008980:	1c42      	adds	r2, r0, #1
 8008982:	4606      	mov	r6, r0
 8008984:	d1d6      	bne.n	8008934 <_svfiprintf_r+0x174>
 8008986:	89ab      	ldrh	r3, [r5, #12]
 8008988:	065b      	lsls	r3, r3, #25
 800898a:	f53f af2d 	bmi.w	80087e8 <_svfiprintf_r+0x28>
 800898e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008990:	b01d      	add	sp, #116	; 0x74
 8008992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008996:	ab03      	add	r3, sp, #12
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	462a      	mov	r2, r5
 800899c:	4638      	mov	r0, r7
 800899e:	4b06      	ldr	r3, [pc, #24]	; (80089b8 <_svfiprintf_r+0x1f8>)
 80089a0:	a904      	add	r1, sp, #16
 80089a2:	f7fc ff19 	bl	80057d8 <_printf_i>
 80089a6:	e7eb      	b.n	8008980 <_svfiprintf_r+0x1c0>
 80089a8:	08009d11 	.word	0x08009d11
 80089ac:	08009d17 	.word	0x08009d17
 80089b0:	08009d1b 	.word	0x08009d1b
 80089b4:	08005299 	.word	0x08005299
 80089b8:	0800870d 	.word	0x0800870d

080089bc <__sflush_r>:
 80089bc:	898a      	ldrh	r2, [r1, #12]
 80089be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089c0:	4605      	mov	r5, r0
 80089c2:	0710      	lsls	r0, r2, #28
 80089c4:	460c      	mov	r4, r1
 80089c6:	d457      	bmi.n	8008a78 <__sflush_r+0xbc>
 80089c8:	684b      	ldr	r3, [r1, #4]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	dc04      	bgt.n	80089d8 <__sflush_r+0x1c>
 80089ce:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	dc01      	bgt.n	80089d8 <__sflush_r+0x1c>
 80089d4:	2000      	movs	r0, #0
 80089d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80089da:	2e00      	cmp	r6, #0
 80089dc:	d0fa      	beq.n	80089d4 <__sflush_r+0x18>
 80089de:	2300      	movs	r3, #0
 80089e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80089e4:	682f      	ldr	r7, [r5, #0]
 80089e6:	6a21      	ldr	r1, [r4, #32]
 80089e8:	602b      	str	r3, [r5, #0]
 80089ea:	d032      	beq.n	8008a52 <__sflush_r+0x96>
 80089ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80089ee:	89a3      	ldrh	r3, [r4, #12]
 80089f0:	075a      	lsls	r2, r3, #29
 80089f2:	d505      	bpl.n	8008a00 <__sflush_r+0x44>
 80089f4:	6863      	ldr	r3, [r4, #4]
 80089f6:	1ac0      	subs	r0, r0, r3
 80089f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80089fa:	b10b      	cbz	r3, 8008a00 <__sflush_r+0x44>
 80089fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80089fe:	1ac0      	subs	r0, r0, r3
 8008a00:	2300      	movs	r3, #0
 8008a02:	4602      	mov	r2, r0
 8008a04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a06:	4628      	mov	r0, r5
 8008a08:	6a21      	ldr	r1, [r4, #32]
 8008a0a:	47b0      	blx	r6
 8008a0c:	1c43      	adds	r3, r0, #1
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	d106      	bne.n	8008a20 <__sflush_r+0x64>
 8008a12:	6829      	ldr	r1, [r5, #0]
 8008a14:	291d      	cmp	r1, #29
 8008a16:	d82b      	bhi.n	8008a70 <__sflush_r+0xb4>
 8008a18:	4a28      	ldr	r2, [pc, #160]	; (8008abc <__sflush_r+0x100>)
 8008a1a:	410a      	asrs	r2, r1
 8008a1c:	07d6      	lsls	r6, r2, #31
 8008a1e:	d427      	bmi.n	8008a70 <__sflush_r+0xb4>
 8008a20:	2200      	movs	r2, #0
 8008a22:	6062      	str	r2, [r4, #4]
 8008a24:	6922      	ldr	r2, [r4, #16]
 8008a26:	04d9      	lsls	r1, r3, #19
 8008a28:	6022      	str	r2, [r4, #0]
 8008a2a:	d504      	bpl.n	8008a36 <__sflush_r+0x7a>
 8008a2c:	1c42      	adds	r2, r0, #1
 8008a2e:	d101      	bne.n	8008a34 <__sflush_r+0x78>
 8008a30:	682b      	ldr	r3, [r5, #0]
 8008a32:	b903      	cbnz	r3, 8008a36 <__sflush_r+0x7a>
 8008a34:	6560      	str	r0, [r4, #84]	; 0x54
 8008a36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a38:	602f      	str	r7, [r5, #0]
 8008a3a:	2900      	cmp	r1, #0
 8008a3c:	d0ca      	beq.n	80089d4 <__sflush_r+0x18>
 8008a3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a42:	4299      	cmp	r1, r3
 8008a44:	d002      	beq.n	8008a4c <__sflush_r+0x90>
 8008a46:	4628      	mov	r0, r5
 8008a48:	f7fe fa2a 	bl	8006ea0 <_free_r>
 8008a4c:	2000      	movs	r0, #0
 8008a4e:	6360      	str	r0, [r4, #52]	; 0x34
 8008a50:	e7c1      	b.n	80089d6 <__sflush_r+0x1a>
 8008a52:	2301      	movs	r3, #1
 8008a54:	4628      	mov	r0, r5
 8008a56:	47b0      	blx	r6
 8008a58:	1c41      	adds	r1, r0, #1
 8008a5a:	d1c8      	bne.n	80089ee <__sflush_r+0x32>
 8008a5c:	682b      	ldr	r3, [r5, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d0c5      	beq.n	80089ee <__sflush_r+0x32>
 8008a62:	2b1d      	cmp	r3, #29
 8008a64:	d001      	beq.n	8008a6a <__sflush_r+0xae>
 8008a66:	2b16      	cmp	r3, #22
 8008a68:	d101      	bne.n	8008a6e <__sflush_r+0xb2>
 8008a6a:	602f      	str	r7, [r5, #0]
 8008a6c:	e7b2      	b.n	80089d4 <__sflush_r+0x18>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a74:	81a3      	strh	r3, [r4, #12]
 8008a76:	e7ae      	b.n	80089d6 <__sflush_r+0x1a>
 8008a78:	690f      	ldr	r7, [r1, #16]
 8008a7a:	2f00      	cmp	r7, #0
 8008a7c:	d0aa      	beq.n	80089d4 <__sflush_r+0x18>
 8008a7e:	0793      	lsls	r3, r2, #30
 8008a80:	bf18      	it	ne
 8008a82:	2300      	movne	r3, #0
 8008a84:	680e      	ldr	r6, [r1, #0]
 8008a86:	bf08      	it	eq
 8008a88:	694b      	ldreq	r3, [r1, #20]
 8008a8a:	1bf6      	subs	r6, r6, r7
 8008a8c:	600f      	str	r7, [r1, #0]
 8008a8e:	608b      	str	r3, [r1, #8]
 8008a90:	2e00      	cmp	r6, #0
 8008a92:	dd9f      	ble.n	80089d4 <__sflush_r+0x18>
 8008a94:	4633      	mov	r3, r6
 8008a96:	463a      	mov	r2, r7
 8008a98:	4628      	mov	r0, r5
 8008a9a:	6a21      	ldr	r1, [r4, #32]
 8008a9c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008aa0:	47e0      	blx	ip
 8008aa2:	2800      	cmp	r0, #0
 8008aa4:	dc06      	bgt.n	8008ab4 <__sflush_r+0xf8>
 8008aa6:	89a3      	ldrh	r3, [r4, #12]
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008aac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ab0:	81a3      	strh	r3, [r4, #12]
 8008ab2:	e790      	b.n	80089d6 <__sflush_r+0x1a>
 8008ab4:	4407      	add	r7, r0
 8008ab6:	1a36      	subs	r6, r6, r0
 8008ab8:	e7ea      	b.n	8008a90 <__sflush_r+0xd4>
 8008aba:	bf00      	nop
 8008abc:	dfbffffe 	.word	0xdfbffffe

08008ac0 <_fflush_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	690b      	ldr	r3, [r1, #16]
 8008ac4:	4605      	mov	r5, r0
 8008ac6:	460c      	mov	r4, r1
 8008ac8:	b913      	cbnz	r3, 8008ad0 <_fflush_r+0x10>
 8008aca:	2500      	movs	r5, #0
 8008acc:	4628      	mov	r0, r5
 8008ace:	bd38      	pop	{r3, r4, r5, pc}
 8008ad0:	b118      	cbz	r0, 8008ada <_fflush_r+0x1a>
 8008ad2:	6a03      	ldr	r3, [r0, #32]
 8008ad4:	b90b      	cbnz	r3, 8008ada <_fflush_r+0x1a>
 8008ad6:	f7fd fa29 	bl	8005f2c <__sinit>
 8008ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d0f3      	beq.n	8008aca <_fflush_r+0xa>
 8008ae2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008ae4:	07d0      	lsls	r0, r2, #31
 8008ae6:	d404      	bmi.n	8008af2 <_fflush_r+0x32>
 8008ae8:	0599      	lsls	r1, r3, #22
 8008aea:	d402      	bmi.n	8008af2 <_fflush_r+0x32>
 8008aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008aee:	f7fd fb53 	bl	8006198 <__retarget_lock_acquire_recursive>
 8008af2:	4628      	mov	r0, r5
 8008af4:	4621      	mov	r1, r4
 8008af6:	f7ff ff61 	bl	80089bc <__sflush_r>
 8008afa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008afc:	4605      	mov	r5, r0
 8008afe:	07da      	lsls	r2, r3, #31
 8008b00:	d4e4      	bmi.n	8008acc <_fflush_r+0xc>
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	059b      	lsls	r3, r3, #22
 8008b06:	d4e1      	bmi.n	8008acc <_fflush_r+0xc>
 8008b08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b0a:	f7fd fb46 	bl	800619a <__retarget_lock_release_recursive>
 8008b0e:	e7dd      	b.n	8008acc <_fflush_r+0xc>

08008b10 <memmove>:
 8008b10:	4288      	cmp	r0, r1
 8008b12:	b510      	push	{r4, lr}
 8008b14:	eb01 0402 	add.w	r4, r1, r2
 8008b18:	d902      	bls.n	8008b20 <memmove+0x10>
 8008b1a:	4284      	cmp	r4, r0
 8008b1c:	4623      	mov	r3, r4
 8008b1e:	d807      	bhi.n	8008b30 <memmove+0x20>
 8008b20:	1e43      	subs	r3, r0, #1
 8008b22:	42a1      	cmp	r1, r4
 8008b24:	d008      	beq.n	8008b38 <memmove+0x28>
 8008b26:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b2a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b2e:	e7f8      	b.n	8008b22 <memmove+0x12>
 8008b30:	4601      	mov	r1, r0
 8008b32:	4402      	add	r2, r0
 8008b34:	428a      	cmp	r2, r1
 8008b36:	d100      	bne.n	8008b3a <memmove+0x2a>
 8008b38:	bd10      	pop	{r4, pc}
 8008b3a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b3e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b42:	e7f7      	b.n	8008b34 <memmove+0x24>

08008b44 <strncmp>:
 8008b44:	b510      	push	{r4, lr}
 8008b46:	b16a      	cbz	r2, 8008b64 <strncmp+0x20>
 8008b48:	3901      	subs	r1, #1
 8008b4a:	1884      	adds	r4, r0, r2
 8008b4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b50:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d103      	bne.n	8008b60 <strncmp+0x1c>
 8008b58:	42a0      	cmp	r0, r4
 8008b5a:	d001      	beq.n	8008b60 <strncmp+0x1c>
 8008b5c:	2a00      	cmp	r2, #0
 8008b5e:	d1f5      	bne.n	8008b4c <strncmp+0x8>
 8008b60:	1ad0      	subs	r0, r2, r3
 8008b62:	bd10      	pop	{r4, pc}
 8008b64:	4610      	mov	r0, r2
 8008b66:	e7fc      	b.n	8008b62 <strncmp+0x1e>

08008b68 <_sbrk_r>:
 8008b68:	b538      	push	{r3, r4, r5, lr}
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4d05      	ldr	r5, [pc, #20]	; (8008b84 <_sbrk_r+0x1c>)
 8008b6e:	4604      	mov	r4, r0
 8008b70:	4608      	mov	r0, r1
 8008b72:	602b      	str	r3, [r5, #0]
 8008b74:	f7f9 fab6 	bl	80020e4 <_sbrk>
 8008b78:	1c43      	adds	r3, r0, #1
 8008b7a:	d102      	bne.n	8008b82 <_sbrk_r+0x1a>
 8008b7c:	682b      	ldr	r3, [r5, #0]
 8008b7e:	b103      	cbz	r3, 8008b82 <_sbrk_r+0x1a>
 8008b80:	6023      	str	r3, [r4, #0]
 8008b82:	bd38      	pop	{r3, r4, r5, pc}
 8008b84:	200004e0 	.word	0x200004e0

08008b88 <memcpy>:
 8008b88:	440a      	add	r2, r1
 8008b8a:	4291      	cmp	r1, r2
 8008b8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b90:	d100      	bne.n	8008b94 <memcpy+0xc>
 8008b92:	4770      	bx	lr
 8008b94:	b510      	push	{r4, lr}
 8008b96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b9a:	4291      	cmp	r1, r2
 8008b9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ba0:	d1f9      	bne.n	8008b96 <memcpy+0xe>
 8008ba2:	bd10      	pop	{r4, pc}

08008ba4 <nan>:
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	4901      	ldr	r1, [pc, #4]	; (8008bac <nan+0x8>)
 8008ba8:	4770      	bx	lr
 8008baa:	bf00      	nop
 8008bac:	7ff80000 	.word	0x7ff80000

08008bb0 <__assert_func>:
 8008bb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008bb2:	4614      	mov	r4, r2
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	4b09      	ldr	r3, [pc, #36]	; (8008bdc <__assert_func+0x2c>)
 8008bb8:	4605      	mov	r5, r0
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	68d8      	ldr	r0, [r3, #12]
 8008bbe:	b14c      	cbz	r4, 8008bd4 <__assert_func+0x24>
 8008bc0:	4b07      	ldr	r3, [pc, #28]	; (8008be0 <__assert_func+0x30>)
 8008bc2:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008bc6:	9100      	str	r1, [sp, #0]
 8008bc8:	462b      	mov	r3, r5
 8008bca:	4906      	ldr	r1, [pc, #24]	; (8008be4 <__assert_func+0x34>)
 8008bcc:	f000 fbca 	bl	8009364 <fiprintf>
 8008bd0:	f000 fbda 	bl	8009388 <abort>
 8008bd4:	4b04      	ldr	r3, [pc, #16]	; (8008be8 <__assert_func+0x38>)
 8008bd6:	461c      	mov	r4, r3
 8008bd8:	e7f3      	b.n	8008bc2 <__assert_func+0x12>
 8008bda:	bf00      	nop
 8008bdc:	20000068 	.word	0x20000068
 8008be0:	08009d2a 	.word	0x08009d2a
 8008be4:	08009d37 	.word	0x08009d37
 8008be8:	08009d65 	.word	0x08009d65

08008bec <_calloc_r>:
 8008bec:	b570      	push	{r4, r5, r6, lr}
 8008bee:	fba1 5402 	umull	r5, r4, r1, r2
 8008bf2:	b934      	cbnz	r4, 8008c02 <_calloc_r+0x16>
 8008bf4:	4629      	mov	r1, r5
 8008bf6:	f7fe f9c3 	bl	8006f80 <_malloc_r>
 8008bfa:	4606      	mov	r6, r0
 8008bfc:	b928      	cbnz	r0, 8008c0a <_calloc_r+0x1e>
 8008bfe:	4630      	mov	r0, r6
 8008c00:	bd70      	pop	{r4, r5, r6, pc}
 8008c02:	220c      	movs	r2, #12
 8008c04:	2600      	movs	r6, #0
 8008c06:	6002      	str	r2, [r0, #0]
 8008c08:	e7f9      	b.n	8008bfe <_calloc_r+0x12>
 8008c0a:	462a      	mov	r2, r5
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	f7fd fa47 	bl	80060a0 <memset>
 8008c12:	e7f4      	b.n	8008bfe <_calloc_r+0x12>

08008c14 <rshift>:
 8008c14:	6903      	ldr	r3, [r0, #16]
 8008c16:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008c1e:	f100 0414 	add.w	r4, r0, #20
 8008c22:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008c26:	dd46      	ble.n	8008cb6 <rshift+0xa2>
 8008c28:	f011 011f 	ands.w	r1, r1, #31
 8008c2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008c30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008c34:	d10c      	bne.n	8008c50 <rshift+0x3c>
 8008c36:	4629      	mov	r1, r5
 8008c38:	f100 0710 	add.w	r7, r0, #16
 8008c3c:	42b1      	cmp	r1, r6
 8008c3e:	d335      	bcc.n	8008cac <rshift+0x98>
 8008c40:	1a9b      	subs	r3, r3, r2
 8008c42:	009b      	lsls	r3, r3, #2
 8008c44:	1eea      	subs	r2, r5, #3
 8008c46:	4296      	cmp	r6, r2
 8008c48:	bf38      	it	cc
 8008c4a:	2300      	movcc	r3, #0
 8008c4c:	4423      	add	r3, r4
 8008c4e:	e015      	b.n	8008c7c <rshift+0x68>
 8008c50:	46a1      	mov	r9, r4
 8008c52:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008c56:	f1c1 0820 	rsb	r8, r1, #32
 8008c5a:	40cf      	lsrs	r7, r1
 8008c5c:	f105 0e04 	add.w	lr, r5, #4
 8008c60:	4576      	cmp	r6, lr
 8008c62:	46f4      	mov	ip, lr
 8008c64:	d816      	bhi.n	8008c94 <rshift+0x80>
 8008c66:	1a9a      	subs	r2, r3, r2
 8008c68:	0092      	lsls	r2, r2, #2
 8008c6a:	3a04      	subs	r2, #4
 8008c6c:	3501      	adds	r5, #1
 8008c6e:	42ae      	cmp	r6, r5
 8008c70:	bf38      	it	cc
 8008c72:	2200      	movcc	r2, #0
 8008c74:	18a3      	adds	r3, r4, r2
 8008c76:	50a7      	str	r7, [r4, r2]
 8008c78:	b107      	cbz	r7, 8008c7c <rshift+0x68>
 8008c7a:	3304      	adds	r3, #4
 8008c7c:	42a3      	cmp	r3, r4
 8008c7e:	eba3 0204 	sub.w	r2, r3, r4
 8008c82:	bf08      	it	eq
 8008c84:	2300      	moveq	r3, #0
 8008c86:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008c8a:	6102      	str	r2, [r0, #16]
 8008c8c:	bf08      	it	eq
 8008c8e:	6143      	streq	r3, [r0, #20]
 8008c90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c94:	f8dc c000 	ldr.w	ip, [ip]
 8008c98:	fa0c fc08 	lsl.w	ip, ip, r8
 8008c9c:	ea4c 0707 	orr.w	r7, ip, r7
 8008ca0:	f849 7b04 	str.w	r7, [r9], #4
 8008ca4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ca8:	40cf      	lsrs	r7, r1
 8008caa:	e7d9      	b.n	8008c60 <rshift+0x4c>
 8008cac:	f851 cb04 	ldr.w	ip, [r1], #4
 8008cb0:	f847 cf04 	str.w	ip, [r7, #4]!
 8008cb4:	e7c2      	b.n	8008c3c <rshift+0x28>
 8008cb6:	4623      	mov	r3, r4
 8008cb8:	e7e0      	b.n	8008c7c <rshift+0x68>

08008cba <__hexdig_fun>:
 8008cba:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008cbe:	2b09      	cmp	r3, #9
 8008cc0:	d802      	bhi.n	8008cc8 <__hexdig_fun+0xe>
 8008cc2:	3820      	subs	r0, #32
 8008cc4:	b2c0      	uxtb	r0, r0
 8008cc6:	4770      	bx	lr
 8008cc8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ccc:	2b05      	cmp	r3, #5
 8008cce:	d801      	bhi.n	8008cd4 <__hexdig_fun+0x1a>
 8008cd0:	3847      	subs	r0, #71	; 0x47
 8008cd2:	e7f7      	b.n	8008cc4 <__hexdig_fun+0xa>
 8008cd4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008cd8:	2b05      	cmp	r3, #5
 8008cda:	d801      	bhi.n	8008ce0 <__hexdig_fun+0x26>
 8008cdc:	3827      	subs	r0, #39	; 0x27
 8008cde:	e7f1      	b.n	8008cc4 <__hexdig_fun+0xa>
 8008ce0:	2000      	movs	r0, #0
 8008ce2:	4770      	bx	lr

08008ce4 <__gethex>:
 8008ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ce8:	4681      	mov	r9, r0
 8008cea:	468a      	mov	sl, r1
 8008cec:	4617      	mov	r7, r2
 8008cee:	680a      	ldr	r2, [r1, #0]
 8008cf0:	b085      	sub	sp, #20
 8008cf2:	f102 0b02 	add.w	fp, r2, #2
 8008cf6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008cfa:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008cfe:	9302      	str	r3, [sp, #8]
 8008d00:	32fe      	adds	r2, #254	; 0xfe
 8008d02:	eb02 030b 	add.w	r3, r2, fp
 8008d06:	46d8      	mov	r8, fp
 8008d08:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008d0c:	9301      	str	r3, [sp, #4]
 8008d0e:	2830      	cmp	r0, #48	; 0x30
 8008d10:	d0f7      	beq.n	8008d02 <__gethex+0x1e>
 8008d12:	f7ff ffd2 	bl	8008cba <__hexdig_fun>
 8008d16:	4604      	mov	r4, r0
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	d138      	bne.n	8008d8e <__gethex+0xaa>
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	4640      	mov	r0, r8
 8008d20:	49a7      	ldr	r1, [pc, #668]	; (8008fc0 <__gethex+0x2dc>)
 8008d22:	f7ff ff0f 	bl	8008b44 <strncmp>
 8008d26:	4606      	mov	r6, r0
 8008d28:	2800      	cmp	r0, #0
 8008d2a:	d169      	bne.n	8008e00 <__gethex+0x11c>
 8008d2c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008d30:	465d      	mov	r5, fp
 8008d32:	f7ff ffc2 	bl	8008cba <__hexdig_fun>
 8008d36:	2800      	cmp	r0, #0
 8008d38:	d064      	beq.n	8008e04 <__gethex+0x120>
 8008d3a:	465a      	mov	r2, fp
 8008d3c:	7810      	ldrb	r0, [r2, #0]
 8008d3e:	4690      	mov	r8, r2
 8008d40:	2830      	cmp	r0, #48	; 0x30
 8008d42:	f102 0201 	add.w	r2, r2, #1
 8008d46:	d0f9      	beq.n	8008d3c <__gethex+0x58>
 8008d48:	f7ff ffb7 	bl	8008cba <__hexdig_fun>
 8008d4c:	2301      	movs	r3, #1
 8008d4e:	fab0 f480 	clz	r4, r0
 8008d52:	465e      	mov	r6, fp
 8008d54:	0964      	lsrs	r4, r4, #5
 8008d56:	9301      	str	r3, [sp, #4]
 8008d58:	4642      	mov	r2, r8
 8008d5a:	4615      	mov	r5, r2
 8008d5c:	7828      	ldrb	r0, [r5, #0]
 8008d5e:	3201      	adds	r2, #1
 8008d60:	f7ff ffab 	bl	8008cba <__hexdig_fun>
 8008d64:	2800      	cmp	r0, #0
 8008d66:	d1f8      	bne.n	8008d5a <__gethex+0x76>
 8008d68:	2201      	movs	r2, #1
 8008d6a:	4628      	mov	r0, r5
 8008d6c:	4994      	ldr	r1, [pc, #592]	; (8008fc0 <__gethex+0x2dc>)
 8008d6e:	f7ff fee9 	bl	8008b44 <strncmp>
 8008d72:	b978      	cbnz	r0, 8008d94 <__gethex+0xb0>
 8008d74:	b946      	cbnz	r6, 8008d88 <__gethex+0xa4>
 8008d76:	1c6e      	adds	r6, r5, #1
 8008d78:	4632      	mov	r2, r6
 8008d7a:	4615      	mov	r5, r2
 8008d7c:	7828      	ldrb	r0, [r5, #0]
 8008d7e:	3201      	adds	r2, #1
 8008d80:	f7ff ff9b 	bl	8008cba <__hexdig_fun>
 8008d84:	2800      	cmp	r0, #0
 8008d86:	d1f8      	bne.n	8008d7a <__gethex+0x96>
 8008d88:	1b73      	subs	r3, r6, r5
 8008d8a:	009e      	lsls	r6, r3, #2
 8008d8c:	e004      	b.n	8008d98 <__gethex+0xb4>
 8008d8e:	2400      	movs	r4, #0
 8008d90:	4626      	mov	r6, r4
 8008d92:	e7e1      	b.n	8008d58 <__gethex+0x74>
 8008d94:	2e00      	cmp	r6, #0
 8008d96:	d1f7      	bne.n	8008d88 <__gethex+0xa4>
 8008d98:	782b      	ldrb	r3, [r5, #0]
 8008d9a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008d9e:	2b50      	cmp	r3, #80	; 0x50
 8008da0:	d13d      	bne.n	8008e1e <__gethex+0x13a>
 8008da2:	786b      	ldrb	r3, [r5, #1]
 8008da4:	2b2b      	cmp	r3, #43	; 0x2b
 8008da6:	d02f      	beq.n	8008e08 <__gethex+0x124>
 8008da8:	2b2d      	cmp	r3, #45	; 0x2d
 8008daa:	d031      	beq.n	8008e10 <__gethex+0x12c>
 8008dac:	f04f 0b00 	mov.w	fp, #0
 8008db0:	1c69      	adds	r1, r5, #1
 8008db2:	7808      	ldrb	r0, [r1, #0]
 8008db4:	f7ff ff81 	bl	8008cba <__hexdig_fun>
 8008db8:	1e42      	subs	r2, r0, #1
 8008dba:	b2d2      	uxtb	r2, r2
 8008dbc:	2a18      	cmp	r2, #24
 8008dbe:	d82e      	bhi.n	8008e1e <__gethex+0x13a>
 8008dc0:	f1a0 0210 	sub.w	r2, r0, #16
 8008dc4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008dc8:	f7ff ff77 	bl	8008cba <__hexdig_fun>
 8008dcc:	f100 3cff 	add.w	ip, r0, #4294967295
 8008dd0:	fa5f fc8c 	uxtb.w	ip, ip
 8008dd4:	f1bc 0f18 	cmp.w	ip, #24
 8008dd8:	d91d      	bls.n	8008e16 <__gethex+0x132>
 8008dda:	f1bb 0f00 	cmp.w	fp, #0
 8008dde:	d000      	beq.n	8008de2 <__gethex+0xfe>
 8008de0:	4252      	negs	r2, r2
 8008de2:	4416      	add	r6, r2
 8008de4:	f8ca 1000 	str.w	r1, [sl]
 8008de8:	b1dc      	cbz	r4, 8008e22 <__gethex+0x13e>
 8008dea:	9b01      	ldr	r3, [sp, #4]
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	bf14      	ite	ne
 8008df0:	f04f 0800 	movne.w	r8, #0
 8008df4:	f04f 0806 	moveq.w	r8, #6
 8008df8:	4640      	mov	r0, r8
 8008dfa:	b005      	add	sp, #20
 8008dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e00:	4645      	mov	r5, r8
 8008e02:	4626      	mov	r6, r4
 8008e04:	2401      	movs	r4, #1
 8008e06:	e7c7      	b.n	8008d98 <__gethex+0xb4>
 8008e08:	f04f 0b00 	mov.w	fp, #0
 8008e0c:	1ca9      	adds	r1, r5, #2
 8008e0e:	e7d0      	b.n	8008db2 <__gethex+0xce>
 8008e10:	f04f 0b01 	mov.w	fp, #1
 8008e14:	e7fa      	b.n	8008e0c <__gethex+0x128>
 8008e16:	230a      	movs	r3, #10
 8008e18:	fb03 0002 	mla	r0, r3, r2, r0
 8008e1c:	e7d0      	b.n	8008dc0 <__gethex+0xdc>
 8008e1e:	4629      	mov	r1, r5
 8008e20:	e7e0      	b.n	8008de4 <__gethex+0x100>
 8008e22:	4621      	mov	r1, r4
 8008e24:	eba5 0308 	sub.w	r3, r5, r8
 8008e28:	3b01      	subs	r3, #1
 8008e2a:	2b07      	cmp	r3, #7
 8008e2c:	dc0a      	bgt.n	8008e44 <__gethex+0x160>
 8008e2e:	4648      	mov	r0, r9
 8008e30:	f7fe f932 	bl	8007098 <_Balloc>
 8008e34:	4604      	mov	r4, r0
 8008e36:	b940      	cbnz	r0, 8008e4a <__gethex+0x166>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	21e4      	movs	r1, #228	; 0xe4
 8008e3c:	4b61      	ldr	r3, [pc, #388]	; (8008fc4 <__gethex+0x2e0>)
 8008e3e:	4862      	ldr	r0, [pc, #392]	; (8008fc8 <__gethex+0x2e4>)
 8008e40:	f7ff feb6 	bl	8008bb0 <__assert_func>
 8008e44:	3101      	adds	r1, #1
 8008e46:	105b      	asrs	r3, r3, #1
 8008e48:	e7ef      	b.n	8008e2a <__gethex+0x146>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	469b      	mov	fp, r3
 8008e4e:	f100 0a14 	add.w	sl, r0, #20
 8008e52:	f8cd a004 	str.w	sl, [sp, #4]
 8008e56:	45a8      	cmp	r8, r5
 8008e58:	d344      	bcc.n	8008ee4 <__gethex+0x200>
 8008e5a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008e5e:	4658      	mov	r0, fp
 8008e60:	f848 bb04 	str.w	fp, [r8], #4
 8008e64:	eba8 080a 	sub.w	r8, r8, sl
 8008e68:	ea4f 02a8 	mov.w	r2, r8, asr #2
 8008e6c:	6122      	str	r2, [r4, #16]
 8008e6e:	ea4f 1842 	mov.w	r8, r2, lsl #5
 8008e72:	f7fe fa03 	bl	800727c <__hi0bits>
 8008e76:	683d      	ldr	r5, [r7, #0]
 8008e78:	eba8 0800 	sub.w	r8, r8, r0
 8008e7c:	45a8      	cmp	r8, r5
 8008e7e:	dd59      	ble.n	8008f34 <__gethex+0x250>
 8008e80:	eba8 0805 	sub.w	r8, r8, r5
 8008e84:	4641      	mov	r1, r8
 8008e86:	4620      	mov	r0, r4
 8008e88:	f7fe fd81 	bl	800798e <__any_on>
 8008e8c:	4683      	mov	fp, r0
 8008e8e:	b1b8      	cbz	r0, 8008ec0 <__gethex+0x1dc>
 8008e90:	f04f 0b01 	mov.w	fp, #1
 8008e94:	f108 33ff 	add.w	r3, r8, #4294967295
 8008e98:	1159      	asrs	r1, r3, #5
 8008e9a:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008e9e:	f003 021f 	and.w	r2, r3, #31
 8008ea2:	fa0b f202 	lsl.w	r2, fp, r2
 8008ea6:	420a      	tst	r2, r1
 8008ea8:	d00a      	beq.n	8008ec0 <__gethex+0x1dc>
 8008eaa:	455b      	cmp	r3, fp
 8008eac:	dd06      	ble.n	8008ebc <__gethex+0x1d8>
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f1a8 0102 	sub.w	r1, r8, #2
 8008eb4:	f7fe fd6b 	bl	800798e <__any_on>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d138      	bne.n	8008f2e <__gethex+0x24a>
 8008ebc:	f04f 0b02 	mov.w	fp, #2
 8008ec0:	4641      	mov	r1, r8
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f7ff fea6 	bl	8008c14 <rshift>
 8008ec8:	4446      	add	r6, r8
 8008eca:	68bb      	ldr	r3, [r7, #8]
 8008ecc:	42b3      	cmp	r3, r6
 8008ece:	da41      	bge.n	8008f54 <__gethex+0x270>
 8008ed0:	4621      	mov	r1, r4
 8008ed2:	4648      	mov	r0, r9
 8008ed4:	f7fe f920 	bl	8007118 <_Bfree>
 8008ed8:	2300      	movs	r3, #0
 8008eda:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008edc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	e789      	b.n	8008df8 <__gethex+0x114>
 8008ee4:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 8008ee8:	2a2e      	cmp	r2, #46	; 0x2e
 8008eea:	d014      	beq.n	8008f16 <__gethex+0x232>
 8008eec:	2b20      	cmp	r3, #32
 8008eee:	d106      	bne.n	8008efe <__gethex+0x21a>
 8008ef0:	9b01      	ldr	r3, [sp, #4]
 8008ef2:	f843 bb04 	str.w	fp, [r3], #4
 8008ef6:	f04f 0b00 	mov.w	fp, #0
 8008efa:	9301      	str	r3, [sp, #4]
 8008efc:	465b      	mov	r3, fp
 8008efe:	7828      	ldrb	r0, [r5, #0]
 8008f00:	9303      	str	r3, [sp, #12]
 8008f02:	f7ff feda 	bl	8008cba <__hexdig_fun>
 8008f06:	9b03      	ldr	r3, [sp, #12]
 8008f08:	f000 000f 	and.w	r0, r0, #15
 8008f0c:	4098      	lsls	r0, r3
 8008f0e:	ea4b 0b00 	orr.w	fp, fp, r0
 8008f12:	3304      	adds	r3, #4
 8008f14:	e79f      	b.n	8008e56 <__gethex+0x172>
 8008f16:	45a8      	cmp	r8, r5
 8008f18:	d8e8      	bhi.n	8008eec <__gethex+0x208>
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	4928      	ldr	r1, [pc, #160]	; (8008fc0 <__gethex+0x2dc>)
 8008f20:	9303      	str	r3, [sp, #12]
 8008f22:	f7ff fe0f 	bl	8008b44 <strncmp>
 8008f26:	9b03      	ldr	r3, [sp, #12]
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	d1df      	bne.n	8008eec <__gethex+0x208>
 8008f2c:	e793      	b.n	8008e56 <__gethex+0x172>
 8008f2e:	f04f 0b03 	mov.w	fp, #3
 8008f32:	e7c5      	b.n	8008ec0 <__gethex+0x1dc>
 8008f34:	da0b      	bge.n	8008f4e <__gethex+0x26a>
 8008f36:	eba5 0808 	sub.w	r8, r5, r8
 8008f3a:	4621      	mov	r1, r4
 8008f3c:	4642      	mov	r2, r8
 8008f3e:	4648      	mov	r0, r9
 8008f40:	f7fe fb02 	bl	8007548 <__lshift>
 8008f44:	4604      	mov	r4, r0
 8008f46:	eba6 0608 	sub.w	r6, r6, r8
 8008f4a:	f100 0a14 	add.w	sl, r0, #20
 8008f4e:	f04f 0b00 	mov.w	fp, #0
 8008f52:	e7ba      	b.n	8008eca <__gethex+0x1e6>
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	42b3      	cmp	r3, r6
 8008f58:	dd74      	ble.n	8009044 <__gethex+0x360>
 8008f5a:	1b9e      	subs	r6, r3, r6
 8008f5c:	42b5      	cmp	r5, r6
 8008f5e:	dc35      	bgt.n	8008fcc <__gethex+0x2e8>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2b02      	cmp	r3, #2
 8008f64:	d023      	beq.n	8008fae <__gethex+0x2ca>
 8008f66:	2b03      	cmp	r3, #3
 8008f68:	d025      	beq.n	8008fb6 <__gethex+0x2d2>
 8008f6a:	2b01      	cmp	r3, #1
 8008f6c:	d115      	bne.n	8008f9a <__gethex+0x2b6>
 8008f6e:	42b5      	cmp	r5, r6
 8008f70:	d113      	bne.n	8008f9a <__gethex+0x2b6>
 8008f72:	2d01      	cmp	r5, #1
 8008f74:	d10b      	bne.n	8008f8e <__gethex+0x2aa>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	9a02      	ldr	r2, [sp, #8]
 8008f7a:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008f7e:	6013      	str	r3, [r2, #0]
 8008f80:	2301      	movs	r3, #1
 8008f82:	6123      	str	r3, [r4, #16]
 8008f84:	f8ca 3000 	str.w	r3, [sl]
 8008f88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f8a:	601c      	str	r4, [r3, #0]
 8008f8c:	e734      	b.n	8008df8 <__gethex+0x114>
 8008f8e:	4620      	mov	r0, r4
 8008f90:	1e69      	subs	r1, r5, #1
 8008f92:	f7fe fcfc 	bl	800798e <__any_on>
 8008f96:	2800      	cmp	r0, #0
 8008f98:	d1ed      	bne.n	8008f76 <__gethex+0x292>
 8008f9a:	4621      	mov	r1, r4
 8008f9c:	4648      	mov	r0, r9
 8008f9e:	f7fe f8bb 	bl	8007118 <_Bfree>
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fa6:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008faa:	6013      	str	r3, [r2, #0]
 8008fac:	e724      	b.n	8008df8 <__gethex+0x114>
 8008fae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d1f2      	bne.n	8008f9a <__gethex+0x2b6>
 8008fb4:	e7df      	b.n	8008f76 <__gethex+0x292>
 8008fb6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d1dc      	bne.n	8008f76 <__gethex+0x292>
 8008fbc:	e7ed      	b.n	8008f9a <__gethex+0x2b6>
 8008fbe:	bf00      	nop
 8008fc0:	08009bbc 	.word	0x08009bbc
 8008fc4:	08009a4f 	.word	0x08009a4f
 8008fc8:	08009d66 	.word	0x08009d66
 8008fcc:	f106 38ff 	add.w	r8, r6, #4294967295
 8008fd0:	f1bb 0f00 	cmp.w	fp, #0
 8008fd4:	d133      	bne.n	800903e <__gethex+0x35a>
 8008fd6:	f1b8 0f00 	cmp.w	r8, #0
 8008fda:	d004      	beq.n	8008fe6 <__gethex+0x302>
 8008fdc:	4641      	mov	r1, r8
 8008fde:	4620      	mov	r0, r4
 8008fe0:	f7fe fcd5 	bl	800798e <__any_on>
 8008fe4:	4683      	mov	fp, r0
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008fec:	f008 081f 	and.w	r8, r8, #31
 8008ff0:	fa03 f308 	lsl.w	r3, r3, r8
 8008ff4:	f04f 0802 	mov.w	r8, #2
 8008ff8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008ffc:	4631      	mov	r1, r6
 8008ffe:	4213      	tst	r3, r2
 8009000:	4620      	mov	r0, r4
 8009002:	bf18      	it	ne
 8009004:	f04b 0b02 	orrne.w	fp, fp, #2
 8009008:	1bad      	subs	r5, r5, r6
 800900a:	f7ff fe03 	bl	8008c14 <rshift>
 800900e:	687e      	ldr	r6, [r7, #4]
 8009010:	f1bb 0f00 	cmp.w	fp, #0
 8009014:	d04a      	beq.n	80090ac <__gethex+0x3c8>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2b02      	cmp	r3, #2
 800901a:	d016      	beq.n	800904a <__gethex+0x366>
 800901c:	2b03      	cmp	r3, #3
 800901e:	d018      	beq.n	8009052 <__gethex+0x36e>
 8009020:	2b01      	cmp	r3, #1
 8009022:	d109      	bne.n	8009038 <__gethex+0x354>
 8009024:	f01b 0f02 	tst.w	fp, #2
 8009028:	d006      	beq.n	8009038 <__gethex+0x354>
 800902a:	f8da 3000 	ldr.w	r3, [sl]
 800902e:	ea4b 0b03 	orr.w	fp, fp, r3
 8009032:	f01b 0f01 	tst.w	fp, #1
 8009036:	d10f      	bne.n	8009058 <__gethex+0x374>
 8009038:	f048 0810 	orr.w	r8, r8, #16
 800903c:	e036      	b.n	80090ac <__gethex+0x3c8>
 800903e:	f04f 0b01 	mov.w	fp, #1
 8009042:	e7d0      	b.n	8008fe6 <__gethex+0x302>
 8009044:	f04f 0801 	mov.w	r8, #1
 8009048:	e7e2      	b.n	8009010 <__gethex+0x32c>
 800904a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800904c:	f1c3 0301 	rsb	r3, r3, #1
 8009050:	930f      	str	r3, [sp, #60]	; 0x3c
 8009052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009054:	2b00      	cmp	r3, #0
 8009056:	d0ef      	beq.n	8009038 <__gethex+0x354>
 8009058:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800905c:	f104 0214 	add.w	r2, r4, #20
 8009060:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	2300      	movs	r3, #0
 8009068:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800906c:	4694      	mov	ip, r2
 800906e:	f852 1b04 	ldr.w	r1, [r2], #4
 8009072:	f1b1 3fff 	cmp.w	r1, #4294967295
 8009076:	d01e      	beq.n	80090b6 <__gethex+0x3d2>
 8009078:	3101      	adds	r1, #1
 800907a:	f8cc 1000 	str.w	r1, [ip]
 800907e:	f1b8 0f02 	cmp.w	r8, #2
 8009082:	f104 0214 	add.w	r2, r4, #20
 8009086:	d13d      	bne.n	8009104 <__gethex+0x420>
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	3b01      	subs	r3, #1
 800908c:	42ab      	cmp	r3, r5
 800908e:	d10b      	bne.n	80090a8 <__gethex+0x3c4>
 8009090:	2301      	movs	r3, #1
 8009092:	1169      	asrs	r1, r5, #5
 8009094:	f005 051f 	and.w	r5, r5, #31
 8009098:	fa03 f505 	lsl.w	r5, r3, r5
 800909c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090a0:	421d      	tst	r5, r3
 80090a2:	bf18      	it	ne
 80090a4:	f04f 0801 	movne.w	r8, #1
 80090a8:	f048 0820 	orr.w	r8, r8, #32
 80090ac:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80090ae:	601c      	str	r4, [r3, #0]
 80090b0:	9b02      	ldr	r3, [sp, #8]
 80090b2:	601e      	str	r6, [r3, #0]
 80090b4:	e6a0      	b.n	8008df8 <__gethex+0x114>
 80090b6:	4290      	cmp	r0, r2
 80090b8:	f842 3c04 	str.w	r3, [r2, #-4]
 80090bc:	d8d6      	bhi.n	800906c <__gethex+0x388>
 80090be:	68a2      	ldr	r2, [r4, #8]
 80090c0:	4593      	cmp	fp, r2
 80090c2:	db17      	blt.n	80090f4 <__gethex+0x410>
 80090c4:	6861      	ldr	r1, [r4, #4]
 80090c6:	4648      	mov	r0, r9
 80090c8:	3101      	adds	r1, #1
 80090ca:	f7fd ffe5 	bl	8007098 <_Balloc>
 80090ce:	4682      	mov	sl, r0
 80090d0:	b918      	cbnz	r0, 80090da <__gethex+0x3f6>
 80090d2:	4602      	mov	r2, r0
 80090d4:	2184      	movs	r1, #132	; 0x84
 80090d6:	4b1a      	ldr	r3, [pc, #104]	; (8009140 <__gethex+0x45c>)
 80090d8:	e6b1      	b.n	8008e3e <__gethex+0x15a>
 80090da:	6922      	ldr	r2, [r4, #16]
 80090dc:	f104 010c 	add.w	r1, r4, #12
 80090e0:	3202      	adds	r2, #2
 80090e2:	0092      	lsls	r2, r2, #2
 80090e4:	300c      	adds	r0, #12
 80090e6:	f7ff fd4f 	bl	8008b88 <memcpy>
 80090ea:	4621      	mov	r1, r4
 80090ec:	4648      	mov	r0, r9
 80090ee:	f7fe f813 	bl	8007118 <_Bfree>
 80090f2:	4654      	mov	r4, sl
 80090f4:	6922      	ldr	r2, [r4, #16]
 80090f6:	1c51      	adds	r1, r2, #1
 80090f8:	6121      	str	r1, [r4, #16]
 80090fa:	2101      	movs	r1, #1
 80090fc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009100:	6151      	str	r1, [r2, #20]
 8009102:	e7bc      	b.n	800907e <__gethex+0x39a>
 8009104:	6921      	ldr	r1, [r4, #16]
 8009106:	4559      	cmp	r1, fp
 8009108:	dd0b      	ble.n	8009122 <__gethex+0x43e>
 800910a:	2101      	movs	r1, #1
 800910c:	4620      	mov	r0, r4
 800910e:	f7ff fd81 	bl	8008c14 <rshift>
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	3601      	adds	r6, #1
 8009116:	42b3      	cmp	r3, r6
 8009118:	f6ff aeda 	blt.w	8008ed0 <__gethex+0x1ec>
 800911c:	f04f 0801 	mov.w	r8, #1
 8009120:	e7c2      	b.n	80090a8 <__gethex+0x3c4>
 8009122:	f015 051f 	ands.w	r5, r5, #31
 8009126:	d0f9      	beq.n	800911c <__gethex+0x438>
 8009128:	9b01      	ldr	r3, [sp, #4]
 800912a:	f1c5 0520 	rsb	r5, r5, #32
 800912e:	441a      	add	r2, r3
 8009130:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8009134:	f7fe f8a2 	bl	800727c <__hi0bits>
 8009138:	42a8      	cmp	r0, r5
 800913a:	dbe6      	blt.n	800910a <__gethex+0x426>
 800913c:	e7ee      	b.n	800911c <__gethex+0x438>
 800913e:	bf00      	nop
 8009140:	08009a4f 	.word	0x08009a4f

08009144 <L_shift>:
 8009144:	f1c2 0208 	rsb	r2, r2, #8
 8009148:	0092      	lsls	r2, r2, #2
 800914a:	b570      	push	{r4, r5, r6, lr}
 800914c:	f1c2 0620 	rsb	r6, r2, #32
 8009150:	6843      	ldr	r3, [r0, #4]
 8009152:	6804      	ldr	r4, [r0, #0]
 8009154:	fa03 f506 	lsl.w	r5, r3, r6
 8009158:	432c      	orrs	r4, r5
 800915a:	40d3      	lsrs	r3, r2
 800915c:	6004      	str	r4, [r0, #0]
 800915e:	f840 3f04 	str.w	r3, [r0, #4]!
 8009162:	4288      	cmp	r0, r1
 8009164:	d3f4      	bcc.n	8009150 <L_shift+0xc>
 8009166:	bd70      	pop	{r4, r5, r6, pc}

08009168 <__match>:
 8009168:	b530      	push	{r4, r5, lr}
 800916a:	6803      	ldr	r3, [r0, #0]
 800916c:	3301      	adds	r3, #1
 800916e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009172:	b914      	cbnz	r4, 800917a <__match+0x12>
 8009174:	6003      	str	r3, [r0, #0]
 8009176:	2001      	movs	r0, #1
 8009178:	bd30      	pop	{r4, r5, pc}
 800917a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800917e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009182:	2d19      	cmp	r5, #25
 8009184:	bf98      	it	ls
 8009186:	3220      	addls	r2, #32
 8009188:	42a2      	cmp	r2, r4
 800918a:	d0f0      	beq.n	800916e <__match+0x6>
 800918c:	2000      	movs	r0, #0
 800918e:	e7f3      	b.n	8009178 <__match+0x10>

08009190 <__hexnan>:
 8009190:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009194:	2500      	movs	r5, #0
 8009196:	680b      	ldr	r3, [r1, #0]
 8009198:	4682      	mov	sl, r0
 800919a:	115e      	asrs	r6, r3, #5
 800919c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80091a0:	f013 031f 	ands.w	r3, r3, #31
 80091a4:	bf18      	it	ne
 80091a6:	3604      	addne	r6, #4
 80091a8:	1f37      	subs	r7, r6, #4
 80091aa:	4690      	mov	r8, r2
 80091ac:	46b9      	mov	r9, r7
 80091ae:	463c      	mov	r4, r7
 80091b0:	46ab      	mov	fp, r5
 80091b2:	b087      	sub	sp, #28
 80091b4:	6801      	ldr	r1, [r0, #0]
 80091b6:	9301      	str	r3, [sp, #4]
 80091b8:	f846 5c04 	str.w	r5, [r6, #-4]
 80091bc:	9502      	str	r5, [sp, #8]
 80091be:	784a      	ldrb	r2, [r1, #1]
 80091c0:	1c4b      	adds	r3, r1, #1
 80091c2:	9303      	str	r3, [sp, #12]
 80091c4:	b342      	cbz	r2, 8009218 <__hexnan+0x88>
 80091c6:	4610      	mov	r0, r2
 80091c8:	9105      	str	r1, [sp, #20]
 80091ca:	9204      	str	r2, [sp, #16]
 80091cc:	f7ff fd75 	bl	8008cba <__hexdig_fun>
 80091d0:	2800      	cmp	r0, #0
 80091d2:	d14f      	bne.n	8009274 <__hexnan+0xe4>
 80091d4:	9a04      	ldr	r2, [sp, #16]
 80091d6:	9905      	ldr	r1, [sp, #20]
 80091d8:	2a20      	cmp	r2, #32
 80091da:	d818      	bhi.n	800920e <__hexnan+0x7e>
 80091dc:	9b02      	ldr	r3, [sp, #8]
 80091de:	459b      	cmp	fp, r3
 80091e0:	dd13      	ble.n	800920a <__hexnan+0x7a>
 80091e2:	454c      	cmp	r4, r9
 80091e4:	d206      	bcs.n	80091f4 <__hexnan+0x64>
 80091e6:	2d07      	cmp	r5, #7
 80091e8:	dc04      	bgt.n	80091f4 <__hexnan+0x64>
 80091ea:	462a      	mov	r2, r5
 80091ec:	4649      	mov	r1, r9
 80091ee:	4620      	mov	r0, r4
 80091f0:	f7ff ffa8 	bl	8009144 <L_shift>
 80091f4:	4544      	cmp	r4, r8
 80091f6:	d950      	bls.n	800929a <__hexnan+0x10a>
 80091f8:	2300      	movs	r3, #0
 80091fa:	f1a4 0904 	sub.w	r9, r4, #4
 80091fe:	f844 3c04 	str.w	r3, [r4, #-4]
 8009202:	461d      	mov	r5, r3
 8009204:	464c      	mov	r4, r9
 8009206:	f8cd b008 	str.w	fp, [sp, #8]
 800920a:	9903      	ldr	r1, [sp, #12]
 800920c:	e7d7      	b.n	80091be <__hexnan+0x2e>
 800920e:	2a29      	cmp	r2, #41	; 0x29
 8009210:	d155      	bne.n	80092be <__hexnan+0x12e>
 8009212:	3102      	adds	r1, #2
 8009214:	f8ca 1000 	str.w	r1, [sl]
 8009218:	f1bb 0f00 	cmp.w	fp, #0
 800921c:	d04f      	beq.n	80092be <__hexnan+0x12e>
 800921e:	454c      	cmp	r4, r9
 8009220:	d206      	bcs.n	8009230 <__hexnan+0xa0>
 8009222:	2d07      	cmp	r5, #7
 8009224:	dc04      	bgt.n	8009230 <__hexnan+0xa0>
 8009226:	462a      	mov	r2, r5
 8009228:	4649      	mov	r1, r9
 800922a:	4620      	mov	r0, r4
 800922c:	f7ff ff8a 	bl	8009144 <L_shift>
 8009230:	4544      	cmp	r4, r8
 8009232:	d934      	bls.n	800929e <__hexnan+0x10e>
 8009234:	4623      	mov	r3, r4
 8009236:	f1a8 0204 	sub.w	r2, r8, #4
 800923a:	f853 1b04 	ldr.w	r1, [r3], #4
 800923e:	429f      	cmp	r7, r3
 8009240:	f842 1f04 	str.w	r1, [r2, #4]!
 8009244:	d2f9      	bcs.n	800923a <__hexnan+0xaa>
 8009246:	1b3b      	subs	r3, r7, r4
 8009248:	f023 0303 	bic.w	r3, r3, #3
 800924c:	3304      	adds	r3, #4
 800924e:	3e03      	subs	r6, #3
 8009250:	3401      	adds	r4, #1
 8009252:	42a6      	cmp	r6, r4
 8009254:	bf38      	it	cc
 8009256:	2304      	movcc	r3, #4
 8009258:	2200      	movs	r2, #0
 800925a:	4443      	add	r3, r8
 800925c:	f843 2b04 	str.w	r2, [r3], #4
 8009260:	429f      	cmp	r7, r3
 8009262:	d2fb      	bcs.n	800925c <__hexnan+0xcc>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	b91b      	cbnz	r3, 8009270 <__hexnan+0xe0>
 8009268:	4547      	cmp	r7, r8
 800926a:	d126      	bne.n	80092ba <__hexnan+0x12a>
 800926c:	2301      	movs	r3, #1
 800926e:	603b      	str	r3, [r7, #0]
 8009270:	2005      	movs	r0, #5
 8009272:	e025      	b.n	80092c0 <__hexnan+0x130>
 8009274:	3501      	adds	r5, #1
 8009276:	2d08      	cmp	r5, #8
 8009278:	f10b 0b01 	add.w	fp, fp, #1
 800927c:	dd06      	ble.n	800928c <__hexnan+0xfc>
 800927e:	4544      	cmp	r4, r8
 8009280:	d9c3      	bls.n	800920a <__hexnan+0x7a>
 8009282:	2300      	movs	r3, #0
 8009284:	2501      	movs	r5, #1
 8009286:	f844 3c04 	str.w	r3, [r4, #-4]
 800928a:	3c04      	subs	r4, #4
 800928c:	6822      	ldr	r2, [r4, #0]
 800928e:	f000 000f 	and.w	r0, r0, #15
 8009292:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009296:	6020      	str	r0, [r4, #0]
 8009298:	e7b7      	b.n	800920a <__hexnan+0x7a>
 800929a:	2508      	movs	r5, #8
 800929c:	e7b5      	b.n	800920a <__hexnan+0x7a>
 800929e:	9b01      	ldr	r3, [sp, #4]
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d0df      	beq.n	8009264 <__hexnan+0xd4>
 80092a4:	f04f 32ff 	mov.w	r2, #4294967295
 80092a8:	f1c3 0320 	rsb	r3, r3, #32
 80092ac:	40da      	lsrs	r2, r3
 80092ae:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80092b2:	4013      	ands	r3, r2
 80092b4:	f846 3c04 	str.w	r3, [r6, #-4]
 80092b8:	e7d4      	b.n	8009264 <__hexnan+0xd4>
 80092ba:	3f04      	subs	r7, #4
 80092bc:	e7d2      	b.n	8009264 <__hexnan+0xd4>
 80092be:	2004      	movs	r0, #4
 80092c0:	b007      	add	sp, #28
 80092c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080092c6 <__ascii_mbtowc>:
 80092c6:	b082      	sub	sp, #8
 80092c8:	b901      	cbnz	r1, 80092cc <__ascii_mbtowc+0x6>
 80092ca:	a901      	add	r1, sp, #4
 80092cc:	b142      	cbz	r2, 80092e0 <__ascii_mbtowc+0x1a>
 80092ce:	b14b      	cbz	r3, 80092e4 <__ascii_mbtowc+0x1e>
 80092d0:	7813      	ldrb	r3, [r2, #0]
 80092d2:	600b      	str	r3, [r1, #0]
 80092d4:	7812      	ldrb	r2, [r2, #0]
 80092d6:	1e10      	subs	r0, r2, #0
 80092d8:	bf18      	it	ne
 80092da:	2001      	movne	r0, #1
 80092dc:	b002      	add	sp, #8
 80092de:	4770      	bx	lr
 80092e0:	4610      	mov	r0, r2
 80092e2:	e7fb      	b.n	80092dc <__ascii_mbtowc+0x16>
 80092e4:	f06f 0001 	mvn.w	r0, #1
 80092e8:	e7f8      	b.n	80092dc <__ascii_mbtowc+0x16>

080092ea <_realloc_r>:
 80092ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092ee:	4680      	mov	r8, r0
 80092f0:	4614      	mov	r4, r2
 80092f2:	460e      	mov	r6, r1
 80092f4:	b921      	cbnz	r1, 8009300 <_realloc_r+0x16>
 80092f6:	4611      	mov	r1, r2
 80092f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092fc:	f7fd be40 	b.w	8006f80 <_malloc_r>
 8009300:	b92a      	cbnz	r2, 800930e <_realloc_r+0x24>
 8009302:	f7fd fdcd 	bl	8006ea0 <_free_r>
 8009306:	4625      	mov	r5, r4
 8009308:	4628      	mov	r0, r5
 800930a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800930e:	f000 f842 	bl	8009396 <_malloc_usable_size_r>
 8009312:	4284      	cmp	r4, r0
 8009314:	4607      	mov	r7, r0
 8009316:	d802      	bhi.n	800931e <_realloc_r+0x34>
 8009318:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800931c:	d812      	bhi.n	8009344 <_realloc_r+0x5a>
 800931e:	4621      	mov	r1, r4
 8009320:	4640      	mov	r0, r8
 8009322:	f7fd fe2d 	bl	8006f80 <_malloc_r>
 8009326:	4605      	mov	r5, r0
 8009328:	2800      	cmp	r0, #0
 800932a:	d0ed      	beq.n	8009308 <_realloc_r+0x1e>
 800932c:	42bc      	cmp	r4, r7
 800932e:	4622      	mov	r2, r4
 8009330:	4631      	mov	r1, r6
 8009332:	bf28      	it	cs
 8009334:	463a      	movcs	r2, r7
 8009336:	f7ff fc27 	bl	8008b88 <memcpy>
 800933a:	4631      	mov	r1, r6
 800933c:	4640      	mov	r0, r8
 800933e:	f7fd fdaf 	bl	8006ea0 <_free_r>
 8009342:	e7e1      	b.n	8009308 <_realloc_r+0x1e>
 8009344:	4635      	mov	r5, r6
 8009346:	e7df      	b.n	8009308 <_realloc_r+0x1e>

08009348 <__ascii_wctomb>:
 8009348:	4603      	mov	r3, r0
 800934a:	4608      	mov	r0, r1
 800934c:	b141      	cbz	r1, 8009360 <__ascii_wctomb+0x18>
 800934e:	2aff      	cmp	r2, #255	; 0xff
 8009350:	d904      	bls.n	800935c <__ascii_wctomb+0x14>
 8009352:	228a      	movs	r2, #138	; 0x8a
 8009354:	f04f 30ff 	mov.w	r0, #4294967295
 8009358:	601a      	str	r2, [r3, #0]
 800935a:	4770      	bx	lr
 800935c:	2001      	movs	r0, #1
 800935e:	700a      	strb	r2, [r1, #0]
 8009360:	4770      	bx	lr
	...

08009364 <fiprintf>:
 8009364:	b40e      	push	{r1, r2, r3}
 8009366:	b503      	push	{r0, r1, lr}
 8009368:	4601      	mov	r1, r0
 800936a:	ab03      	add	r3, sp, #12
 800936c:	4805      	ldr	r0, [pc, #20]	; (8009384 <fiprintf+0x20>)
 800936e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009372:	6800      	ldr	r0, [r0, #0]
 8009374:	9301      	str	r3, [sp, #4]
 8009376:	f000 f83d 	bl	80093f4 <_vfiprintf_r>
 800937a:	b002      	add	sp, #8
 800937c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009380:	b003      	add	sp, #12
 8009382:	4770      	bx	lr
 8009384:	20000068 	.word	0x20000068

08009388 <abort>:
 8009388:	2006      	movs	r0, #6
 800938a:	b508      	push	{r3, lr}
 800938c:	f000 fa0a 	bl	80097a4 <raise>
 8009390:	2001      	movs	r0, #1
 8009392:	f7f8 fe34 	bl	8001ffe <_exit>

08009396 <_malloc_usable_size_r>:
 8009396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800939a:	1f18      	subs	r0, r3, #4
 800939c:	2b00      	cmp	r3, #0
 800939e:	bfbc      	itt	lt
 80093a0:	580b      	ldrlt	r3, [r1, r0]
 80093a2:	18c0      	addlt	r0, r0, r3
 80093a4:	4770      	bx	lr

080093a6 <__sfputc_r>:
 80093a6:	6893      	ldr	r3, [r2, #8]
 80093a8:	b410      	push	{r4}
 80093aa:	3b01      	subs	r3, #1
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	6093      	str	r3, [r2, #8]
 80093b0:	da07      	bge.n	80093c2 <__sfputc_r+0x1c>
 80093b2:	6994      	ldr	r4, [r2, #24]
 80093b4:	42a3      	cmp	r3, r4
 80093b6:	db01      	blt.n	80093bc <__sfputc_r+0x16>
 80093b8:	290a      	cmp	r1, #10
 80093ba:	d102      	bne.n	80093c2 <__sfputc_r+0x1c>
 80093bc:	bc10      	pop	{r4}
 80093be:	f000 b933 	b.w	8009628 <__swbuf_r>
 80093c2:	6813      	ldr	r3, [r2, #0]
 80093c4:	1c58      	adds	r0, r3, #1
 80093c6:	6010      	str	r0, [r2, #0]
 80093c8:	7019      	strb	r1, [r3, #0]
 80093ca:	4608      	mov	r0, r1
 80093cc:	bc10      	pop	{r4}
 80093ce:	4770      	bx	lr

080093d0 <__sfputs_r>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	4606      	mov	r6, r0
 80093d4:	460f      	mov	r7, r1
 80093d6:	4614      	mov	r4, r2
 80093d8:	18d5      	adds	r5, r2, r3
 80093da:	42ac      	cmp	r4, r5
 80093dc:	d101      	bne.n	80093e2 <__sfputs_r+0x12>
 80093de:	2000      	movs	r0, #0
 80093e0:	e007      	b.n	80093f2 <__sfputs_r+0x22>
 80093e2:	463a      	mov	r2, r7
 80093e4:	4630      	mov	r0, r6
 80093e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80093ea:	f7ff ffdc 	bl	80093a6 <__sfputc_r>
 80093ee:	1c43      	adds	r3, r0, #1
 80093f0:	d1f3      	bne.n	80093da <__sfputs_r+0xa>
 80093f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080093f4 <_vfiprintf_r>:
 80093f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f8:	460d      	mov	r5, r1
 80093fa:	4614      	mov	r4, r2
 80093fc:	4698      	mov	r8, r3
 80093fe:	4606      	mov	r6, r0
 8009400:	b09d      	sub	sp, #116	; 0x74
 8009402:	b118      	cbz	r0, 800940c <_vfiprintf_r+0x18>
 8009404:	6a03      	ldr	r3, [r0, #32]
 8009406:	b90b      	cbnz	r3, 800940c <_vfiprintf_r+0x18>
 8009408:	f7fc fd90 	bl	8005f2c <__sinit>
 800940c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800940e:	07d9      	lsls	r1, r3, #31
 8009410:	d405      	bmi.n	800941e <_vfiprintf_r+0x2a>
 8009412:	89ab      	ldrh	r3, [r5, #12]
 8009414:	059a      	lsls	r2, r3, #22
 8009416:	d402      	bmi.n	800941e <_vfiprintf_r+0x2a>
 8009418:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800941a:	f7fc febd 	bl	8006198 <__retarget_lock_acquire_recursive>
 800941e:	89ab      	ldrh	r3, [r5, #12]
 8009420:	071b      	lsls	r3, r3, #28
 8009422:	d501      	bpl.n	8009428 <_vfiprintf_r+0x34>
 8009424:	692b      	ldr	r3, [r5, #16]
 8009426:	b99b      	cbnz	r3, 8009450 <_vfiprintf_r+0x5c>
 8009428:	4629      	mov	r1, r5
 800942a:	4630      	mov	r0, r6
 800942c:	f000 f93a 	bl	80096a4 <__swsetup_r>
 8009430:	b170      	cbz	r0, 8009450 <_vfiprintf_r+0x5c>
 8009432:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009434:	07dc      	lsls	r4, r3, #31
 8009436:	d504      	bpl.n	8009442 <_vfiprintf_r+0x4e>
 8009438:	f04f 30ff 	mov.w	r0, #4294967295
 800943c:	b01d      	add	sp, #116	; 0x74
 800943e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009442:	89ab      	ldrh	r3, [r5, #12]
 8009444:	0598      	lsls	r0, r3, #22
 8009446:	d4f7      	bmi.n	8009438 <_vfiprintf_r+0x44>
 8009448:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800944a:	f7fc fea6 	bl	800619a <__retarget_lock_release_recursive>
 800944e:	e7f3      	b.n	8009438 <_vfiprintf_r+0x44>
 8009450:	2300      	movs	r3, #0
 8009452:	9309      	str	r3, [sp, #36]	; 0x24
 8009454:	2320      	movs	r3, #32
 8009456:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800945a:	2330      	movs	r3, #48	; 0x30
 800945c:	f04f 0901 	mov.w	r9, #1
 8009460:	f8cd 800c 	str.w	r8, [sp, #12]
 8009464:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8009614 <_vfiprintf_r+0x220>
 8009468:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800946c:	4623      	mov	r3, r4
 800946e:	469a      	mov	sl, r3
 8009470:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009474:	b10a      	cbz	r2, 800947a <_vfiprintf_r+0x86>
 8009476:	2a25      	cmp	r2, #37	; 0x25
 8009478:	d1f9      	bne.n	800946e <_vfiprintf_r+0x7a>
 800947a:	ebba 0b04 	subs.w	fp, sl, r4
 800947e:	d00b      	beq.n	8009498 <_vfiprintf_r+0xa4>
 8009480:	465b      	mov	r3, fp
 8009482:	4622      	mov	r2, r4
 8009484:	4629      	mov	r1, r5
 8009486:	4630      	mov	r0, r6
 8009488:	f7ff ffa2 	bl	80093d0 <__sfputs_r>
 800948c:	3001      	adds	r0, #1
 800948e:	f000 80a9 	beq.w	80095e4 <_vfiprintf_r+0x1f0>
 8009492:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009494:	445a      	add	r2, fp
 8009496:	9209      	str	r2, [sp, #36]	; 0x24
 8009498:	f89a 3000 	ldrb.w	r3, [sl]
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 80a1 	beq.w	80095e4 <_vfiprintf_r+0x1f0>
 80094a2:	2300      	movs	r3, #0
 80094a4:	f04f 32ff 	mov.w	r2, #4294967295
 80094a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80094ac:	f10a 0a01 	add.w	sl, sl, #1
 80094b0:	9304      	str	r3, [sp, #16]
 80094b2:	9307      	str	r3, [sp, #28]
 80094b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80094b8:	931a      	str	r3, [sp, #104]	; 0x68
 80094ba:	4654      	mov	r4, sl
 80094bc:	2205      	movs	r2, #5
 80094be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80094c2:	4854      	ldr	r0, [pc, #336]	; (8009614 <_vfiprintf_r+0x220>)
 80094c4:	f7fc fe6a 	bl	800619c <memchr>
 80094c8:	9a04      	ldr	r2, [sp, #16]
 80094ca:	b9d8      	cbnz	r0, 8009504 <_vfiprintf_r+0x110>
 80094cc:	06d1      	lsls	r1, r2, #27
 80094ce:	bf44      	itt	mi
 80094d0:	2320      	movmi	r3, #32
 80094d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094d6:	0713      	lsls	r3, r2, #28
 80094d8:	bf44      	itt	mi
 80094da:	232b      	movmi	r3, #43	; 0x2b
 80094dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094e0:	f89a 3000 	ldrb.w	r3, [sl]
 80094e4:	2b2a      	cmp	r3, #42	; 0x2a
 80094e6:	d015      	beq.n	8009514 <_vfiprintf_r+0x120>
 80094e8:	4654      	mov	r4, sl
 80094ea:	2000      	movs	r0, #0
 80094ec:	f04f 0c0a 	mov.w	ip, #10
 80094f0:	9a07      	ldr	r2, [sp, #28]
 80094f2:	4621      	mov	r1, r4
 80094f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094f8:	3b30      	subs	r3, #48	; 0x30
 80094fa:	2b09      	cmp	r3, #9
 80094fc:	d94d      	bls.n	800959a <_vfiprintf_r+0x1a6>
 80094fe:	b1b0      	cbz	r0, 800952e <_vfiprintf_r+0x13a>
 8009500:	9207      	str	r2, [sp, #28]
 8009502:	e014      	b.n	800952e <_vfiprintf_r+0x13a>
 8009504:	eba0 0308 	sub.w	r3, r0, r8
 8009508:	fa09 f303 	lsl.w	r3, r9, r3
 800950c:	4313      	orrs	r3, r2
 800950e:	46a2      	mov	sl, r4
 8009510:	9304      	str	r3, [sp, #16]
 8009512:	e7d2      	b.n	80094ba <_vfiprintf_r+0xc6>
 8009514:	9b03      	ldr	r3, [sp, #12]
 8009516:	1d19      	adds	r1, r3, #4
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	9103      	str	r1, [sp, #12]
 800951c:	2b00      	cmp	r3, #0
 800951e:	bfbb      	ittet	lt
 8009520:	425b      	neglt	r3, r3
 8009522:	f042 0202 	orrlt.w	r2, r2, #2
 8009526:	9307      	strge	r3, [sp, #28]
 8009528:	9307      	strlt	r3, [sp, #28]
 800952a:	bfb8      	it	lt
 800952c:	9204      	strlt	r2, [sp, #16]
 800952e:	7823      	ldrb	r3, [r4, #0]
 8009530:	2b2e      	cmp	r3, #46	; 0x2e
 8009532:	d10c      	bne.n	800954e <_vfiprintf_r+0x15a>
 8009534:	7863      	ldrb	r3, [r4, #1]
 8009536:	2b2a      	cmp	r3, #42	; 0x2a
 8009538:	d134      	bne.n	80095a4 <_vfiprintf_r+0x1b0>
 800953a:	9b03      	ldr	r3, [sp, #12]
 800953c:	3402      	adds	r4, #2
 800953e:	1d1a      	adds	r2, r3, #4
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	9203      	str	r2, [sp, #12]
 8009544:	2b00      	cmp	r3, #0
 8009546:	bfb8      	it	lt
 8009548:	f04f 33ff 	movlt.w	r3, #4294967295
 800954c:	9305      	str	r3, [sp, #20]
 800954e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009618 <_vfiprintf_r+0x224>
 8009552:	2203      	movs	r2, #3
 8009554:	4650      	mov	r0, sl
 8009556:	7821      	ldrb	r1, [r4, #0]
 8009558:	f7fc fe20 	bl	800619c <memchr>
 800955c:	b138      	cbz	r0, 800956e <_vfiprintf_r+0x17a>
 800955e:	2240      	movs	r2, #64	; 0x40
 8009560:	9b04      	ldr	r3, [sp, #16]
 8009562:	eba0 000a 	sub.w	r0, r0, sl
 8009566:	4082      	lsls	r2, r0
 8009568:	4313      	orrs	r3, r2
 800956a:	3401      	adds	r4, #1
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009572:	2206      	movs	r2, #6
 8009574:	4829      	ldr	r0, [pc, #164]	; (800961c <_vfiprintf_r+0x228>)
 8009576:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800957a:	f7fc fe0f 	bl	800619c <memchr>
 800957e:	2800      	cmp	r0, #0
 8009580:	d03f      	beq.n	8009602 <_vfiprintf_r+0x20e>
 8009582:	4b27      	ldr	r3, [pc, #156]	; (8009620 <_vfiprintf_r+0x22c>)
 8009584:	bb1b      	cbnz	r3, 80095ce <_vfiprintf_r+0x1da>
 8009586:	9b03      	ldr	r3, [sp, #12]
 8009588:	3307      	adds	r3, #7
 800958a:	f023 0307 	bic.w	r3, r3, #7
 800958e:	3308      	adds	r3, #8
 8009590:	9303      	str	r3, [sp, #12]
 8009592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009594:	443b      	add	r3, r7
 8009596:	9309      	str	r3, [sp, #36]	; 0x24
 8009598:	e768      	b.n	800946c <_vfiprintf_r+0x78>
 800959a:	460c      	mov	r4, r1
 800959c:	2001      	movs	r0, #1
 800959e:	fb0c 3202 	mla	r2, ip, r2, r3
 80095a2:	e7a6      	b.n	80094f2 <_vfiprintf_r+0xfe>
 80095a4:	2300      	movs	r3, #0
 80095a6:	f04f 0c0a 	mov.w	ip, #10
 80095aa:	4619      	mov	r1, r3
 80095ac:	3401      	adds	r4, #1
 80095ae:	9305      	str	r3, [sp, #20]
 80095b0:	4620      	mov	r0, r4
 80095b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095b6:	3a30      	subs	r2, #48	; 0x30
 80095b8:	2a09      	cmp	r2, #9
 80095ba:	d903      	bls.n	80095c4 <_vfiprintf_r+0x1d0>
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d0c6      	beq.n	800954e <_vfiprintf_r+0x15a>
 80095c0:	9105      	str	r1, [sp, #20]
 80095c2:	e7c4      	b.n	800954e <_vfiprintf_r+0x15a>
 80095c4:	4604      	mov	r4, r0
 80095c6:	2301      	movs	r3, #1
 80095c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80095cc:	e7f0      	b.n	80095b0 <_vfiprintf_r+0x1bc>
 80095ce:	ab03      	add	r3, sp, #12
 80095d0:	9300      	str	r3, [sp, #0]
 80095d2:	462a      	mov	r2, r5
 80095d4:	4630      	mov	r0, r6
 80095d6:	4b13      	ldr	r3, [pc, #76]	; (8009624 <_vfiprintf_r+0x230>)
 80095d8:	a904      	add	r1, sp, #16
 80095da:	f7fb fe5d 	bl	8005298 <_printf_float>
 80095de:	4607      	mov	r7, r0
 80095e0:	1c78      	adds	r0, r7, #1
 80095e2:	d1d6      	bne.n	8009592 <_vfiprintf_r+0x19e>
 80095e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095e6:	07d9      	lsls	r1, r3, #31
 80095e8:	d405      	bmi.n	80095f6 <_vfiprintf_r+0x202>
 80095ea:	89ab      	ldrh	r3, [r5, #12]
 80095ec:	059a      	lsls	r2, r3, #22
 80095ee:	d402      	bmi.n	80095f6 <_vfiprintf_r+0x202>
 80095f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095f2:	f7fc fdd2 	bl	800619a <__retarget_lock_release_recursive>
 80095f6:	89ab      	ldrh	r3, [r5, #12]
 80095f8:	065b      	lsls	r3, r3, #25
 80095fa:	f53f af1d 	bmi.w	8009438 <_vfiprintf_r+0x44>
 80095fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009600:	e71c      	b.n	800943c <_vfiprintf_r+0x48>
 8009602:	ab03      	add	r3, sp, #12
 8009604:	9300      	str	r3, [sp, #0]
 8009606:	462a      	mov	r2, r5
 8009608:	4630      	mov	r0, r6
 800960a:	4b06      	ldr	r3, [pc, #24]	; (8009624 <_vfiprintf_r+0x230>)
 800960c:	a904      	add	r1, sp, #16
 800960e:	f7fc f8e3 	bl	80057d8 <_printf_i>
 8009612:	e7e4      	b.n	80095de <_vfiprintf_r+0x1ea>
 8009614:	08009d11 	.word	0x08009d11
 8009618:	08009d17 	.word	0x08009d17
 800961c:	08009d1b 	.word	0x08009d1b
 8009620:	08005299 	.word	0x08005299
 8009624:	080093d1 	.word	0x080093d1

08009628 <__swbuf_r>:
 8009628:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800962a:	460e      	mov	r6, r1
 800962c:	4614      	mov	r4, r2
 800962e:	4605      	mov	r5, r0
 8009630:	b118      	cbz	r0, 800963a <__swbuf_r+0x12>
 8009632:	6a03      	ldr	r3, [r0, #32]
 8009634:	b90b      	cbnz	r3, 800963a <__swbuf_r+0x12>
 8009636:	f7fc fc79 	bl	8005f2c <__sinit>
 800963a:	69a3      	ldr	r3, [r4, #24]
 800963c:	60a3      	str	r3, [r4, #8]
 800963e:	89a3      	ldrh	r3, [r4, #12]
 8009640:	071a      	lsls	r2, r3, #28
 8009642:	d525      	bpl.n	8009690 <__swbuf_r+0x68>
 8009644:	6923      	ldr	r3, [r4, #16]
 8009646:	b31b      	cbz	r3, 8009690 <__swbuf_r+0x68>
 8009648:	6823      	ldr	r3, [r4, #0]
 800964a:	6922      	ldr	r2, [r4, #16]
 800964c:	b2f6      	uxtb	r6, r6
 800964e:	1a98      	subs	r0, r3, r2
 8009650:	6963      	ldr	r3, [r4, #20]
 8009652:	4637      	mov	r7, r6
 8009654:	4283      	cmp	r3, r0
 8009656:	dc04      	bgt.n	8009662 <__swbuf_r+0x3a>
 8009658:	4621      	mov	r1, r4
 800965a:	4628      	mov	r0, r5
 800965c:	f7ff fa30 	bl	8008ac0 <_fflush_r>
 8009660:	b9e0      	cbnz	r0, 800969c <__swbuf_r+0x74>
 8009662:	68a3      	ldr	r3, [r4, #8]
 8009664:	3b01      	subs	r3, #1
 8009666:	60a3      	str	r3, [r4, #8]
 8009668:	6823      	ldr	r3, [r4, #0]
 800966a:	1c5a      	adds	r2, r3, #1
 800966c:	6022      	str	r2, [r4, #0]
 800966e:	701e      	strb	r6, [r3, #0]
 8009670:	6962      	ldr	r2, [r4, #20]
 8009672:	1c43      	adds	r3, r0, #1
 8009674:	429a      	cmp	r2, r3
 8009676:	d004      	beq.n	8009682 <__swbuf_r+0x5a>
 8009678:	89a3      	ldrh	r3, [r4, #12]
 800967a:	07db      	lsls	r3, r3, #31
 800967c:	d506      	bpl.n	800968c <__swbuf_r+0x64>
 800967e:	2e0a      	cmp	r6, #10
 8009680:	d104      	bne.n	800968c <__swbuf_r+0x64>
 8009682:	4621      	mov	r1, r4
 8009684:	4628      	mov	r0, r5
 8009686:	f7ff fa1b 	bl	8008ac0 <_fflush_r>
 800968a:	b938      	cbnz	r0, 800969c <__swbuf_r+0x74>
 800968c:	4638      	mov	r0, r7
 800968e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009690:	4621      	mov	r1, r4
 8009692:	4628      	mov	r0, r5
 8009694:	f000 f806 	bl	80096a4 <__swsetup_r>
 8009698:	2800      	cmp	r0, #0
 800969a:	d0d5      	beq.n	8009648 <__swbuf_r+0x20>
 800969c:	f04f 37ff 	mov.w	r7, #4294967295
 80096a0:	e7f4      	b.n	800968c <__swbuf_r+0x64>
	...

080096a4 <__swsetup_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4b2a      	ldr	r3, [pc, #168]	; (8009750 <__swsetup_r+0xac>)
 80096a8:	4605      	mov	r5, r0
 80096aa:	6818      	ldr	r0, [r3, #0]
 80096ac:	460c      	mov	r4, r1
 80096ae:	b118      	cbz	r0, 80096b8 <__swsetup_r+0x14>
 80096b0:	6a03      	ldr	r3, [r0, #32]
 80096b2:	b90b      	cbnz	r3, 80096b8 <__swsetup_r+0x14>
 80096b4:	f7fc fc3a 	bl	8005f2c <__sinit>
 80096b8:	89a3      	ldrh	r3, [r4, #12]
 80096ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096be:	0718      	lsls	r0, r3, #28
 80096c0:	d422      	bmi.n	8009708 <__swsetup_r+0x64>
 80096c2:	06d9      	lsls	r1, r3, #27
 80096c4:	d407      	bmi.n	80096d6 <__swsetup_r+0x32>
 80096c6:	2309      	movs	r3, #9
 80096c8:	602b      	str	r3, [r5, #0]
 80096ca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80096ce:	f04f 30ff 	mov.w	r0, #4294967295
 80096d2:	81a3      	strh	r3, [r4, #12]
 80096d4:	e034      	b.n	8009740 <__swsetup_r+0x9c>
 80096d6:	0758      	lsls	r0, r3, #29
 80096d8:	d512      	bpl.n	8009700 <__swsetup_r+0x5c>
 80096da:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096dc:	b141      	cbz	r1, 80096f0 <__swsetup_r+0x4c>
 80096de:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096e2:	4299      	cmp	r1, r3
 80096e4:	d002      	beq.n	80096ec <__swsetup_r+0x48>
 80096e6:	4628      	mov	r0, r5
 80096e8:	f7fd fbda 	bl	8006ea0 <_free_r>
 80096ec:	2300      	movs	r3, #0
 80096ee:	6363      	str	r3, [r4, #52]	; 0x34
 80096f0:	89a3      	ldrh	r3, [r4, #12]
 80096f2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80096f6:	81a3      	strh	r3, [r4, #12]
 80096f8:	2300      	movs	r3, #0
 80096fa:	6063      	str	r3, [r4, #4]
 80096fc:	6923      	ldr	r3, [r4, #16]
 80096fe:	6023      	str	r3, [r4, #0]
 8009700:	89a3      	ldrh	r3, [r4, #12]
 8009702:	f043 0308 	orr.w	r3, r3, #8
 8009706:	81a3      	strh	r3, [r4, #12]
 8009708:	6923      	ldr	r3, [r4, #16]
 800970a:	b94b      	cbnz	r3, 8009720 <__swsetup_r+0x7c>
 800970c:	89a3      	ldrh	r3, [r4, #12]
 800970e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009716:	d003      	beq.n	8009720 <__swsetup_r+0x7c>
 8009718:	4621      	mov	r1, r4
 800971a:	4628      	mov	r0, r5
 800971c:	f000 f883 	bl	8009826 <__smakebuf_r>
 8009720:	89a0      	ldrh	r0, [r4, #12]
 8009722:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009726:	f010 0301 	ands.w	r3, r0, #1
 800972a:	d00a      	beq.n	8009742 <__swsetup_r+0x9e>
 800972c:	2300      	movs	r3, #0
 800972e:	60a3      	str	r3, [r4, #8]
 8009730:	6963      	ldr	r3, [r4, #20]
 8009732:	425b      	negs	r3, r3
 8009734:	61a3      	str	r3, [r4, #24]
 8009736:	6923      	ldr	r3, [r4, #16]
 8009738:	b943      	cbnz	r3, 800974c <__swsetup_r+0xa8>
 800973a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800973e:	d1c4      	bne.n	80096ca <__swsetup_r+0x26>
 8009740:	bd38      	pop	{r3, r4, r5, pc}
 8009742:	0781      	lsls	r1, r0, #30
 8009744:	bf58      	it	pl
 8009746:	6963      	ldrpl	r3, [r4, #20]
 8009748:	60a3      	str	r3, [r4, #8]
 800974a:	e7f4      	b.n	8009736 <__swsetup_r+0x92>
 800974c:	2000      	movs	r0, #0
 800974e:	e7f7      	b.n	8009740 <__swsetup_r+0x9c>
 8009750:	20000068 	.word	0x20000068

08009754 <_raise_r>:
 8009754:	291f      	cmp	r1, #31
 8009756:	b538      	push	{r3, r4, r5, lr}
 8009758:	4604      	mov	r4, r0
 800975a:	460d      	mov	r5, r1
 800975c:	d904      	bls.n	8009768 <_raise_r+0x14>
 800975e:	2316      	movs	r3, #22
 8009760:	6003      	str	r3, [r0, #0]
 8009762:	f04f 30ff 	mov.w	r0, #4294967295
 8009766:	bd38      	pop	{r3, r4, r5, pc}
 8009768:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800976a:	b112      	cbz	r2, 8009772 <_raise_r+0x1e>
 800976c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009770:	b94b      	cbnz	r3, 8009786 <_raise_r+0x32>
 8009772:	4620      	mov	r0, r4
 8009774:	f000 f830 	bl	80097d8 <_getpid_r>
 8009778:	462a      	mov	r2, r5
 800977a:	4601      	mov	r1, r0
 800977c:	4620      	mov	r0, r4
 800977e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009782:	f000 b817 	b.w	80097b4 <_kill_r>
 8009786:	2b01      	cmp	r3, #1
 8009788:	d00a      	beq.n	80097a0 <_raise_r+0x4c>
 800978a:	1c59      	adds	r1, r3, #1
 800978c:	d103      	bne.n	8009796 <_raise_r+0x42>
 800978e:	2316      	movs	r3, #22
 8009790:	6003      	str	r3, [r0, #0]
 8009792:	2001      	movs	r0, #1
 8009794:	e7e7      	b.n	8009766 <_raise_r+0x12>
 8009796:	2400      	movs	r4, #0
 8009798:	4628      	mov	r0, r5
 800979a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800979e:	4798      	blx	r3
 80097a0:	2000      	movs	r0, #0
 80097a2:	e7e0      	b.n	8009766 <_raise_r+0x12>

080097a4 <raise>:
 80097a4:	4b02      	ldr	r3, [pc, #8]	; (80097b0 <raise+0xc>)
 80097a6:	4601      	mov	r1, r0
 80097a8:	6818      	ldr	r0, [r3, #0]
 80097aa:	f7ff bfd3 	b.w	8009754 <_raise_r>
 80097ae:	bf00      	nop
 80097b0:	20000068 	.word	0x20000068

080097b4 <_kill_r>:
 80097b4:	b538      	push	{r3, r4, r5, lr}
 80097b6:	2300      	movs	r3, #0
 80097b8:	4d06      	ldr	r5, [pc, #24]	; (80097d4 <_kill_r+0x20>)
 80097ba:	4604      	mov	r4, r0
 80097bc:	4608      	mov	r0, r1
 80097be:	4611      	mov	r1, r2
 80097c0:	602b      	str	r3, [r5, #0]
 80097c2:	f7f8 fc0c 	bl	8001fde <_kill>
 80097c6:	1c43      	adds	r3, r0, #1
 80097c8:	d102      	bne.n	80097d0 <_kill_r+0x1c>
 80097ca:	682b      	ldr	r3, [r5, #0]
 80097cc:	b103      	cbz	r3, 80097d0 <_kill_r+0x1c>
 80097ce:	6023      	str	r3, [r4, #0]
 80097d0:	bd38      	pop	{r3, r4, r5, pc}
 80097d2:	bf00      	nop
 80097d4:	200004e0 	.word	0x200004e0

080097d8 <_getpid_r>:
 80097d8:	f7f8 bbfa 	b.w	8001fd0 <_getpid>

080097dc <__swhatbuf_r>:
 80097dc:	b570      	push	{r4, r5, r6, lr}
 80097de:	460c      	mov	r4, r1
 80097e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097e4:	4615      	mov	r5, r2
 80097e6:	2900      	cmp	r1, #0
 80097e8:	461e      	mov	r6, r3
 80097ea:	b096      	sub	sp, #88	; 0x58
 80097ec:	da0c      	bge.n	8009808 <__swhatbuf_r+0x2c>
 80097ee:	89a3      	ldrh	r3, [r4, #12]
 80097f0:	2100      	movs	r1, #0
 80097f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80097f6:	bf0c      	ite	eq
 80097f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80097fc:	2340      	movne	r3, #64	; 0x40
 80097fe:	2000      	movs	r0, #0
 8009800:	6031      	str	r1, [r6, #0]
 8009802:	602b      	str	r3, [r5, #0]
 8009804:	b016      	add	sp, #88	; 0x58
 8009806:	bd70      	pop	{r4, r5, r6, pc}
 8009808:	466a      	mov	r2, sp
 800980a:	f000 f849 	bl	80098a0 <_fstat_r>
 800980e:	2800      	cmp	r0, #0
 8009810:	dbed      	blt.n	80097ee <__swhatbuf_r+0x12>
 8009812:	9901      	ldr	r1, [sp, #4]
 8009814:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009818:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800981c:	4259      	negs	r1, r3
 800981e:	4159      	adcs	r1, r3
 8009820:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009824:	e7eb      	b.n	80097fe <__swhatbuf_r+0x22>

08009826 <__smakebuf_r>:
 8009826:	898b      	ldrh	r3, [r1, #12]
 8009828:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800982a:	079d      	lsls	r5, r3, #30
 800982c:	4606      	mov	r6, r0
 800982e:	460c      	mov	r4, r1
 8009830:	d507      	bpl.n	8009842 <__smakebuf_r+0x1c>
 8009832:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009836:	6023      	str	r3, [r4, #0]
 8009838:	6123      	str	r3, [r4, #16]
 800983a:	2301      	movs	r3, #1
 800983c:	6163      	str	r3, [r4, #20]
 800983e:	b002      	add	sp, #8
 8009840:	bd70      	pop	{r4, r5, r6, pc}
 8009842:	466a      	mov	r2, sp
 8009844:	ab01      	add	r3, sp, #4
 8009846:	f7ff ffc9 	bl	80097dc <__swhatbuf_r>
 800984a:	9900      	ldr	r1, [sp, #0]
 800984c:	4605      	mov	r5, r0
 800984e:	4630      	mov	r0, r6
 8009850:	f7fd fb96 	bl	8006f80 <_malloc_r>
 8009854:	b948      	cbnz	r0, 800986a <__smakebuf_r+0x44>
 8009856:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800985a:	059a      	lsls	r2, r3, #22
 800985c:	d4ef      	bmi.n	800983e <__smakebuf_r+0x18>
 800985e:	f023 0303 	bic.w	r3, r3, #3
 8009862:	f043 0302 	orr.w	r3, r3, #2
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	e7e3      	b.n	8009832 <__smakebuf_r+0xc>
 800986a:	89a3      	ldrh	r3, [r4, #12]
 800986c:	6020      	str	r0, [r4, #0]
 800986e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009872:	81a3      	strh	r3, [r4, #12]
 8009874:	9b00      	ldr	r3, [sp, #0]
 8009876:	6120      	str	r0, [r4, #16]
 8009878:	6163      	str	r3, [r4, #20]
 800987a:	9b01      	ldr	r3, [sp, #4]
 800987c:	b15b      	cbz	r3, 8009896 <__smakebuf_r+0x70>
 800987e:	4630      	mov	r0, r6
 8009880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009884:	f000 f81e 	bl	80098c4 <_isatty_r>
 8009888:	b128      	cbz	r0, 8009896 <__smakebuf_r+0x70>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f023 0303 	bic.w	r3, r3, #3
 8009890:	f043 0301 	orr.w	r3, r3, #1
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	89a3      	ldrh	r3, [r4, #12]
 8009898:	431d      	orrs	r5, r3
 800989a:	81a5      	strh	r5, [r4, #12]
 800989c:	e7cf      	b.n	800983e <__smakebuf_r+0x18>
	...

080098a0 <_fstat_r>:
 80098a0:	b538      	push	{r3, r4, r5, lr}
 80098a2:	2300      	movs	r3, #0
 80098a4:	4d06      	ldr	r5, [pc, #24]	; (80098c0 <_fstat_r+0x20>)
 80098a6:	4604      	mov	r4, r0
 80098a8:	4608      	mov	r0, r1
 80098aa:	4611      	mov	r1, r2
 80098ac:	602b      	str	r3, [r5, #0]
 80098ae:	f7f8 fbf4 	bl	800209a <_fstat>
 80098b2:	1c43      	adds	r3, r0, #1
 80098b4:	d102      	bne.n	80098bc <_fstat_r+0x1c>
 80098b6:	682b      	ldr	r3, [r5, #0]
 80098b8:	b103      	cbz	r3, 80098bc <_fstat_r+0x1c>
 80098ba:	6023      	str	r3, [r4, #0]
 80098bc:	bd38      	pop	{r3, r4, r5, pc}
 80098be:	bf00      	nop
 80098c0:	200004e0 	.word	0x200004e0

080098c4 <_isatty_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	2300      	movs	r3, #0
 80098c8:	4d05      	ldr	r5, [pc, #20]	; (80098e0 <_isatty_r+0x1c>)
 80098ca:	4604      	mov	r4, r0
 80098cc:	4608      	mov	r0, r1
 80098ce:	602b      	str	r3, [r5, #0]
 80098d0:	f7f8 fbf2 	bl	80020b8 <_isatty>
 80098d4:	1c43      	adds	r3, r0, #1
 80098d6:	d102      	bne.n	80098de <_isatty_r+0x1a>
 80098d8:	682b      	ldr	r3, [r5, #0]
 80098da:	b103      	cbz	r3, 80098de <_isatty_r+0x1a>
 80098dc:	6023      	str	r3, [r4, #0]
 80098de:	bd38      	pop	{r3, r4, r5, pc}
 80098e0:	200004e0 	.word	0x200004e0

080098e4 <_init>:
 80098e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098e6:	bf00      	nop
 80098e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ea:	bc08      	pop	{r3}
 80098ec:	469e      	mov	lr, r3
 80098ee:	4770      	bx	lr

080098f0 <_fini>:
 80098f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098f2:	bf00      	nop
 80098f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098f6:	bc08      	pop	{r3}
 80098f8:	469e      	mov	lr, r3
 80098fa:	4770      	bx	lr
